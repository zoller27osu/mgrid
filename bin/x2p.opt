       !        
       !        Cray Inc. Decompilation
       !        Notice - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  x2p.F
       !        File                  :  /mnt/a/u/sciteam/zoller/mgrid/bin/x2p.opt
       !        Network               :  Gemini interconnect
       !        Target                :  X86 :: interlagos, avx, xop, fma, pic
       !        
   34.       
   34.       program mgrid_test
   46.       call init_proc
   48.       if ( nid == 0 ) then
   48.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': num MPI procs = ', 0x800600000000L ), _iotype( np, 0x2000200000000L ) ) )
   48.       endif
   50.       $rp_S0 = real( np ) ** 3.3333333333333331e-1
   50.       $mp_S2 = int( 1.01 * $rp_S0 )
   50.       $t_S3 = int( 1.01 * $rp_S0 )
   50.       $ip_S4 = int( 1.01 * $rp_S0 )
   50.       if ( int( 1.01 * $rp_S0 ) > 0 ) then
   50.          $I_L50_24 = 0
   50. !dir$ ivdep
   50.          do
   50.             mqr = np / ( $t_S3 + -$I_L50_24 )
   50.             if ( np + -( mqr * $t_S3 ) + mqr * $I_L50_24 == 0 ) then
   50.                $ip_S4 = $mp_S2 + -$I_L50_24
   50.                goto 10
   50.             endif
   50.             $I_L50_24 = 1 + $I_L50_24
   50.             if ( $I_L50_24 >= $t_S3 ) exit
   50.          enddo
   50.          $ip_S4 = ( $mp_S2 + -$t_S3 )
   50.       endif
   50.    10 continue
   50.       mp = $ip_S4
   50.       $mq_S6 = int( 1.01 * _sqrt( mqr ) )
   50.       $t_S7 = int( 1.01 * _sqrt( mqr ) )
   50.       $iq_S9 = int( 1.01 * _sqrt( mqr ) )
   50.       if ( int( 1.01 * _sqrt( mqr ) ) > 0 ) then
   50.          $I_L50_26 = 0
   50. !dir$ ivdep
   50.          do
   50.             $mr_S8 = mqr / ( $t_S7 + -$I_L50_26 )
   50.             if ( mqr + -( $t_S7 * $mr_S8 ) + $mr_S8 * $I_L50_26 == 0 ) then
   50.                $iq_S9 = $mq_S6 + -$I_L50_26
   50.                goto 20
   50.             endif
   50.             $I_L50_26 = 1 + $I_L50_26
   50.             if ( $I_L50_26 >= $t_S7 ) exit
   50.          enddo
   50.          $iq_S9 = ( $mq_S6 + -$t_S7 )
   50.       endif
   50.    20 continue
   50.       mq = $iq_S9
   50.       mr = np / ( $ip_S4 * $iq_S9 )
   51.       $ir_S13 = 1 + nid / ( $ip_S4 * $iq_S9 )
   51.       $mod1_S10 = 0
   51.       if ( nid /= -1 ) then
   51.          if ( $ip_S4 * $iq_S9 == 0 ) then
   51.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'WARNING:  Attempt to take MOD(I,0) in function mod1.', 0x800600000000L ) ) )
   51.          else
   51.             $mod1_S10 = 1 + mod( nid + $ip_S4 * $iq_S9, $ip_S4 * $iq_S9 )
   51.          endif
   51.       endif
   51.       $iq_S12 = 1 + ( -1 + $mod1_S10 ) / $ip_S4
   51.       $mod1_S11 = 0
   51.       if ( nid /= -1 ) then
   51.          if ( $ip_S4 == 0 ) then
   51.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'WARNING:  Attempt to take MOD(I,0) in function mod1.', 0x800600000000L ) ) )
   51.          else
   51.             $mod1_S11 = 1 + mod( nid + $ip_S4, $ip_S4 )
   51.          endif
   51.       endif
   51.       ip = -1 + $mod1_S11
   51.       iq = -1 + $iq_S12
   51.       ir = -1 + $ir_S13
   53.       $I_L53_30 = 0
   53.       do
   54.          icalld = 0
   55.          $I_L55_28 = 0
   55.          do
   56.             call mgrid_tester( nlev_last )
   57.             $I_L55_28 = 1 + $I_L55_28
   57.             if ( $I_L55_28 >= 90 ) exit
   57.          enddo
   58.          t$6 = 9
   58.          t$7(1) = 0x100000000000000L
   58. !dir$ suppress t$6
   58.          t$7(2) = int( loc( t$6 ), 8 )
   58.          t$7(3) = 0
   58.          t$7(4) = 0
   58.          t$7(5) = 0
   58.          t$7(7) = 0
   58.          t$7(8) = 0
   58.          t$5 = _close( t$7 )
   59.          $I_L53_30 = 1 + $I_L53_30
   59.          if ( $I_L53_30 >= 2 ) exit
   59.       enddo
   61.       call exitt
   62.       call _end
   62.       return
   62.       end
   62.       
   65.       
   65.       subroutine mgrid_tester( nlev_last )
   82.       call init_mg( npass, nsmooth, igs, sigma )
   84.       if ( nlev > nlev_last ) then
   85.          nlev_last = nlev
   87.          cflops = 0.0
   87.          pflops = 0.0
   87.          rflops = 0.0
   87.          rrlops = 0.0
   89.          lev = nlev
   91.          n = _lsh( 1, nlev )
   92.          h = 1.0/( real( _lsh( 1, nlev ) ) )
   95.          $I_L95_293 = 0
   95. !dir$ ivdep
   95.          do
   95.             tflag(1 + $I_L95_293) = 0
   96.             dmflag(1 + $I_L95_293) = 0
   95.             $I_L95_293 = 1 + $I_L95_293
   95.             if ( $I_L95_293 >= 14 ) exit
   95.          enddo
   98.          call dmesh( mm, n )
  100.          if ( mm > 0 ) then
  100.             $I_L100_295 = 0
  100. !dir$ ivdep
  100. !dir$ loop_info (automatic) cache_nt( ue, rf, r, u )
  100.             do
  100.                u($I_L100_295) = 0.0
  101.                r($I_L100_295) = 0.0
  102.                rf($I_L100_295) = 0.0
  103.                ue($I_L100_295) = 0.0
  100.                $I_L100_295 = 1 + $I_L100_295
  100.                if ( $I_L100_295 >= mm ) exit
  100.             enddo
  100.          endif
  105.          ipa$340 = 3
  105.          call initu( ue(0), n, h, ipa$340 )
  106.          ipa$361 = 1
  106.          call xchange0( ue(0), ipa$361 )
  108.          ipa$396 = loc( r(0) )
  108.          r = _copyin( r(0) )
  108.          ipa$398 = loc( ue(0) )
  108.          u = _copyin( ue(0) )
  108.          ipa$400 = loc( rf(0) )
  108.          ro = _copyin( rf(0) )
  108.          t$174 = mx
  108.          t$175 = my
  108.          t$176 = mz
  108.          t$177 = 1 + mx
  108.          t$178 = _zla( 0, 1 + mx )
  108.          t$179 = _zla( 0, 1 + mx )
  108.          t$180 = 1 + my
  108.          t$181 = _zla( 0, 1 + my )
  108.          t$182 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  108.          t$183 = 1 + mz
  108.          t$184 = _zla( 0, 1 + mz )
  108.          t$185 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
  108.          $h2_S9 = h * h
  108.          $h2i_S10 = 1.0/( h * h )
  108.          if ( -1 + mz > 0 ) then
  108.             if ( -1 + my > 0 ) then
  108.                if ( -1 + mx > 0 ) then
  108.                   $SI_L108_363_G1 = 0
  108.                   do
  108.                      $SI_L108_343_G4 = 0
  108.                      do
  108.                         $SI_L108_297_G7 = 0
  108.                         do
  108.                            $I_L108_425 = 0
  108. !dir$ shortloop32
  108. !dir$ blocking_size( 4, 4 )
  108.                            do
  108.                               $I_L108_407 = 0
  108. !dir$ shortloop32
  108. !dir$ blocking_size( 4, 4 )
  108.                               do
  108.                                  $I_L108_389 = 0
  108. !dir$ ivdep
  108. !dir$ blocking_size( 256, 256 )
  108.                                  do
  108.                                     r($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) = $h2i_S10 * ( $h2_S9 * ro($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + -6.0 * u($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + u($I_L108_389 + 256 * $SI_L108_297_G7, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + u($I_L108_389 + 256 * $SI_L108_297_G7 + 2, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + u($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + u($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 2, $I_L108_425 + 4 * $SI_L108_363_G1 + 1) + u($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1) + u($I_L108_389 + 256 * $SI_L108_297_G7 + 1, $I_L108_407 + 4 * $SI_L108_343_G4 + 1, $I_L108_425 + 4 * $SI_L108_363_G1 + 2) )
  108.                                     $I_L108_389 = 1 + $I_L108_389
  108.                                     if ( $I_L108_389 >= min( -1 + mx, 256 + 256 * $SI_L108_297_G7 ) + -256 * $SI_L108_297_G7 ) exit
  108.                                  enddo
  108.                                  $I_L108_407 = 1 + $I_L108_407
  108.                                  if ( $I_L108_407 >= min( -1 + my, 4 + 4 * $SI_L108_343_G4 ) + -4 * $SI_L108_343_G4 ) exit
  108.                               enddo
  108.                               $I_L108_425 = 1 + $I_L108_425
  108.                               if ( $I_L108_425 >= min( -1 + mz, 4 + 4 * $SI_L108_363_G1 ) + -4 * $SI_L108_363_G1 ) exit
  108.                            enddo
  108.                            $SI_L108_297_G7 = 1 + $SI_L108_297_G7
  108.                            if ( $SI_L108_297_G7 >= _rsh( 254 + mx, 8 ) ) exit
  108.                         enddo
  108.                         $SI_L108_343_G4 = 1 + $SI_L108_343_G4
  108.                         if ( $SI_L108_343_G4 >= _rsh( 2 + my, 2 ) ) exit
  108.                      enddo
  108.                      $SI_L108_363_G1 = 1 + $SI_L108_363_G1
  108.                      if ( $SI_L108_363_G1 >= _rsh( 2 + mz, 2 ) ) exit
  108.                   enddo
  108.                endif
  108.             endif
  108.          endif
  108.          rrlops = rrlops + ( 10 * mx + 10 * my + 10 * mz + mx * my * -10 + mx * mz * -10 + my * mz * -10 + mx * my * mz * 10 + -10 )
  108.          rf(0) = _copyout( ro )
  108.          ue(0) = _copyout( u )
  108.          r(0) = _copyout( r )
  109.          if ( mm > 0 ) then
  109.             $I_L109_299 = 0
  109. !dir$ ivdep
  109. !dir$ loop_info (automatic) cache_nt( r )
  109.             do
  109.                r($I_L109_299) = -r($I_L109_299)
  109.                $I_L109_299 = 1 + $I_L109_299
  109.                if ( $I_L109_299 >= mm ) exit
  109.             enddo
  109.          endif
  110.          ipa$411 = 1
  110.          call xchange0( r(0), ipa$411 )
  114.          lev = nlev
  116.          n = _lsh( 1, nlev )
  117.          h = 1.0/( real( _lsh( 1, nlev ) ) )
  120.          call dmesh( mm, n )
  122.          iz = 1
  124.          dmax = 0.0
  128.          ipa$424 = 1
  128.          ipa$425 = 2
  128.          call test_xchange( u(0), ipa$424, ipa$425 )
  133.          ipa$460 = 2
  133.          ipa$461 = 4
  133.          call test_alts( u(0), r(0), h, sigma, nsmooth, rf(0), iz, ipa$460, ipa$461 )
  137.          call gsync
  138.          time0 = dclock
  141.          $ipass_S13 = 1
  141.          if ( 200 * npass > 0 ) then
  141.             $I_L141_301 = 0
  141.             do
  142.                ipa$646 = 1
  142.                call xchange0( u(0), ipa$646 )
  143.                $I_L141_301 = 1 + $I_L141_301
  143.                if ( $I_L141_301 >= ( 200 * npass ) ) exit
  143.             enddo
  143.             $ipass_S13 = ( 1 + 200 * npass )
  143.          endif
  144.          call gsync
  145.          time1 = dclock
  146.          if ( nid == 1 ) then
  146.             $_IOitem_P0(0) = time0
  146.             $_IOitem_P0(1) = time1
  146.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x4010300000000L ) ) )
  146.          endif
  147.          t$16 = -1 + $ipass_S13
  147.          t$12 = time1 + -time0
  147.           _substr(t$17,1,4) = 'D'
  147.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$17,1,1) )
  149.          call gsync
  150.          $time0_S16 = dclock
  153.          $ipass_S15 = 1
  153.          if ( 200 * npass > 0 ) then
  153.             $I_L153_303 = 0
  153.             do
  154.                ipa$665 = 2
  154.                call xchange0( u(0), ipa$665 )
  155.                $I_L153_303 = 1 + $I_L153_303
  155.                if ( $I_L153_303 >= ( 200 * npass ) ) exit
  155.             enddo
  155.             $ipass_S15 = ( 1 + 200 * npass )
  155.          endif
  156.          call gsync
  157.          $time1_S17 = dclock
  159.          t$16 = -1 + $ipass_S15
  159.          t$12 = $time1_S17 + -$time0_S16
  159.           _substr(t$21,1,4) = 'Y'
  159.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$21,1,1) )
  161.          call gsync
  162.          $time0_S20 = dclock
  165.          $ipass_S19 = 1
  165.          if ( 200 * npass > 0 ) then
  165.             $I_L165_305 = 0
  165.             do
  166.                ipa$684 = 0
  166.                call xchange0( u(0), ipa$684 )
  167.                $I_L165_305 = 1 + $I_L165_305
  167.                if ( $I_L165_305 >= ( 200 * npass ) ) exit
  167.             enddo
  167.             $ipass_S19 = ( 1 + 200 * npass )
  167.          endif
  168.          call gsync
  169.          $time1_S21 = dclock
  171.          t$16 = -1 + $ipass_S19
  171.          t$12 = $time1_S21 + -$time0_S20
  171.           _substr(t$25,1,4) = 'O'
  171.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$25,1,1) )
  172.          if ( nid == 1 ) then
  172.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' ', 0x800600000000L ) ) )
  172.          endif
  175.          call gsync
  176.          time0 = dclock
  179.          $ipass_S33 = 1
  179.          if ( npass > 0 ) then
  179.             $I_L179_385 = 0
  179.             do
  180.                ipa$720 = loc( u(0) )
  180.                u = _copyin( u(0) )
  180.                ipa$722 = loc( r(0) )
  180.                r = _copyin( r(0) )
  180.                ipa$724 = loc( rf(0) )
  180.                o = _copyin( rf(0) )
  180.                t$894 = mx
  180.                t$895 = my
  180.                t$896 = mz
  180.                t$897 = 1 + mx
  180.                t$898 = _zla( 0, 1 + mx )
  180.                t$899 = _zla( 0, 1 + mx )
  180.                t$900 = 1 + my
  180.                t$901 = _zla( 0, 1 + my )
  180.                t$902 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  180.                t$903 = 1 + mz
  180.                t$904 = _zla( 0, 1 + mz )
  180.                t$905 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
  180.                $h2_S22 = h * h
  180.                $sa_S23 = ( 1.6666666666666666e-1 * sigma )
  180.                if ( iz == 0 ) then
  180.                   if ( -1 + mz > 0 ) then
  180.                      if ( -1 + my > 0 ) then
  180.                         if ( -1 + mx > 0 ) then
  180.                            $I_L180_365 = 0
  180.                            do
  180.                               $I_L180_345 = 0
  180.                               do
  180.                                  $I_L180_307 = 0
  180. !dir$ ivdep
  180.                                  do
  180.                                     u(1 + $I_L180_307, 1 + $I_L180_345, 1 + $I_L180_365) = $sa_S23 * $h2_S22 * r(1 + $I_L180_307, 1 + $I_L180_345, 1 + $I_L180_365)
  180.                                     $I_L180_307 = 1 + $I_L180_307
  180.                                     if ( $I_L180_307 >= -1 + mx ) exit
  180.                                  enddo
  180.                                  $I_L180_345 = 1 + $I_L180_345
  180.                                  if ( $I_L180_345 >= -1 + my ) exit
  180.                               enddo
  180.                               $I_L180_365 = 1 + $I_L180_365
  180.                               if ( $I_L180_365 >= -1 + mz ) exit
  180.                            enddo
  180.                         endif
  180.                      endif
  180.                   endif
  180.                   cflops = cflops + ( 2 * mx + 2 * my + mx * my * -2 + 2 * mz + mx * mz * -2 + my * mz * -2 + mx * my * mz * 2 + -2 )
  180.                endif
  180.                if ( nsmooth + iz + -2 >= 0 ) then
  180.                   if ( mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz >= 0 ) then
  180.                      if ( -1 + mz <= 0 ) then
  180.                         $I_L180_357 = 0
  180.                         do
  180.                            ipa$739 = loc( o(0, 0, 0) )
  180.                            a = _copyin( o(0, 0, 0) )
  180.                            ipa$741 = loc( u(0, 0, 0) )
  180.                            b = _copyin( u(0, 0, 0) )
  180.                            $I_L180_331 = 0
  180. !dir$ ivdep
  180.                            do
  180.                               a(1 + $I_L180_331) = b(1 + $I_L180_331)
  180.                               $I_L180_331 = 1 + $I_L180_331
  180.                               if ( $I_L180_331 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  180.                            enddo
  180.                            u(0, 0, 0) = _copyout( b )
  180.                            o(0, 0, 0) = _copyout( a )
  180.                            $I_L180_357 = 1 + $I_L180_357
  180.                            if ( $I_L180_357 >= nsmooth + iz + -1 ) exit
  180.                         enddo
  180.                      else if ( -1 + my <= 0 ) then
  180.                         $I_L180_359 = 0
  180.                         do
  180.                            ipa$739 = loc( o(0, 0, 0) )
  180.                            a = _copyin( o(0, 0, 0) )
  180.                            ipa$741 = loc( u(0, 0, 0) )
  180.                            b = _copyin( u(0, 0, 0) )
  180.                            $I_L180_335 = 0
  180. !dir$ ivdep
  180.                            do
  180.                               a(1 + $I_L180_335) = b(1 + $I_L180_335)
  180.                               $I_L180_335 = 1 + $I_L180_335
  180.                               if ( $I_L180_335 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  180.                            enddo
  180.                            u(0, 0, 0) = _copyout( b )
  180.                            o(0, 0, 0) = _copyout( a )
  180.                            $I_L180_359 = 1 + $I_L180_359
  180.                            if ( $I_L180_359 >= nsmooth + iz + -1 ) exit
  180.                         enddo
  180.                      else if ( -1 + mx > 0 ) then
  180.                         $I_L180_377 = 0
  180.                         do
  180.                            ipa$739 = loc( o(0, 0, 0) )
  180.                            a = _copyin( o(0, 0, 0) )
  180.                            ipa$741 = loc( u(0, 0, 0) )
  180.                            b = _copyin( u(0, 0, 0) )
  180.                            $I_L180_309 = 0
  180. !dir$ ivdep
  180.                            do
  180.                               a(1 + $I_L180_309) = b(1 + $I_L180_309)
  180.                               $I_L180_309 = 1 + $I_L180_309
  180.                               if ( $I_L180_309 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  180.                            enddo
  180.                            u(0, 0, 0) = _copyout( b )
  180.                            o(0, 0, 0) = _copyout( a )
  180.                            $SI_L180_367_G10 = 0
  180.                            do
  180.                               $SI_L180_347_G13 = 0
  180.                               do
  180.                                  $SI_L180_311_G16 = 0
  180.                                  do
  180.                                     $I_L180_428 = 0
  180. !dir$ shortloop32
  180. !dir$ blocking_size( 4, 4 )
  180.                                     do
  180.                                        $I_L180_410 = 0
  180. !dir$ shortloop32
  180. !dir$ blocking_size( 4, 4 )
  180.                                        do
  180.                                           $I_L180_392 = 0
  180. !dir$ ivdep
  180. !dir$ blocking_size( 256, 256 )
  180.                                           do
  180.                                              u($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) = o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + $sa_S23 * ( $h2_S22 * r($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + -6.0 * o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + o($I_L180_392 + 256 * $SI_L180_311_G16, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + o($I_L180_392 + 256 * $SI_L180_311_G16 + 2, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 2, $I_L180_428 + 4 * $SI_L180_367_G10 + 1) + o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10) + o($I_L180_392 + 256 * $SI_L180_311_G16 + 1, $I_L180_410 + 4 * $SI_L180_347_G13 + 1, $I_L180_428 + 4 * $SI_L180_367_G10 + 2) )
  180.                                              $I_L180_392 = 1 + $I_L180_392
  180.                                              if ( $I_L180_392 >= min( -1 + mx, 256 + 256 * $SI_L180_311_G16 ) + -256 * $SI_L180_311_G16 ) exit
  180.                                           enddo
  180.                                           $I_L180_410 = 1 + $I_L180_410
  180.                                           if ( $I_L180_410 >= min( -1 + my, 4 + 4 * $SI_L180_347_G13 ) + -4 * $SI_L180_347_G13 ) exit
  180.                                        enddo
  180.                                        $I_L180_428 = 1 + $I_L180_428
  180.                                        if ( $I_L180_428 >= min( -1 + mz, 4 + 4 * $SI_L180_367_G10 ) + -4 * $SI_L180_367_G10 ) exit
  180.                                     enddo
  180.                                     $SI_L180_311_G16 = 1 + $SI_L180_311_G16
  180.                                     if ( $SI_L180_311_G16 >= _rsh( 254 + mx, 8 ) ) exit
  180.                                  enddo
  180.                                  $SI_L180_347_G13 = 1 + $SI_L180_347_G13
  180.                                  if ( $SI_L180_347_G13 >= _rsh( 2 + my, 2 ) ) exit
  180.                               enddo
  180.                               $SI_L180_367_G10 = 1 + $SI_L180_367_G10
  180.                               if ( $SI_L180_367_G10 >= _rsh( 2 + mz, 2 ) ) exit
  180.                            enddo
  180.                            $I_L180_377 = 1 + $I_L180_377
  180.                            if ( $I_L180_377 >= nsmooth + iz + -1 ) exit
  180.                         enddo
  180.                      else
  180.                         $I_L180_361 = 0
  180.                         do
  180.                            ipa$739 = loc( o(0, 0, 0) )
  180.                            a = _copyin( o(0, 0, 0) )
  180.                            ipa$741 = loc( u(0, 0, 0) )
  180.                            b = _copyin( u(0, 0, 0) )
  180.                            $I_L180_339 = 0
  180. !dir$ ivdep
  180.                            do
  180.                               a(1 + $I_L180_339) = b(1 + $I_L180_339)
  180.                               $I_L180_339 = 1 + $I_L180_339
  180.                               if ( $I_L180_339 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  180.                            enddo
  180.                            u(0, 0, 0) = _copyout( b )
  180.                            o(0, 0, 0) = _copyout( a )
  180.                            $I_L180_361 = 1 + $I_L180_361
  180.                            if ( $I_L180_361 >= nsmooth + iz + -1 ) exit
  180.                         enddo
  180.                      endif
  180.                   else if ( -1 + mz <= 0 ) then
  180.                      $I_L180_333 = 0
  180.                      do
  180.                         ipa$739 = loc( o(0, 0, 0) )
  180.                         a = _copyin( o(0, 0, 0) )
  180.                         ipa$741 = loc( u(0, 0, 0) )
  180.                         b = _copyin( u(0, 0, 0) )
  180.                         u(0, 0, 0) = _copyout( b )
  180.                         o(0, 0, 0) = _copyout( a )
  180.                         $I_L180_333 = 1 + $I_L180_333
  180.                         if ( $I_L180_333 >= nsmooth + iz + -1 ) exit
  180.                      enddo
  180.                   else if ( -1 + my <= 0 ) then
  180.                      $I_L180_337 = 0
  180.                      do
  180.                         ipa$739 = loc( o(0, 0, 0) )
  180.                         a = _copyin( o(0, 0, 0) )
  180.                         ipa$741 = loc( u(0, 0, 0) )
  180.                         b = _copyin( u(0, 0, 0) )
  180.                         u(0, 0, 0) = _copyout( b )
  180.                         o(0, 0, 0) = _copyout( a )
  180.                         $I_L180_337 = 1 + $I_L180_337
  180.                         if ( $I_L180_337 >= nsmooth + iz + -1 ) exit
  180.                      enddo
  180.                   else if ( -1 + mx > 0 ) then
  180.                      $I_L180_383 = 0
  180.                      do
  180.                         ipa$739 = loc( o(0, 0, 0) )
  180.                         a = _copyin( o(0, 0, 0) )
  180.                         ipa$741 = loc( u(0, 0, 0) )
  180.                         b = _copyin( u(0, 0, 0) )
  180.                         u(0, 0, 0) = _copyout( b )
  180.                         o(0, 0, 0) = _copyout( a )
  180.                         $SI_L180_375_G19 = 0
  180.                         do
  180.                            $SI_L180_355_G22 = 0
  180.                            do
  180.                               $SI_L180_329_G25 = 0
  180.                               do
  180.                                  $I_L180_437 = 0
  180. !dir$ shortloop32
  180. !dir$ blocking_size( 4, 4 )
  180.                                  do
  180.                                     $I_L180_413 = 0
  180. !dir$ shortloop32
  180. !dir$ blocking_size( 4, 4 )
  180.                                     do
  180.                                        $I_L180_404 = 0
  180. !dir$ ivdep
  180. !dir$ blocking_size( 256, 256 )
  180.                                        do
  180.                                           u($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) = o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + $sa_S23 * ( $h2_S22 * r($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + -6.0 * o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + o($I_L180_404 + 256 * $SI_L180_329_G25, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + o($I_L180_404 + 256 * $SI_L180_329_G25 + 2, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 2, $I_L180_437 + 4 * $SI_L180_375_G19 + 1) + o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19) + o($I_L180_404 + 256 * $SI_L180_329_G25 + 1, $I_L180_413 + 4 * $SI_L180_355_G22 + 1, $I_L180_437 + 4 * $SI_L180_375_G19 + 2) )
  180.                                           $I_L180_404 = 1 + $I_L180_404
  180.                                           if ( $I_L180_404 >= min( -1 + mx, 256 + 256 * $SI_L180_329_G25 ) + -256 * $SI_L180_329_G25 ) exit
  180.                                        enddo
  180.                                        $I_L180_413 = 1 + $I_L180_413
  180.                                        if ( $I_L180_413 >= min( -1 + my, 4 + 4 * $SI_L180_355_G22 ) + -4 * $SI_L180_355_G22 ) exit
  180.                                     enddo
  180.                                     $I_L180_437 = 1 + $I_L180_437
  180.                                     if ( $I_L180_437 >= min( -1 + mz, 4 + 4 * $SI_L180_375_G19 ) + -4 * $SI_L180_375_G19 ) exit
  180.                                  enddo
  180.                                  $SI_L180_329_G25 = 1 + $SI_L180_329_G25
  180.                                  if ( $SI_L180_329_G25 >= _rsh( 254 + mx, 8 ) ) exit
  180.                               enddo
  180.                               $SI_L180_355_G22 = 1 + $SI_L180_355_G22
  180.                               if ( $SI_L180_355_G22 >= _rsh( 2 + my, 2 ) ) exit
  180.                            enddo
  180.                            $SI_L180_375_G19 = 1 + $SI_L180_375_G19
  180.                            if ( $SI_L180_375_G19 >= _rsh( 2 + mz, 2 ) ) exit
  180.                         enddo
  180.                         $I_L180_383 = 1 + $I_L180_383
  180.                         if ( $I_L180_383 >= nsmooth + iz + -1 ) exit
  180.                      enddo
  180.                   else
  180.                      $I_L180_341 = 0
  180.                      do
  180.                         ipa$739 = loc( o(0, 0, 0) )
  180.                         a = _copyin( o(0, 0, 0) )
  180.                         ipa$741 = loc( u(0, 0, 0) )
  180.                         b = _copyin( u(0, 0, 0) )
  180.                         u(0, 0, 0) = _copyout( b )
  180.                         o(0, 0, 0) = _copyout( a )
  180.                         $I_L180_341 = 1 + $I_L180_341
  180.                         if ( $I_L180_341 >= nsmooth + iz + -1 ) exit
  180.                      enddo
  180.                   endif
  180.                endif
  180.                cflops = cflops + ( -11 * mx + -11 * my + mx * my * 11 + -11 * mz + mx * mz * 11 + my * mz * 11 + mx * my * mz * -11 + -11 * nsmooth + nsmooth * mx * 11 + nsmooth * my * 11 + nsmooth * mx * my * -11 + nsmooth * mz * 11 + nsmooth * mx * mz * -11 + nsmooth * my * mz * -11 + nsmooth * mx * my * mz * 11 + -11 * iz + mx * iz * 11 + my * iz * 11 + mx * my * iz * -11 + mz * iz * 11 + mx * mz * iz * -11 + my * mz * iz * -11 + mx * my * mz * iz * 11 + 11 )
  180.                rf(0) = _copyout( o )
  180.                r(0) = _copyout( r )
  180.                u(0) = _copyout( u )
  181.                $I_L179_385 = 1 + $I_L179_385
  181.                if ( $I_L179_385 >= npass ) exit
  181.             enddo
  181.             $ipass_S33 = ( 1 + npass )
  181.          endif
  182.          call gsync
  183.          time1 = dclock
  184.          if ( nid == 1 ) then
  184.             $_IOitem_P1(0) = time0
  184.             $_IOitem_P1(1) = time1
  184.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P1(:( 0, 1, 1 )), 0x4010300000000L ) ) )
  184.          endif
  185.          t$16 = -1 + $ipass_S33
  185.          t$12 = time1 + -time0
  185.           _substr(t$29,1,4) = 'Q'
  185.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$29,1,1) )
  187.          call gsync
  188.          $time0_S36 = dclock
  190.          $ipass_S35 = 1
  190.          if ( npass > 0 ) then
  190.             $I_L190_313 = 0
  190.             do
  191.                ipa$753 = 2
  191.                ipa$754 = 3
  191.                call smooth_m( u(0), r(0), mx, my, mz, h, sigma, nsmooth, rf(0), iz, ipa$753, ipa$754 )
  193.                ipa$903 = 1
  193.                call xchange0( u(0), ipa$903 )
  194.                $I_L190_313 = 1 + $I_L190_313
  194.                if ( $I_L190_313 >= npass ) exit
  194.             enddo
  194.             $ipass_S35 = ( 1 + npass )
  194.          endif
  195.          call gsync
  196.          $time1_S37 = dclock
  198.          t$16 = -1 + $ipass_S35
  198.          t$12 = $time1_S37 + -$time0_S36
  198.           _substr(t$33,1,4) = 'A'
  198.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$33,1,1) )
  200.          call gsync
  201.          $time0_S40 = dclock
  203.          $ipass_S39 = 1
  203.          if ( npass > 0 ) then
  203.             $I_L203_315 = 0
  203.             do
  204.                ipa$924 = 3
  204.                ipa$925 = 3
  204.                call smooth_m( u(0), r(0), mx, my, mz, h, sigma, nsmooth, rf(0), iz, ipa$924, ipa$925 )
  206.                ipa$1074 = 1
  206.                call xchange0( u(0), ipa$1074 )
  207.                $I_L203_315 = 1 + $I_L203_315
  207.                if ( $I_L203_315 >= npass ) exit
  207.             enddo
  207.             $ipass_S39 = ( 1 + npass )
  207.          endif
  208.          call gsync
  209.          $time1_S41 = dclock
  211.          t$16 = -1 + $ipass_S39
  211.          t$12 = $time1_S41 + -$time0_S40
  211.           _substr(t$37,1,4) = 'C'
  211.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$37,1,1) )
  213.          call gsync
  214.          $time0_S44 = dclock
  216.          $ipass_S43 = 1
  216.          if ( npass > 0 ) then
  216.             $I_L216_317 = 0
  216.             do
  217.                ipa$1095 = 4
  217.                ipa$1096 = 3
  217.                call smooth_m( u(0), r(0), mx, my, mz, h, sigma, nsmooth, rf(0), iz, ipa$1095, ipa$1096 )
  219.                ipa$1245 = 1
  219.                call xchange0( u(0), ipa$1245 )
  220.                $I_L216_317 = 1 + $I_L216_317
  220.                if ( $I_L216_317 >= npass ) exit
  220.             enddo
  220.             $ipass_S43 = ( 1 + npass )
  220.          endif
  221.          call gsync
  222.          $time1_S45 = dclock
  224.          t$16 = -1 + $ipass_S43
  224.          t$12 = $time1_S45 + -$time0_S44
  224.           _substr(t$41,1,4) = 'F'
  224.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$41,1,1) )
  226.          call gsync
  227.          $time0_S48 = dclock
  229.          $ipass_S47 = 1
  229.          if ( npass > 0 ) then
  229.             $I_L229_319 = 0
  229.             do
  230.                ipa$1266 = 0
  230.                ipa$1267 = 3
  230.                call smooth_m( u(0), r(0), mx, my, mz, h, sigma, nsmooth, rf(0), iz, ipa$1266, ipa$1267 )
  232.                ipa$1416 = 1
  232.                call xchange0( u(0), ipa$1416 )
  233.                $I_L229_319 = 1 + $I_L229_319
  233.                if ( $I_L229_319 >= npass ) exit
  233.             enddo
  233.             $ipass_S47 = ( 1 + npass )
  233.          endif
  234.          call gsync
  235.          $time1_S49 = dclock
  237.          t$16 = -1 + $ipass_S47
  237.          t$12 = $time1_S49 + -$time0_S48
  237.           _substr(t$45,1,4) = 'J'
  237.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$45,1,1) )
  239.          call gsync
  240.          $time0_S93 = dclock
  241.          $I_L241_387 = 0
  241.          do
  243.             lev = nlev
  245.             n = _lsh( 1, nlev )
  246.             h = 1.0/( real( _lsh( 1, nlev ) ) )
  247.             $kf_S52 = 0
  248.             call dmesh( mm, n )
  250.             $t_S69 = -1 + nlev
  250.             if ( -1 + nlev > 0 ) then
  250.                $I_L250_379 = 0
  250.                do
  252.                   if ( $I_L250_379 == 0 ) then
  253.                      iz = 1
  253.                   else
  255.                      iz = 0
  256.                      if ( mm > 0 ) then
  256.                         $I_L256_321 = 0
  256. !dir$ ivdep
  256. !dir$ loop_info (automatic) cache_nt( u )
  256.                         do
  256.                            u($kf_S52 + $I_L256_321) = 0.0
  256.                            $I_L256_321 = 1 + $I_L256_321
  256.                            if ( $I_L256_321 >= mm ) exit
  256.                         enddo
  256.                      endif
  256.                   endif
  259.                   ipa$1440 = 3
  259.                   call smooth_m( u($kf_S52), r($kf_S52), mx, my, mz, h, sigma, nsmooth, rf(0), iz, igs, ipa$1440 )
  264.                   ipa$1589 = 1
  264.                   call xchange0( u($kf_S52), ipa$1589 )
  266.                   ipa$1624 = loc( rf(0) )
  266.                   r = _copyin( rf(0) )
  266.                   ipa$1626 = loc( u($kf_S52) )
  266.                   u = _copyin( u($kf_S52) )
  266.                   ipa$1628 = loc( r($kf_S52) )
  266.                   ro = _copyin( r($kf_S52) )
  266.                   t$174 = mx
  266.                   t$175 = my
  266.                   t$176 = mz
  266.                   t$177 = 1 + mx
  266.                   t$178 = _zla( 0, 1 + mx )
  266.                   t$179 = _zla( 0, 1 + mx )
  266.                   t$180 = 1 + my
  266.                   t$181 = _zla( 0, 1 + my )
  266.                   t$182 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  266.                   t$183 = 1 + mz
  266.                   t$184 = _zla( 0, 1 + mz )
  266.                   t$185 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
  266.                   $h2_S56 = h * h
  266.                   $h2i_S57 = 1.0/( h * h )
  266.                   if ( -1 + mz > 0 ) then
  266.                      if ( -1 + my > 0 ) then
  266.                         if ( -1 + mx > 0 ) then
  266.                            $SI_L266_369_G28 = 0
  266.                            do
  266.                               $SI_L266_349_G31 = 0
  266.                               do
  266.                                  $SI_L266_323_G34 = 0
  266.                                  do
  266.                                     $I_L266_431 = 0
  266. !dir$ shortloop32
  266. !dir$ blocking_size( 4, 4 )
  266.                                     do
  266.                                        $I_L266_416 = 0
  266. !dir$ shortloop32
  266. !dir$ blocking_size( 4, 4 )
  266.                                        do
  266.                                           $I_L266_395 = 0
  266. !dir$ ivdep
  266. !dir$ blocking_size( 256, 256 )
  266.                                           do
  266.                                              r($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) = $h2i_S57 * ( $h2_S56 * ro($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + -6.0 * u($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + u($I_L266_395 + 256 * $SI_L266_323_G34, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + u($I_L266_395 + 256 * $SI_L266_323_G34 + 2, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + u($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + u($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 2, $I_L266_431 + 4 * $SI_L266_369_G28 + 1) + u($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28) + u($I_L266_395 + 256 * $SI_L266_323_G34 + 1, $I_L266_416 + 4 * $SI_L266_349_G31 + 1, $I_L266_431 + 4 * $SI_L266_369_G28 + 2) )
  266.                                              $I_L266_395 = 1 + $I_L266_395
  266.                                              if ( $I_L266_395 >= min( -1 + mx, 256 + 256 * $SI_L266_323_G34 ) + -256 * $SI_L266_323_G34 ) exit
  266.                                           enddo
  266.                                           $I_L266_416 = 1 + $I_L266_416
  266.                                           if ( $I_L266_416 >= min( -1 + my, 4 + 4 * $SI_L266_349_G31 ) + -4 * $SI_L266_349_G31 ) exit
  266.                                        enddo
  266.                                        $I_L266_431 = 1 + $I_L266_431
  266.                                        if ( $I_L266_431 >= min( -1 + mz, 4 + 4 * $SI_L266_369_G28 ) + -4 * $SI_L266_369_G28 ) exit
  266.                                     enddo
  266.                                     $SI_L266_323_G34 = 1 + $SI_L266_323_G34
  266.                                     if ( $SI_L266_323_G34 >= _rsh( 254 + mx, 8 ) ) exit
  266.                                  enddo
  266.                                  $SI_L266_349_G31 = 1 + $SI_L266_349_G31
  266.                                  if ( $SI_L266_349_G31 >= _rsh( 2 + my, 2 ) ) exit
  266.                               enddo
  266.                               $SI_L266_369_G28 = 1 + $SI_L266_369_G28
  266.                               if ( $SI_L266_369_G28 >= _rsh( 2 + mz, 2 ) ) exit
  266.                            enddo
  266.                         endif
  266.                      endif
  266.                   endif
  266.                   rrlops = rrlops + ( 10 * mx + 10 * my + 10 * mz + mx * my * -10 + mx * mz * -10 + my * mz * -10 + mx * my * mz * 10 + -10 )
  266.                   r($kf_S52) = _copyout( ro )
  266.                   u($kf_S52) = _copyout( u )
  266.                   rf(0) = _copyout( r )
  273.                   ipa$1636 = 1
  273.                   call xchange0( rf(0), ipa$1636 )
  275.                   lev = -1 + lev
  276.                   $kf_S52 = mm + $kf_S52
  277.                   n = n / 2
  278.                   h = 1.0/( real( n ) )
  280.                   $mxf_S58 = mx
  281.                   $myf_S59 = my
  284.                   $ieven_S62 = 2 + -mod( istx, 2 )
  285.                   $jeven_S61 = 2 + -mod( isty, 2 )
  286.                   $keven_S60 = 2 + -mod( istz, 2 )
  288.                   call dmesh( mm, n )
  289.                   ipa$1673 = loc( r($kf_S52) )
  289.                   rc = _copyin( r($kf_S52) )
  289.                   ipa$1675 = loc( rf(0) )
  289.                   rf = _copyin( rf(0) )
  289.                   t$213 = mx
  289.                   t$214 = my
  289.                   t$217 = 1 + mx
  289.                   t$218 = _zla( 0, 1 + mx )
  289.                   t$219 = _zla( 0, 1 + mx )
  289.                   t$220 = 1 + my
  289.                   t$221 = _zla( 0, 1 + my )
  289.                   t$222 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  289.                   t$223 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * 2
  289.                   t$215 = $mxf_S58
  289.                   t$216 = $myf_S59
  289.                   t$224 = 1 + $mxf_S58
  289.                   t$225 = _zla( 0, 1 + $mxf_S58 )
  289.                   t$226 = _zla( 0, 1 + $mxf_S58 )
  289.                   t$227 = 1 + $myf_S59
  289.                   t$228 = _zla( 0, 1 + $myf_S59 )
  289.                   t$229 = _zla( 0, 1 + $mxf_S58 ) * _zla( 0, 1 + $myf_S59 )
  289.                   t$230 = _zla( 0, 1 + $mxf_S58 ) * _zla( 0, 1 + $myf_S59 ) * 2
  289.                   if ( -1 + mz > 0 ) then
  289.                      if ( -1 + my > 0 ) then
  289.                         if ( -1 + mx > 0 ) then
  289.                            $SI_L289_371_G37 = 0
  289.                            do
  289.                               $SI_L289_351_G40 = 0
  289.                               do
  289.                                  $SI_L289_325_G43 = 0
  289.                                  do
  289.                                     $I_L289_434 = 0
  289. !dir$ shortloop32
  289. !dir$ blocking_size( 4, 4 )
  289.                                     do
  289.                                        $I_L289_419 = 0
  289. !dir$ shortloop32
  289. !dir$ blocking_size( 4, 4 )
  289.                                        do
  289.                                           $I_L289_398 = 0
  289. !dir$ ivdep
  289. !dir$ loop_info (automatic) cache_nt( rc )
  289. !dir$ blocking_size( 256, 256 )
  289.                                           do
  289.                                              rc($I_L289_398 + 256 * $SI_L289_325_G43 + 1, $I_L289_419 + 4 * $SI_L289_351_G40 + 1, $I_L289_434 + 4 * $SI_L289_371_G37 + 1) = 1.25e-1 * rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + 6.25e-2 * ( rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) ) + 3.125e-2 * ( rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37) ) + 1.5625e-2 * ( rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + -1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + -1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + -1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) + rf($ieven_S62 + 2 * $I_L289_398 + 512 * $SI_L289_325_G43 + 1, $jeven_S61 + 2 * $I_L289_419 + 8 * $SI_L289_351_G40 + 1, $keven_S60 + 2 * $I_L289_434 + 8 * $SI_L289_371_G37 + 1) )
  289.                                              $I_L289_398 = 1 + $I_L289_398
  289.                                              if ( $I_L289_398 >= min( -1 + mx, 256 + 256 * $SI_L289_325_G43 ) + -256 * $SI_L289_325_G43 ) exit
  289.                                           enddo
  289.                                           $I_L289_419 = 1 + $I_L289_419
  289.                                           if ( $I_L289_419 >= min( -1 + my, 4 + 4 * $SI_L289_351_G40 ) + -4 * $SI_L289_351_G40 ) exit
  289.                                        enddo
  289.                                        $I_L289_434 = 1 + $I_L289_434
  289.                                        if ( $I_L289_434 >= min( -1 + mz, 4 + 4 * $SI_L289_371_G37 ) + -4 * $SI_L289_371_G37 ) exit
  289.                                     enddo
  289.                                     $SI_L289_325_G43 = 1 + $SI_L289_325_G43
  289.                                     if ( $SI_L289_325_G43 >= _rsh( 254 + mx, 8 ) ) exit
  289.                                  enddo
  289.                                  $SI_L289_351_G40 = 1 + $SI_L289_351_G40
  289.                                  if ( $SI_L289_351_G40 >= _rsh( 2 + my, 2 ) ) exit
  289.                               enddo
  289.                               $SI_L289_371_G37 = 1 + $SI_L289_371_G37
  289.                               if ( $SI_L289_371_G37 >= _rsh( 2 + mz, 2 ) ) exit
  289.                            enddo
  289.                         endif
  289.                      endif
  289.                   endif
  289.                   rflops = rflops + ( 20 * mx + 20 * my + 20 * mz + mx * my * -20 + mx * mz * -20 + my * mz * -20 + mx * my * mz * 20 + -20 )
  289.                   rf(0) = _copyout( rf )
  289.                   r($kf_S52) = _copyout( rc )
  291.                   $I_L250_379 = 1 + $I_L250_379
  291.                   if ( $I_L250_379 >= $t_S69 ) exit
  291.                enddo
  291.             endif
  293.             one = 1.0
  294.             iz = 0
  295.             ipa$1691 = 1
  295.             ipa$1693 = 3
  295.             call smooth_m( u($kf_S52), r($kf_S52), mx, my, mz, h, one, ipa$1691, rf(0), iz, igs, ipa$1693 )
  297.             t$16 = 1 + lev
  297.             call reset_mtags( t$16 )
  301.             ipa$1842 = 1
  301.             call xchange0( u($kf_S52), ipa$1842 )
  303.             $kc_S70 = $kf_S52
  304.             nf = 2 * n
  307.             $t_S91 = -1 + nlev
  307.             if ( 1 + -nlev < 0 ) then
  307.                $I_L307_381 = 0
  307.                do
  309.                   $mxc_S71 = mx
  310.                   $myc_S72 = my
  313.                   lev = 1 + lev
  314.                   call dmesh( mm, nf )
  315.                   $kf_S52 = $kf_S52 + -mm
  323.                   ipa$1877 = loc( u($kf_S52) )
  323.                   uf = _copyin( u($kf_S52) )
  323.                   ipa$1879 = loc( u($kc_S70) )
  323.                   uc = _copyin( u($kc_S70) )
  323.                   t$258 = mx
  323.                   t$259 = my
  323.                   t$262 = 1 + mx
  323.                   t$263 = _zla( 0, 1 + mx )
  323.                   t$264 = _zla( 0, 1 + mx )
  323.                   t$265 = 1 + my
  323.                   t$266 = _zla( 0, 1 + my )
  323.                   t$267 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  323.                   t$268 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * 2
  323.                   t$260 = $mxc_S71
  323.                   t$261 = $myc_S72
  323.                   t$269 = 1 + $mxc_S71
  323.                   t$270 = _zla( 0, 1 + $mxc_S71 )
  323.                   t$271 = _zla( 0, 1 + $mxc_S71 )
  323.                   t$272 = 1 + $myc_S72
  323.                   t$273 = _zla( 0, 1 + $myc_S72 )
  323.                   t$274 = _zla( 0, 1 + $mxc_S71 ) * _zla( 0, 1 + $myc_S72 )
  323.                   t$275 = _zla( 0, 1 + $mxc_S71 ) * _zla( 0, 1 + $myc_S72 ) * 2
  323.                   dcrn_mx = 0.0
  323.                   $dctr_mx_S86 = 0.0
  323.                   if ( mz > 0 ) then
  323.                      if ( my > 0 ) then
  323.                         if ( mx > 0 ) then
  323.                            $SI_L323_353_G46 = 0
  323.                            do
  323.                               $SI_L323_327_G49 = 0
  323.                               do
  323.                                  $I_L323_373 = 0
  323. !dir$ blocking_size( 2, 2 )
  323.                                  do
  323.                                     $I_L323_422 = 0
  323. !dir$ shortloop32
  323. !dir$ blocking_size( 2, 2 )
  323.                                     do
  323.                                        $I_L323_401 = 0
  323. !dir$ ivdep
  323. !dir$ blocking_size( 256, 256 )
  323.                                        do
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373)
  323.                                           dcrn_mx = max( dcrn_mx, abs( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) ) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) + 5.0e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) + 5.0e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) + 5.0e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 2, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) + 2.5e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 2, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) + 2.5e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 2) + 2.5e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) )
  323.                                           $dctr_S85 = 1.25e-1 * ( uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) + uc($I_L323_401 + 256 * $SI_L323_327_G49 + 1, $I_L323_422 + 2 * $SI_L323_353_G46 + 1, 1 + $I_L323_373) )
  323.                                           uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) = uf(-mod( istx, 2 ) + 2 * $I_L323_401 + 512 * $SI_L323_327_G49 + 1, -mod( isty, 2 ) + 2 * $I_L323_422 + 4 * $SI_L323_353_G46 + 1, -mod( istz, 2 ) + 2 * $I_L323_373 + 1) + $dctr_S85
  323.                                           $dctr_mx_S86 = max( $dctr_mx_S86, abs( $dctr_S85 ) )
  323.                                           $I_L323_401 = 1 + $I_L323_401
  323.                                           if ( $I_L323_401 >= min( ( 1 + mx ) / 2, 256 + 256 * $SI_L323_327_G49 ) + -256 * $SI_L323_327_G49 ) exit
  323.                                        enddo
  323.                                        $I_L323_422 = 1 + $I_L323_422
  323.                                        if ( $I_L323_422 >= min( ( 1 + my ) / 2, 2 + 2 * $SI_L323_353_G46 ) + -2 * $SI_L323_353_G46 ) exit
  323.                                     enddo
  323.                                     $I_L323_373 = 1 + $I_L323_373
  323.                                     if ( $I_L323_373 >= ( 1 + mz ) / 2 ) exit
  323.                                  enddo
  323.                                  $SI_L323_327_G49 = 1 + $SI_L323_327_G49
  323.                                  if ( $SI_L323_327_G49 >= _rsh( 255 + ( 1 + mx ) / 2, 8 ) ) exit
  323.                               enddo
  323.                               $SI_L323_353_G46 = 1 + $SI_L323_353_G46
  323.                               if ( $SI_L323_353_G46 >= _rsh( 1 + ( 1 + my ) / 2, 1 ) ) exit
  323.                            enddo
  323.                         endif
  323.                      endif
  323.                   endif
  323.                   pflops = pflops + mx * my * mz * 34 / 8
  323.                   u($kc_S70) = _copyout( uc )
  323.                   u($kf_S52) = _copyout( uf )
  325.                   t$16 = 1 + lev
  325.                   call reset_mtags( t$16 )
  329.                   ipa$1900 = 1
  329.                   call xchange0( u($kc_S70 + -mm), ipa$1900 )
  333.                   $kc_S70 = $kc_S70 + -mm
  334.                   nf = n * _lsh( 1, 1 + $I_L307_381 ) * 2
  336.                   $I_L307_381 = 1 + $I_L307_381
  336.                   if ( $I_L307_381 >= $t_S91 ) exit
  336.                enddo
  323.                dmax = max( dcrn_mx, $dctr_mx_S86 )
  323.             endif
  347.             $I_L241_387 = 1 + $I_L241_387
  347.             if ( $I_L241_387 >= 20 ) exit
  347.          enddo
  350.          $time1_S94 = dclock
  351.          t$16 = 20
  351.          t$12 = $time1_S94 + -$time0_S93
  351.           _substr(t$53,1,4) = 'X'
  351.          call errchk( emx, u(0), ue(0), t$16, t$12, dmax,  _substr(t$53,1,1) )
  351.       endif
  356.       return
  356.       end
  356.       
  358.       
  358.       subroutine errchk( emx, u, ue, ii, time, dmax, c1 )
  369.       emx = 0.0
  370.       if ( my * mz + mx * my * mz + mx * mz + mx * my + mz + my + mx >= 0 ) then
  370.          $I_L370_6 = 0
  370. !dir$ ivdep
  370.          do
  371.             $diff_S1 = u(1 + $I_L370_6) + -ue(1 + $I_L370_6)
  372.             emx = max( emx, abs( $diff_S1 ) )
  373.             $I_L370_6 = 1 + $I_L370_6
  373.             if ( $I_L370_6 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  373.          enddo
  373.       endif
  374.       ipa$1918 = 1
  374.       emx = glmax( emx, ipa$1918 )
  377.       n3 = nz * ( nx * ny )
  378.       if ( nid == 1 ) then
  379.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '   ii   dmax        emx         time    ldim  nlev  nx    ny   ', 0x800600000000L ), _iotype( ' nz          n3       mp   mq   mr       np          c1', 0x800600000000L ) ) )
  382.          $_IOitem_P0(0) = dmax
  382.          $_IOitem_P0(1) = emx
  382.          $_IOitem_P1(0) = 3
  382.          $_IOitem_P1(1) = nlev
  382.          $_IOitem_P1(2) = nx
  382.          $_IOitem_P1(3) = ny
  382.          $_IOitem_P1(4) = nz
  382.          $_IOitem_P2(0) = mp
  382.          $_IOitem_P2(1) = mq
  382.          $_IOitem_P2(2) = mr
  382.          $_IOitem_P2(3) = np
  382.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$56,  _substr(t$55,1,59), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ii, 0x2000200000000L ), _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x4000300000000L ), _iotype( time, 0x4010300000000L ), _iotype( $_IOitem_P1(:( 0, 4, 1 )), 0x2000200000000L ), _iotype( n3, 0x804040200000000L ), _iotype( $_IOitem_P2(:( 0, 3, 1 )), 0x2000200000000L ), _iotype(  _substr(c1,1,1), 0x800600000000L ) ) )
  382.       endif
  388.       cflops = cflops * np
  389.       pflops = pflops * np
  390.       rflops = rflops * np
  391.       rrlops = rrlops * np
  392.       fflops = ( cflops + pflops + rflops + rrlops )
  393.       if ( time > 0.0 ) then
  393.          fflops = ( 1.0/time * fflops * 9.9999999999999995e-7 )
  393.       endif
  395.       if ( nid == 1 ) then
  396.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '   ii   emx         time        fflops      cflops      pflops ', 0x800600000000L ), _iotype( '     rflops      rrlops               n3           np      c1', 0x800600000000L ) ) )
  399.          $_IOitem_P3(0) = fflops
  399.          $_IOitem_P3(1) = cflops
  399.          $_IOitem_P3(2) = pflops
  399.          $_IOitem_P3(3) = rflops
  399.          $_IOitem_P3(4) = rrlops
  399.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$58,  _substr(t$57,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ii, 0x2000200000000L ), _iotype( emx, 0x4000300000000L ), _iotype( time, 0x4010300000000L ), _iotype( $_IOitem_P3(:( 0, 4, 1 )), 0x4000300000000L ), _iotype( n3, 0x804040200000000L ), _iotype( np, 0x2000200000000L ), _iotype(  _substr(c1,1,1), 0x800600000000L ) ) )
  399.       endif
  405.       cflops = 0.0
  405.       pflops = 0.0
  405.       rflops = 0.0
  405.       rrlops = 0.0
  408.       return
  408.       end
  408.       
  410.       
  410.       real*8
  410.       function glmin( a, n )
  413.       tmin = 9.900000000000001e21
  414.       if ( n > 0 ) then
  414.          $I_L414_6 = 0
  414. !dir$ ivdep
  414.          do
  415.             tmin = min( tmin, a(1 + $I_L414_6) )
  416.             $I_L414_6 = 1 + $I_L414_6
  416.             if ( $I_L414_6 >= n ) exit
  416.          enddo
  416.       endif
  417.        _substr(t$66,1,4) = 'm  '
  417.       call gop( tmin, work,  _substr(t$66,1,3), 1 )
  420.       glmin = tmin
  420.       return
  420.       end
  420.       
  422.       
  422.       real*8
  422.       function glmax( a, n )
  424.       tmax = -9.900000000000001e21
  425.       if ( n > 0 ) then
  425.          $I_L425_6 = 0
  425. !dir$ ivdep
  425.          do
  426.             tmax = max( tmax, a(1 + $I_L425_6) )
  427.             $I_L425_6 = 1 + $I_L425_6
  427.             if ( $I_L425_6 >= n ) exit
  427.          enddo
  427.       endif
  428.        _substr(t$70,1,4) = 'M  '
  428.       call gop( tmax, work,  _substr(t$70,1,3), 1 )
  431.       glmax = tmax
  431.       return
  431.       end
  431.       
  433.       
  433.       integer*4
  433.       function mod1( i, n )
  437.       $mod1_S0 = 0
  438.       if ( i /= 0 ) then
  440.          if ( n == 0 ) then
  441.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'WARNING:  Attempt to take MOD(I,0) in function mod1.', 0x800600000000L ) ) )
  441.          else
  446.             $mod1_S0 = 1 + mod( i + n + -1, n )
  446.          endif
  446.       endif
  448.       mod1 = $mod1_S0
  448.       return
  448.       end
  448.       
  450.       
  450.       integer*4
  450.       function log2( k )
  452.       $rlog_S0 = log10( real( k ) )
  457.       log2 = int( ( 5.0e-1 + ( 3.3219280948873622 * $rlog_S0 ) ) )
  457.       return
  457.       end
  457.       
  459.       
  459.       subroutine rzero( a, n )
  461.       if ( n > 0 ) then
  461.          $I_L461_6 = 0
  461. !dir$ ivdep
  461.          do
  462.             a(1 + $I_L461_6) = 0.0
  463.             $I_L461_6 = 1 + $I_L461_6
  463.             if ( $I_L461_6 >= n ) exit
  463.          enddo
  463.       endif
  465.       return
  465.       end
  465.       
  467.       
  467.       subroutine izero( a, n )
  469.       if ( n > 0 ) then
  469.          $I_L469_6 = 0
  469. !dir$ ivdep
  469.          do
  470.             a(1 + $I_L469_6) = 0
  471.             $I_L469_6 = 1 + $I_L469_6
  471.             if ( $I_L469_6 >= n ) exit
  471.          enddo
  471.       endif
  473.       return
  473.       end
  473.       
  475.       
  475.       subroutine sub3( a, b, c, n )
  477.       if ( n > 0 ) then
  477.          $I_L477_6 = 0
  477. !dir$ ivdep
  477.          do
  478.             a(1 + $I_L477_6) = b(1 + $I_L477_6) + -c(1 + $I_L477_6)
  479.             $I_L477_6 = 1 + $I_L477_6
  479.             if ( $I_L477_6 >= n ) exit
  479.          enddo
  479.       endif
  481.       return
  481.       end
  481.       
  483.       
  483.       subroutine copy( a, b, n )
  485.       if ( n > 0 ) then
  485.          $I_L485_6 = 0
  485. !dir$ ivdep
  485.          do
  486.             a(1 + $I_L485_6) = b(1 + $I_L485_6)
  488.             $I_L485_6 = 1 + $I_L485_6
  488.             if ( $I_L485_6 >= n ) exit
  488.          enddo
  488.       endif
  490.       return
  490.       end
  490.       
  492.       
  492.       subroutine chsign( a, n )
  494.       if ( n > 0 ) then
  494.          $I_L494_6 = 0
  494. !dir$ ivdep
  494.          do
  495.             a(1 + $I_L494_6) = -a(1 + $I_L494_6)
  496.             $I_L494_6 = 1 + $I_L494_6
  496.             if ( $I_L494_6 >= n ) exit
  496.          enddo
  496.       endif
  498.       return
  498.       end
  498.       
  500.       
  500.       subroutine checkit( s10, n_used, n_max )
  507.       if ( n_used > n_max ) then
  509.          $_IOitem_P0(0) = nid
  509.          $_IOitem_P0(1) = n_used
  509.          $_IOitem_P0(2) = n_max
  509.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ), _iotype( ' ERROR checkit: ', 0x800600000000L ), _iotype(  _substr(s10,1,10), 0x800600000000L ) ) )
  510.          call exitt
  512.           _substr(t$87,1,4) = ' '
  512.          call _stop2(  _substr(t$87,1,1), 0 )
  512.       endif
  513.       return
  513.       end
  513.       
  515.       
  515.       subroutine reset_flops
  518.       cflops = 0.0
  519.       pflops = 0.0
  520.       rflops = 0.0
  521.       rrlops = 0.0
  524.       return
  524.       end
  524.       
  526.       
  526.       subroutine init_mg( npass, nsmooth, igs, sigma )
  530.       $rlog_S0 = log10( real( np ) )
  530.       $nlev_max_S2 = 6 + int( ( 5.0e-1 + ( 3.3219280948873622 * $rlog_S0 ) ) ) / 3
  532.       if ( nid == 0 ) then
  533.          if ( icalld == 0 ) then
  533.             t$91 = 9
  533.              _substr(t$92,1,6) = 'in.dat'
  533.             t$93(1) = 0x300000000000000L
  533. !dir$ suppress t$91
  533.             t$93(2) = int( loc( t$91 ), 8 )
  533.             t$93(3) = 0
  533.             t$93(4) = 0
  533. !dir$ suppress  _substr(t$92,1,6)
  533.             t$93(5) = int( loc(  _substr(t$92,1,6) ), 8 )
  533.             t$93(6) = 6
  533.             t$93(7) = 0
  533.             t$93(9) = 0
  533.             t$93(11) = 0
  533.             t$93(13) = 0
  533.             t$93(14) = 0
  533.             t$93(16) = 0
  533.             t$93(18) = 0
  533.             t$93(20) = 0
  533.             t$93(22) = 0
  533.             t$93(24) = 0
  533.             t$93(25) = 0
  533.             t$93(27) = 0
  533.             t$93(29) = 0
  533.             t$93(31) = 0
  533.             t$93(33) = 0
  533.             t$93(35) = 0
  533.             t$93(37) = 0
  533.             t$93(38) = 0
  533.             t$93(39) = 0
  533.             t$90 = _open( t$93 )
  533.          endif
  534.          nlev = 0
  535.          npass = 100
  536.          nsmooth = 21
  537.          igs = 2
  538.          sigma = 6.6666666666666663e-1
  539.          t$94 = _fread( _clist( 0, 4, 2, 9, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nlev, 0x2000200000000L ) ) )
  539.          if ( t$94 == 0 ) then
  539.             t$94 = _fread( _clist( 0, 4, 0, 9, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( npass, 0x2000200000000L ) ) )
  539.             if ( t$94 == 0 ) then
  539.                t$94 = _fread( _clist( 0, 4, 0, 9, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nsmooth, 0x2000200000000L ) ) )
  539.                if ( t$94 == 0 ) then
  539.                   t$94 = _fread( _clist( 0, 4, 0, 9, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( igs, 0x2000200000000L ) ) )
  539.                   if ( t$94 == 0 ) then
  539.                      t$94 = _fread( _clist( 0, 4, 1, 9, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( sigma, 0x4000300000000L ) ) )
  539.                   endif
  539.                endif
  539.             endif
  539.          endif
  539.          if ( t$94 == 1 ) then
  533.             goto 10
  539.          else if ( t$94 /= 2 ) then
  539.    10       continue
  540.             nlev = min( nlev, $nlev_max_S2 )
  541.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Input nlev, npass, nsmooth, igs, sigma:', 0x800600000000L ) ) )
  542.             $_IOitem_P0(0) = nlev
  542.             $_IOitem_P0(1) = npass
  542.             $_IOitem_P0(2) = nsmooth
  542.             $_IOitem_P0(3) = igs
  542.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 3, 1 )), 0x2000200000000L ), _iotype( sigma, 0x4000300000000L ) ) )
  542.          endif
  543.          if ( nlev == 0 ) then
  543.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'nlev = 0, stopping!', 0x800600000000L ) ) )
  543.          endif
  543.       endif
  546.       icalld = 1
  548.       call bcast( nlev, 4 )
  549.       call bcast( npass, 4 )
  550.       call bcast( nsmooth, 4 )
  551.       call bcast( igs, 4 )
  552.       call bcast( sigma, wdsize )
  553.       if ( nlev == 0 ) then
  553.           _substr(t$95,1,4) = ' '
  553.          call _stop2(  _substr(t$95,1,1), 0x526000000000L )
  553.       endif
  556.       return
  556.       end
  556.       
  558.       
  558.       subroutine get_proc_mpqr( mp, mq, mr, np, ldim )
  564.       if ( ldim == 3 ) then
  565.          $rp_S0 = real( np ) ** 3.3333333333333331e-1
  566.          $mp_S2 = int( 1.01 * $rp_S0 )
  567.          $ip_S3 = int( 1.01 * $rp_S0 )
  567.          if ( int( 1.01 * $rp_S0 ) > 0 ) then
  567.             $I_L567_20 = 0
  567. !dir$ ivdep
  567.             do
  568.                mqr = np / ( $mp_S2 + -$I_L567_20 )
  570.                if ( np + -( mqr * $mp_S2 ) + mqr * $I_L567_20 == 0 ) then
  567.                   $ip_S3 = $mp_S2 + -$I_L567_20
  567.                   goto 10
  567.                endif
  571.                $I_L567_20 = 1 + $I_L567_20
  571.                if ( $I_L567_20 >= $mp_S2 ) exit
  571.             enddo
  571.             $ip_S3 = 0
  571.          endif
  571.    10    continue
  572.          $mp_S14 = $ip_S3
  575.          $mq_S5 = int( 1.01 * _sqrt( mqr ) )
  576.          $t_S6 = int( 1.01 * _sqrt( mqr ) )
  576.          $iq_S8 = int( 1.01 * _sqrt( mqr ) )
  576.          if ( int( 1.01 * _sqrt( mqr ) ) > 0 ) then
  576.             $I_L576_22 = 0
  576. !dir$ ivdep
  576.             do
  577.                $mr_S7 = mqr / ( $t_S6 + -$I_L576_22 )
  579.                if ( mqr + -( $t_S6 * $mr_S7 ) + $mr_S7 * $I_L576_22 == 0 ) then
  576.                   $iq_S8 = $mq_S5 + -$I_L576_22
  576.                   goto 20
  576.                endif
  580.                $I_L576_22 = 1 + $I_L576_22
  580.                if ( $I_L576_22 >= $t_S6 ) exit
  580.             enddo
  580.             $iq_S8 = ( $mq_S5 + -$t_S6 )
  580.          endif
  580.    20    continue
  581.          mq = $iq_S8
  583.          mr = np / ( $ip_S3 * $iq_S8 )
  583.       else
  586.          $mp_S10 = int( 1.01 * _sqrt( np ) )
  587.          $t_S11 = int( 1.01 * _sqrt( np ) )
  587.          $ip_S13 = int( 1.01 * _sqrt( np ) )
  587.          if ( int( 1.01 * _sqrt( np ) ) > 0 ) then
  587.             $I_L587_18 = 0
  587. !dir$ ivdep
  587.             do
  588.                $mqr_S12 = np / ( $t_S11 + -$I_L587_18 )
  590.                if ( np + -( $t_S11 * $mqr_S12 ) + $mqr_S12 * $I_L587_18 == 0 ) then
  587.                   $ip_S13 = $mp_S10 + -$I_L587_18
  587.                   goto 30
  587.                endif
  591.                $I_L587_18 = 1 + $I_L587_18
  591.                if ( $I_L587_18 >= $t_S11 ) exit
  591.             enddo
  591.             $ip_S13 = ( $mp_S10 + -$t_S11 )
  591.          endif
  591.    30    continue
  592.          $mp_S14 = $ip_S13
  594.          mq = np / $ip_S13
  595.          mr = 1
  595.       endif
  572.       mp = $mp_S14
  599.       return
  599.       end
  599.       
  601.       
  601.       subroutine get_proc_ijk( ip, iq, ir, nid, mp, mq, mr, i0, ldim )
  611.       $ir_S0 = 1 + ( nid + -i0 ) / ( mp * mq )
  612.       ir = merge( $ir_S0, 1, ldim /= 2 )
  614.       $mod1_S1 = 0
  614.       if ( nid + -i0 /= -1 ) then
  614.          if ( mp * mq == 0 ) then
  614.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'WARNING:  Attempt to take MOD(I,0) in function mod1.', 0x800600000000L ) ) )
  614.          else
  614.             $mod1_S1 = 1 + mod( nid + -i0 + mp * mq, mp * mq )
  614.          endif
  614.       endif
  615.       iq = 1 + ( -1 + $mod1_S1 ) / mp
  616.       $mod1_S2 = 0
  616.       if ( nid + -i0 /= -1 ) then
  616.          if ( mp == 0 ) then
  616.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'WARNING:  Attempt to take MOD(I,0) in function mod1.', 0x800600000000L ) ) )
  616.          else
  616.             $mod1_S2 = 1 + mod( mp + nid + -i0, mp )
  616.          endif
  616.       endif
  616.       ip = $mod1_S2
  618.       if ( i0 == 0 ) then
  618.          ip = -1 + $mod1_S2
  619.          iq = -1 + iq
  620.          ir = -1 + merge( $ir_S0, 1, ldim /= 2 )
  620.       endif
  623.       return
  623.       end
  623.       
  625.       
  625.       subroutine mtag
  633.       if ( tflag(lev) == 0 ) then
  641.          $jstx_S1 = nx * ip / mp
  641.          $jedx_S0 = 1 + ( nx + nx * ip ) / mp
  641.          if ( mp + -ip == 1 ) then
  641.             $jedx_S0 = -1 + $jedx_S0
  641.          endif
  641.          jpx = -1
  641.          if ( $jedx_S0 + -$jstx_S1 > 1 ) then
  641.             if ( mp + -ip /= 1 ) then
  641.                if ( mp + -ip + -2 < 0 ) then
  641.                   goto 10
  641.                else if ( 0 < mp + -ip + -2 ) then
  641.                   $I_L641_57 = 0
  641. !dir$ ivdep
  641.                   do
  641.                      $I_L641_24 = $I_L641_57
  641.                      $jstx_S4 = ( nx + nx * ip + nx * $I_L641_57 ) / mp
  641.                      $jedx_S3 = 1 + ( nx * ip + 2 * nx + nx * $I_L641_57 ) / mp
  641.                      if ( $jedx_S3 + -$jstx_S4 > 1 ) then
  641.                         goto 20
  641.                      endif
  641.                      $I_L641_57 = 1 + $I_L641_57
  641.                      if ( $I_L641_57 >= mp + -ip + -2 ) exit
  641.                   enddo
  641.                   goto 30
  641.                else
  641.    30             continue
  641.                   $I_L641_24 = mp + -ip + -2
  641.                   $jstx_S4 = ( -nx + -( ip * nx ) + nx * ip + mp * nx ) / mp
  641.                   $jedx_S3 = 1 + ( -( ip * nx ) + nx * ip + mp * nx ) / mp
  641.                   $jedx_S3 = -1 + $jedx_S3
  641.                   if ( $jedx_S3 + -$jstx_S4 <= 1 ) then
  641.    10                continue
  641.                      jpx = -1
  641.                   else
  641.    20                continue
  641.                      jpx = ( ip + $I_L641_24 + 1 )
  641.                   endif
  641.                endif
  641.             endif
  641.          endif
  641.    40    continue
  642.          $gid_S5 = -1
  642.          if ( 0 <= jpx ) then
  642.             if ( jpx < mp ) then
  642.                if ( 0 <= iq ) then
  642.                   if ( iq < mq ) then
  642.                      if ( 0 <= ir ) then
  642.                         $gid_S5 = merge( -1, jpx + mp * iq + mp * mq * ir, ir >= mr )
  642.                      endif
  642.                   endif
  642.                endif
  642.             endif
  642.          endif
  643.          mtagrr = $gid_S5
  643.          mtagsr = merge( nid, -1, $gid_S5 >= 0 )
  644.          nidr = $gid_S5
  646.          $jstx_S8 = nx * ip / mp
  646.          $jedx_S7 = 1 + ( nx + nx * ip ) / mp
  646.          if ( mp + -ip == 1 ) then
  646.             $jedx_S7 = -1 + $jedx_S7
  646.          endif
  646.          jmx = -1
  646.          if ( $jedx_S7 + -$jstx_S8 > 1 ) then
  646.             if ( ip /= 0 ) then
  646.                if ( ip > 0 ) then
  646.                   $I_L646_26 = 0
  646.                   if ( ip + -mp <= 0 ) then
  646.                      goto 50
  646.                   else
  646.                      $I_L646_59 = 0
  646. !dir$ ivdep
  646.                      do
  646.                         $I_L646_26 = $I_L646_59
  646.                         $jstx_S11 = ( -nx + -( nx * $I_L646_59 ) + nx * ip ) / mp
  646.                         $jedx_S10 = 1 + ( -( nx * $I_L646_59 ) + nx * ip ) / mp
  646.                         if ( $jedx_S10 + -$jstx_S11 > 1 ) then
  646.                            goto 80
  646.                         endif
  646.                         $I_L646_59 = 1 + $I_L646_59
  646.                         if ( $I_L646_59 >= min( ip, ( ip + -mp ) ) ) exit
  646.                      enddo
  646.                      $I_L646_26 = min( ip, ( ip + -mp ) )
  646.                      if ( ( ip + -mp ) >= ip ) then
  646.                         goto 60
  646.                      else
  646.    50                   continue
  646.                         if ( ip + -mp + -$I_L646_26 == 0 ) then
  646.                            $jstx_S11 = ( -nx + -( nx * $I_L646_26 ) + nx * ip ) / mp
  646.                            $jedx_S10 = 1 + ( -( nx * $I_L646_26 ) + nx * ip ) / mp
  646.                            $jedx_S10 = -1 + $jedx_S10
  646.                            if ( $jedx_S10 + -$jstx_S11 <= 1 ) then
  646.                               $I_L646_26 = 1 + $I_L646_26
  646.                               if ( $I_L646_26 >= ip ) then
  646.                                  goto 60
  646.                               else
  646.                                  goto 70
  646.                               endif
  646.                            else
  646.                               goto 80
  646.                            endif
  646.                         else
  646.    70                      continue
  646.                            $Trips01_N55 = ip + -$I_L646_26
  646.                            $$I_L646_26_N56 = $I_L646_26
  646.                            $I_L646_73 = 0
  646. !dir$ ivdep
  646.                            do
  646.                               $I_L646_26 = $$I_L646_26_N56 + $I_L646_73
  646.                               $jstx_S11 = ( -nx + -( nx * $$I_L646_26_N56 ) + -( nx * $I_L646_73 ) + nx * ip ) / mp
  646.                               $jedx_S10 = 1 + ( -( nx * $$I_L646_26_N56 ) + -( nx * $I_L646_73 ) + nx * ip ) / mp
  646.                               if ( $jedx_S10 + -$jstx_S11 > 1 ) then
  646.    80                            continue
  646.                                  jmx = ip + -$I_L646_26 + -1
  646.                                  goto 90
  646.                               endif
  646.                               $I_L646_73 = 1 + $I_L646_73
  646.                               if ( $I_L646_73 >= $Trips01_N55 ) exit
  646.                            enddo
  646.                            goto 60
  646.                         endif
  646.                      endif
  646.                   endif
  646.                else
  646.    60             continue
  646.                   jmx = -1
  646.                endif
  646.             endif
  646.          endif
  646.    90    continue
  647.          $gid_S12 = -1
  647.          if ( 0 <= jmx ) then
  647.             if ( jmx < mp ) then
  647.                if ( 0 <= iq ) then
  647.                   if ( iq < mq ) then
  647.                      if ( 0 <= ir ) then
  647.                         $gid_S12 = merge( -1, jmx + mp * iq + mp * mq * ir, ir >= mr )
  647.                      endif
  647.                   endif
  647.                endif
  647.             endif
  647.          endif
  648.          mtagrl = $gid_S12
  648.          mtagsl = merge( nid, -1, $gid_S12 >= 0 )
  649.          nidl = $gid_S12
  651.          $jstx_S15 = iq * ny / mq
  651.          $jedx_S14 = 1 + ( ny + iq * ny ) / mq
  651.          if ( mq + -iq == 1 ) then
  651.             $jedx_S14 = -1 + $jedx_S14
  651.          endif
  651.          jpy = -1
  651.          if ( $jedx_S14 + -$jstx_S15 > 1 ) then
  651.             if ( mq + -iq /= 1 ) then
  651.                if ( mq + -iq + -2 < 0 ) then
  651.                   goto 100
  651.                else if ( 0 < mq + -iq + -2 ) then
  651.                   $I_L651_61 = 0
  651. !dir$ ivdep
  651.                   do
  651.                      $I_L651_28 = $I_L651_61
  651.                      $jstx_S18 = ( ny + iq * ny + ny * $I_L651_61 ) / mq
  651.                      $jedx_S17 = 1 + ( iq * ny + 2 * ny + ny * $I_L651_61 ) / mq
  651.                      if ( $jedx_S17 + -$jstx_S18 > 1 ) then
  651.                         goto 110
  651.                      endif
  651.                      $I_L651_61 = 1 + $I_L651_61
  651.                      if ( $I_L651_61 >= mq + -iq + -2 ) exit
  651.                   enddo
  651.                   goto 120
  651.                else
  651.   120             continue
  651.                   $I_L651_28 = mq + -iq + -2
  651.                   $jstx_S18 = ( -ny + -( iq * ny ) + iq * ny + mq * ny ) / mq
  651.                   $jedx_S17 = 1 + ( -( iq * ny ) + iq * ny + mq * ny ) / mq
  651.                   $jedx_S17 = -1 + $jedx_S17
  651.                   if ( $jedx_S17 + -$jstx_S18 <= 1 ) then
  651.   100                continue
  651.                      jpy = -1
  651.                   else
  651.   110                continue
  651.                      jpy = ( iq + $I_L651_28 + 1 )
  651.                   endif
  651.                endif
  651.             endif
  651.          endif
  651.   130    continue
  652.          $gid_S19 = -1
  652.          if ( 0 <= ip ) then
  652.             if ( ip < mp ) then
  652.                if ( 0 <= jpy ) then
  652.                   if ( jpy < mq ) then
  652.                      if ( 0 <= ir ) then
  652.                         $gid_S19 = merge( -1, ip + mp * jpy + mp * mq * ir, ir >= mr )
  652.                      endif
  652.                   endif
  652.                endif
  652.             endif
  652.          endif
  653.          mtagru = $gid_S19
  653.          mtagsu = merge( nid, -1, $gid_S19 >= 0 )
  654.          nidu = $gid_S19
  656.          $jstx_S22 = iq * ny / mq
  656.          $jedx_S21 = 1 + ( ny + iq * ny ) / mq
  656.          if ( mq + -iq == 1 ) then
  656.             $jedx_S21 = -1 + $jedx_S21
  656.          endif
  656.          jmy = -1
  656.          if ( $jedx_S21 + -$jstx_S22 > 1 ) then
  656.             if ( iq /= 0 ) then
  656.                if ( iq > 0 ) then
  656.                   $I_L656_30 = 0
  656.                   if ( iq + -mq <= 0 ) then
  656.                      goto 140
  656.                   else
  656.                      $I_L656_63 = 0
  656. !dir$ ivdep
  656.                      do
  656.                         $I_L656_30 = $I_L656_63
  656.                         $jstx_S25 = ( -ny + -( ny * $I_L656_63 ) + iq * ny ) / mq
  656.                         $jedx_S24 = 1 + ( -( ny * $I_L656_63 ) + iq * ny ) / mq
  656.                         if ( $jedx_S24 + -$jstx_S25 > 1 ) then
  656.                            goto 170
  656.                         endif
  656.                         $I_L656_63 = 1 + $I_L656_63
  656.                         if ( $I_L656_63 >= min( iq, ( iq + -mq ) ) ) exit
  656.                      enddo
  656.                      $I_L656_30 = min( iq, ( iq + -mq ) )
  656.                      if ( ( iq + -mq ) >= iq ) then
  656.                         goto 150
  656.                      else
  656.   140                   continue
  656.                         if ( iq + -mq + -$I_L656_30 == 0 ) then
  656.                            $jstx_S25 = ( -ny + -( ny * $I_L656_30 ) + iq * ny ) / mq
  656.                            $jedx_S24 = 1 + ( -( ny * $I_L656_30 ) + iq * ny ) / mq
  656.                            $jedx_S24 = -1 + $jedx_S24
  656.                            if ( $jedx_S24 + -$jstx_S25 <= 1 ) then
  656.                               $I_L656_30 = 1 + $I_L656_30
  656.                               if ( $I_L656_30 >= iq ) then
  656.                                  goto 150
  656.                               else
  656.                                  goto 160
  656.                               endif
  656.                            else
  656.                               goto 170
  656.                            endif
  656.                         else
  656.   160                      continue
  656.                            $Trips01_N52 = iq + -$I_L656_30
  656.                            $$I_L656_30_N53 = $I_L656_30
  656.                            $I_L656_71 = 0
  656. !dir$ ivdep
  656.                            do
  656.                               $I_L656_30 = $$I_L656_30_N53 + $I_L656_71
  656.                               $jstx_S25 = ( -ny + -( ny * $$I_L656_30_N53 ) + -( ny * $I_L656_71 ) + iq * ny ) / mq
  656.                               $jedx_S24 = 1 + ( -( ny * $$I_L656_30_N53 ) + -( ny * $I_L656_71 ) + iq * ny ) / mq
  656.                               if ( $jedx_S24 + -$jstx_S25 > 1 ) then
  656.   170                            continue
  656.                                  jmy = iq + -$I_L656_30 + -1
  656.                                  goto 180
  656.                               endif
  656.                               $I_L656_71 = 1 + $I_L656_71
  656.                               if ( $I_L656_71 >= $Trips01_N52 ) exit
  656.                            enddo
  656.                            goto 150
  656.                         endif
  656.                      endif
  656.                   endif
  656.                else
  656.   150             continue
  656.                   jmy = -1
  656.                endif
  656.             endif
  656.          endif
  656.   180    continue
  657.          $gid_S26 = -1
  657.          if ( 0 <= ip ) then
  657.             if ( ip < mp ) then
  657.                if ( 0 <= jmy ) then
  657.                   if ( jmy < mq ) then
  657.                      if ( 0 <= ir ) then
  657.                         $gid_S26 = merge( -1, ip + mp * jmy + mp * mq * ir, ir >= mr )
  657.                      endif
  657.                   endif
  657.                endif
  657.             endif
  657.          endif
  658.          mtagrd = $gid_S26
  658.          mtagsd = merge( nid, -1, $gid_S26 >= 0 )
  659.          nidd = $gid_S26
  661.          $jstx_S29 = ir * nz / mr
  661.          $jedx_S28 = 1 + ( nz + ir * nz ) / mr
  661.          if ( mr + -ir == 1 ) then
  661.             $jedx_S28 = -1 + $jedx_S28
  661.          endif
  661.          jpz = -1
  661.          if ( $jedx_S28 + -$jstx_S29 > 1 ) then
  661.             if ( mr + -ir /= 1 ) then
  661.                if ( mr + -ir + -2 < 0 ) then
  661.                   goto 190
  661.                else if ( 0 < mr + -ir + -2 ) then
  661.                   $I_L661_65 = 0
  661. !dir$ ivdep
  661.                   do
  661.                      $I_L661_32 = $I_L661_65
  661.                      $jstx_S32 = ( nz + ir * nz + nz * $I_L661_65 ) / mr
  661.                      $jedx_S31 = 1 + ( ir * nz + 2 * nz + nz * $I_L661_65 ) / mr
  661.                      if ( $jedx_S31 + -$jstx_S32 > 1 ) then
  661.                         goto 200
  661.                      endif
  661.                      $I_L661_65 = 1 + $I_L661_65
  661.                      if ( $I_L661_65 >= mr + -ir + -2 ) exit
  661.                   enddo
  661.                   goto 210
  661.                else
  661.   210             continue
  661.                   $I_L661_32 = mr + -ir + -2
  661.                   $jstx_S32 = ( -nz + -( ir * nz ) + ir * nz + mr * nz ) / mr
  661.                   $jedx_S31 = 1 + ( -( ir * nz ) + ir * nz + mr * nz ) / mr
  661.                   $jedx_S31 = -1 + $jedx_S31
  661.                   if ( $jedx_S31 + -$jstx_S32 <= 1 ) then
  661.   190                continue
  661.                      jpz = -1
  661.                   else
  661.   200                continue
  661.                      jpz = ( ir + $I_L661_32 + 1 )
  661.                   endif
  661.                endif
  661.             endif
  661.          endif
  661.   220    continue
  662.          $gid_S33 = -1
  662.          if ( 0 <= ip ) then
  662.             if ( ip < mp ) then
  662.                if ( 0 <= iq ) then
  662.                   if ( iq < mq ) then
  662.                      if ( 0 <= jpz ) then
  662.                         $gid_S33 = merge( -1, ip + mp * iq + mp * mq * jpz, jpz >= mr )
  662.                      endif
  662.                   endif
  662.                endif
  662.             endif
  662.          endif
  663.          mtagrf = $gid_S33
  663.          mtagsf = merge( nid, -1, $gid_S33 >= 0 )
  664.          nidf = $gid_S33
  666.          $jstx_S36 = ir * nz / mr
  666.          $jedx_S35 = 1 + ( nz + ir * nz ) / mr
  666.          if ( mr + -ir == 1 ) then
  666.             $jedx_S35 = -1 + $jedx_S35
  666.          endif
  666.          jmz = -1
  666.          if ( $jedx_S35 + -$jstx_S36 > 1 ) then
  666.             if ( ir /= 0 ) then
  666.                if ( ir > 0 ) then
  666.                   $I_L666_34 = 0
  666.                   if ( ir + -mr <= 0 ) then
  666.                      goto 230
  666.                   else
  666.                      $I_L666_67 = 0
  666. !dir$ ivdep
  666.                      do
  666.                         $I_L666_34 = $I_L666_67
  666.                         $jstx_S39 = ( -nz + -( nz * $I_L666_67 ) + ir * nz ) / mr
  666.                         $jedx_S38 = 1 + ( -( nz * $I_L666_67 ) + ir * nz ) / mr
  666.                         if ( $jedx_S38 + -$jstx_S39 > 1 ) then
  666.                            goto 260
  666.                         endif
  666.                         $I_L666_67 = 1 + $I_L666_67
  666.                         if ( $I_L666_67 >= min( ir, ( ir + -mr ) ) ) exit
  666.                      enddo
  666.                      $I_L666_34 = min( ir, ( ir + -mr ) )
  666.                      if ( ( ir + -mr ) >= ir ) then
  666.                         goto 240
  666.                      else
  666.   230                   continue
  666.                         if ( ir + -mr + -$I_L666_34 == 0 ) then
  666.                            $jstx_S39 = ( -nz + -( nz * $I_L666_34 ) + ir * nz ) / mr
  666.                            $jedx_S38 = 1 + ( -( nz * $I_L666_34 ) + ir * nz ) / mr
  666.                            $jedx_S38 = -1 + $jedx_S38
  666.                            if ( $jedx_S38 + -$jstx_S39 <= 1 ) then
  666.                               $I_L666_34 = 1 + $I_L666_34
  666.                               if ( $I_L666_34 >= ir ) then
  666.                                  goto 240
  666.                               else
  666.                                  goto 250
  666.                               endif
  666.                            else
  666.                               goto 260
  666.                            endif
  666.                         else
  666.   250                      continue
  666.                            $Trips01_N49 = ir + -$I_L666_34
  666.                            $$I_L666_34_N50 = $I_L666_34
  666.                            $I_L666_69 = 0
  666. !dir$ ivdep
  666.                            do
  666.                               $I_L666_34 = $$I_L666_34_N50 + $I_L666_69
  666.                               $jstx_S39 = ( -nz + -( nz * $$I_L666_34_N50 ) + -( nz * $I_L666_69 ) + ir * nz ) / mr
  666.                               $jedx_S38 = 1 + ( -( nz * $$I_L666_34_N50 ) + -( nz * $I_L666_69 ) + ir * nz ) / mr
  666.                               if ( $jedx_S38 + -$jstx_S39 > 1 ) then
  666.   260                            continue
  666.                                  jmz = ir + -$I_L666_34 + -1
  666.                                  goto 270
  666.                               endif
  666.                               $I_L666_69 = 1 + $I_L666_69
  666.                               if ( $I_L666_69 >= $Trips01_N49 ) exit
  666.                            enddo
  666.                            goto 240
  666.                         endif
  666.                      endif
  666.                   endif
  666.                else
  666.   240             continue
  666.                   jmz = -1
  666.                endif
  666.             endif
  666.          endif
  666.   270    continue
  667.          $gid_S40 = -1
  667.          if ( 0 <= ip ) then
  667.             if ( ip < mp ) then
  667.                if ( 0 <= iq ) then
  667.                   if ( iq < mq ) then
  667.                      if ( 0 <= jmz ) then
  667.                         $gid_S40 = merge( -1, ip + mp * iq + mp * mq * jmz, jmz >= mr )
  667.                      endif
  667.                   endif
  667.                endif
  667.             endif
  667.          endif
  668.          mtagrb = $gid_S40
  668.          mtagsb = merge( nid, -1, $gid_S40 >= 0 )
  669.          nidb = $gid_S40
  674.          nnid(1, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S5
  675.          nnid(2, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S12
  676.          nnid(3, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S19
  677.          nnid(4, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S26
  678.          nnid(5, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S33
  679.          nnid(6, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S40
  681.          ntags(1, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S5 >= 0 )
  682.          ntags(2, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S12 >= 0 )
  683.          ntags(3, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S19 >= 0 )
  684.          ntags(4, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S26 >= 0 )
  685.          ntags(5, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S33 >= 0 )
  686.          ntags(6, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = merge( nid, -1, $gid_S40 >= 0 )
  688.          ntagr(1, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S5
  689.          ntagr(2, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S12
  690.          ntagr(3, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S19
  691.          ntagr(4, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S26
  692.          ntagr(5, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S33
  693.          ntagr(6, merge( lev, nlev, and( lev /= 0, lev <= nlev ) )) = $gid_S40
  695.          tflag(lev) = 1
  695.       else
  699.          call reset_mtags( lev )
  699.       endif
  704.       return
  704.       end
  704.       
  706.       
  706.       subroutine reset_mtags( jlev )
  712.       nidr = nnid(1, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  713.       nidl = nnid(2, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  714.       nidu = nnid(3, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  715.       nidd = nnid(4, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  716.       nidf = nnid(5, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  717.       nidb = nnid(6, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  719.       mtagsr = ntags(1, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  720.       mtagsl = ntags(2, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  721.       mtagsu = ntags(3, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  722.       mtagsd = ntags(4, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  723.       mtagsf = ntags(5, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  724.       mtagsb = ntags(6, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  726.       mtagrr = ntagr(1, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  727.       mtagrl = ntagr(2, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  728.       mtagru = ntagr(3, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  729.       mtagrd = ntagr(4, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  730.       mtagrf = ntagr(5, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  731.       mtagrb = ntagr(6, merge( jlev, nlev, and( min( jlev, nlev ) /= 0, jlev <= nlev ) ))
  738.       return
  738.       end
  738.       
  740.       
  740.       subroutine find_neighb( jp, ip, mp, n, jdir )
  745.       $jstx_S1 = n * ip / mp
  745.       $jedx_S0 = 1 + ( n + n * ip ) / mp
  745.       if ( mp + -ip == 1 ) then
  745.          $jedx_S0 = -1 + $jedx_S0
  745.       endif
  747.       jp = -1
  748.       if ( $jedx_S0 + -$jstx_S1 > 1 ) then
  750.          if ( jdir > 0 ) then
  752.             if ( mp + -ip /= 1 ) then
  753.                if ( mp + -ip + -2 < 0 ) then
  752.                   goto 10
  752.                else if ( 0 < mp + -ip + -2 ) then
  753.                   $I_L753_21 = 0
  753. !dir$ ivdep
  753.                   do
  756.                      $I_L753_10 = $I_L753_21
  754.                      $jstx_S4 = ( n + n * ip + n * $I_L753_21 ) / mp
  754.                      $jedx_S3 = 1 + ( n * ip + 2 * n + n * $I_L753_21 ) / mp
  755.                      if ( $jedx_S3 + -$jstx_S4 > 1 ) then
  753.                         goto 20
  753.                      endif
  756.                      $I_L753_21 = 1 + $I_L753_21
  756.                      if ( $I_L753_21 >= mp + -ip + -2 ) exit
  756.                   enddo
  756.                   goto 30
  756.                else
  756.    30             continue
  756.                   $I_L753_10 = mp + -ip + -2
  754.                   $jstx_S4 = ( -n + -( ip * n ) + n * ip + mp * n ) / mp
  754.                   $jedx_S3 = 1 + ( -( ip * n ) + n * ip + mp * n ) / mp
  754.                   $jedx_S3 = -1 + $jedx_S3
  755.                   if ( $jedx_S3 + -$jstx_S4 <= 1 ) then
  755.    10                continue
  757.                      jp = -1
  757.                   else
  757.    20                continue
  753.                      jp = ( ip + $I_L753_10 + 1 )
  753.                   endif
  753.                endif
  753.             endif
  759.          else if ( ip /= 0 ) then
  762.             if ( ip > 0 ) then
  762.                $I_L762_8 = 0
  765.                if ( ip + -mp <= 0 ) then
  765.                   goto 40
  765.                else
  762.                   $I_L762_19 = 0
  762. !dir$ ivdep
  762.                   do
  765.                      $I_L762_8 = $I_L762_19
  763.                      $jstx_S7 = ( -n + -( n * $I_L762_19 ) + n * ip ) / mp
  763.                      $jedx_S6 = 1 + ( -( n * $I_L762_19 ) + n * ip ) / mp
  764.                      if ( $jedx_S6 + -$jstx_S7 > 1 ) then
  762.                         goto 70
  762.                      endif
  765.                      $I_L762_19 = 1 + $I_L762_19
  765.                      if ( $I_L762_19 >= min( ip, ( ip + -mp ) ) ) exit
  765.                   enddo
  765.                   $I_L762_8 = min( ip, ( ip + -mp ) )
  765.                   if ( ( ip + -mp ) >= ip ) then
  765.                      goto 50
  765.                   else
  765.    40                continue
  765.                      if ( ip + -mp + -$I_L762_8 == 0 ) then
  763.                         $jstx_S7 = ( -n + -( n * $I_L762_8 ) + n * ip ) / mp
  763.                         $jedx_S6 = 1 + ( -( n * $I_L762_8 ) + n * ip ) / mp
  763.                         $jedx_S6 = -1 + $jedx_S6
  764.                         if ( $jedx_S6 + -$jstx_S7 <= 1 ) then
  765.                            $I_L762_8 = 1 + $I_L762_8
  765.                            if ( $I_L762_8 >= ip ) then
  765.                               goto 50
  765.                            else
  765.                               goto 60
  765.                            endif
  765.                         else
  765.                            goto 70
  765.                         endif
  765.                      else
  765.    60                   continue
  762.                         $Trips01_N17 = ip + -$I_L762_8
  765.                         $$I_L762_8_N18 = $I_L762_8
  762.                         $I_L762_23 = 0
  762. !dir$ ivdep
  762.                         do
  765.                            $I_L762_8 = $$I_L762_8_N18 + $I_L762_23
  763.                            $jstx_S7 = ( -n + -( n * $$I_L762_8_N18 ) + -( n * $I_L762_23 ) + n * ip ) / mp
  763.                            $jedx_S6 = 1 + ( -( n * $$I_L762_8_N18 ) + -( n * $I_L762_23 ) + n * ip ) / mp
  764.                            if ( $jedx_S6 + -$jstx_S7 > 1 ) then
  762.    70                         continue
  762.                               jp = ip + -$I_L762_8 + -1
  762.                               goto 80
  762.                            endif
  765.                            $I_L762_23 = 1 + $I_L762_23
  765.                            if ( $I_L762_23 >= $Trips01_N17 ) exit
  765.                         enddo
  765.                         goto 50
  765.                      endif
  765.                   endif
  765.                endif
  765.             else
  765.    50          continue
  766.                jp = -1
  766.             endif
  766.          endif
  766.       endif
  766.    80 continue
  771.       return
  771.       end
  771.       
  773.       
  773.       subroutine get_mtag( mtags, mtagr, gid, nid )
  779.       mtagr = gid
  780.       mtags = merge( nid, -1, gid >= 0 )
  783.       return
  783.       end
  783.       
  785.       
  785.       subroutine get_gid( gid, ip, iq, ir, mp, mq, mr )
  791.       gid = -1
  792.       if ( 0 <= ip ) then
  792.          if ( ip < mp ) then
  792.             if ( 0 <= iq ) then
  792.                if ( iq < mq ) then
  792.                   if ( 0 <= ir ) then
  792.                      gid = merge( -1, ip + mp * iq + mp * mq * ir, ir >= mr )
  792.                   endif
  792.                endif
  792.             endif
  792.          endif
  792.       endif
  797.       return
  797.       end
  797.       
  799.       
  799.       subroutine dmesh( mm, n )
  818.       nx = n
  819.       ny = n
  820.       nz = n
  822.       if ( dmflag(lev) == 0 ) then
  824.          istx = n * ip / mp
  824.          iedx = 1 + ( n + n * ip ) / mp
  824.          if ( mp + -ip == 1 ) then
  824.             iedx = -1 + iedx
  824.          endif
  824.          mx = iedx + -istx
  825.          isty = n * iq / mq
  825.          iedy = 1 + ( n + n * iq ) / mq
  825.          if ( mq + -iq == 1 ) then
  825.             iedy = -1 + iedy
  825.          endif
  825.          my = iedy + -isty
  826.          istz = n * ir / mr
  826.          iedz = 1 + ( n + n * ir ) / mr
  826.          if ( mr + -ir == 1 ) then
  826.             iedz = -1 + iedz
  826.          endif
  826.          mz = iedz + -istz
  834.          mm = ( -( iedx * istz ) + ( -( istx * iedy * iedz ) + ( iedx + iedy + iedz + -istx + -isty + -istz + -( istx * iedy ) + -( iedx * isty ) ) + -( iedx * isty * iedz ) + -( iedx * iedy * istz ) + -( istx * isty * istz ) + -( isty * iedz ) + -( iedy * istz ) + -( istx * iedz ) ) + iedx * iedy + istx * isty + istx * iedy * istz + iedx * isty * istz + iedx * iedy * iedz + istx * isty * iedz ) + iedy * iedz + isty * istz + iedx * iedz + istx * istz + 1
  836.          dmflag(lev) = 1
  838.          lmx(1, lev) = iedx + -istx
  839.          lmx(2, lev) = istx
  840.          lmx(3, lev) = iedx
  841.          lmx(4, lev) = iedy + -isty
  842.          lmx(5, lev) = isty
  843.          lmx(6, lev) = iedy
  844.          lmx(7, lev) = iedz + -istz
  845.          lmx(8, lev) = istz
  846.          lmx(9, lev) = iedz
  847.          lmx(10, lev) = ( -( iedx * istz ) + ( -( istx * iedy * iedz ) + ( iedx + iedy + iedz + -istx + -isty + -istz + -( istx * iedy ) + -( iedx * isty ) ) + -( iedx * isty * iedz ) + -( iedx * iedy * istz ) + -( istx * isty * istz ) + -( isty * iedz ) + -( iedy * istz ) + -( istx * iedz ) ) + iedx * iedy + istx * isty + istx * iedy * istz + iedx * isty * istz + iedx * iedy * iedz + istx * isty * iedz ) + iedy * iedz + isty * istz + iedx * iedz + istx * istz + 1
  847.       else
  851.          mx = lmx(1, lev)
  852.          istx = lmx(2, lev)
  853.          iedx = lmx(3, lev)
  854.          my = lmx(4, lev)
  855.          isty = lmx(5, lev)
  856.          iedy = lmx(6, lev)
  857.          mz = lmx(7, lev)
  858.          istz = lmx(8, lev)
  859.          iedz = lmx(9, lev)
  860.          mm = lmx(10, lev)
  860.       endif
  865.       call mtag
  873.       call erase_3d_types
  877.       t$120 = 1 + mx
  877.       t$121 = 1 + my
  877.       t$122 = 1 + mz
  877.       call make_3d_types( t$120, t$121, t$122, mgreal, .false. )
  886.       return
  886.       end
  886.       
  888.       
  888.       subroutine get_mx( mx, istx, iedx, nx, ip, mp )
  891.       istx = nx * ip / mp
  892.       iedx = 1 + ( nx + nx * ip ) / mp
  894.       if ( mp + -ip == 1 ) then
  894.          iedx = -1 + iedx
  894.       endif
  896.       mx = iedx + -istx
  899.       return
  899.       end
  899.       
  901.       
  901.       subroutine initu( u, n, h, ndim )
  904.       if ( ndim == 2 ) then
  904.          call initu_2d( u(1), n, h )
  904.       endif
  905.       if ( ndim == 3 ) then
  905.          call initu_3d( u(1), n, h )
  905.       endif
  907.       ipa$1970 = 1
  907.       call xchange0( u(1), ipa$1970 )
  910.       return
  910.       end
  910.       
  912.       
  912.       subroutine initu_2d( u, n, h )
  912.       t$124 = mx
  912.       t$125 = my
  912.       t$126 = 1 + mx
  914.       t$127 = _zla( 0, 1 + mx )
  912.       t$128 = _zla( 0, 1 + mx )
  912.       t$129 = 1 + my
  914.       t$130 = _zla( 0, 1 + my )
  912.       t$131 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  920.       ipa$1986 = loc( u(0, 0) )
  920.       a = _copyin( u(0, 0) )
  920.       if ( my + mx * my + mx >= 0 ) then
  920.          $I_L920_18 = 0
  920. !dir$ ivdep
  920.          do
  920.             a(1 + $I_L920_18) = 0.0
  920.             $I_L920_18 = 1 + $I_L920_18
  920.             if ( $I_L920_18 >= mx + my + mx * my + 1 ) exit
  920.          enddo
  920.       endif
  920.       u(0, 0) = _copyout( a )
  930.       if ( -1 + my > 0 ) then
  931.          if ( -1 + mx > 0 ) then
  930.             $I_L930_22 = 0
  930.             do
  931.                $I_L931_20 = 0
  931. !dir$ ivdep
  931.                do
  934.                   u(1 + $I_L931_20, 1 + $I_L930_22) = sin( 3.1415926535897931 * ( ( istx + $I_L931_20 + 1 ) * h ) ) * sin( 3.1415926535897931 * ( ( isty + $I_L930_22 + 1 ) * h ) ) + sin( 15.707963267948966 * ( ( isty + $I_L930_22 + 1 ) * h ) ) * sin( 15.707963267948966 * ( ( istx + $I_L931_20 + 1 ) * h ) ) * 2.5e-1 + sin( 47.123889803846893 * ( ( isty + $I_L930_22 + 1 ) * h ) ) * sin( 47.123889803846893 * ( ( istx + $I_L931_20 + 1 ) * h ) ) * 1.4999999999999999e-1
  937.                   $I_L931_20 = 1 + $I_L931_20
  937.                   if ( $I_L931_20 >= -1 + mx ) exit
  937.                enddo
  938.                $I_L930_22 = 1 + $I_L930_22
  938.                if ( $I_L930_22 >= -1 + my ) exit
  938.             enddo
  938.          endif
  938.       endif
  941.       return
  941.       end
  941.       
  943.       
  943.       subroutine initu_3d( u, n, h )
  943.       t$139 = mx
  943.       t$140 = my
  943.       t$141 = mz
  943.       t$142 = 1 + mx
  945.       t$143 = _zla( 0, 1 + mx )
  943.       t$144 = _zla( 0, 1 + mx )
  943.       t$145 = 1 + my
  945.       t$146 = _zla( 0, 1 + my )
  943.       t$147 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  943.       t$148 = 1 + mz
  945.       t$149 = _zla( 0, 1 + mz )
  943.       t$150 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
  952.       ipa$1995 = loc( u(0, 0, 0) )
  952.       a = _copyin( u(0, 0, 0) )
  952.       if ( my * mz + mx * my * mz + mx * mz + mx * my + mz + my + mx >= 0 ) then
  952.          $I_L952_24 = 0
  952. !dir$ ivdep
  952.          do
  952.             a(1 + $I_L952_24) = 0.0
  952.             $I_L952_24 = 1 + $I_L952_24
  952.             if ( $I_L952_24 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
  952.          enddo
  952.       endif
  952.       u(0, 0, 0) = _copyout( a )
  959.       if ( -1 + mz > 0 ) then
  960.          if ( -1 + my > 0 ) then
  961.             if ( -1 + mx > 0 ) then
  959.                $I_L959_30 = 0
  959.                do
  960.                   $I_L960_28 = 0
  960.                   do
  961.                      $I_L961_26 = 0
  961. !dir$ ivdep
  961.                      do
  965.                         $u_WR0_R0 = sin( 3.1415926535897931 * ( ( istx + $I_L961_26 + 1 ) * h ) ) * sin( 3.1415926535897931 * ( ( isty + $I_L960_28 + 1 ) * h ) ) * sin( 3.1415926535897931 * ( ( istz + $I_L959_30 + 1 ) * h ) ) + sin( 15.707963267948966 * ( ( isty + $I_L960_28 + 1 ) * h ) ) * sin( 15.707963267948966 * ( ( istx + $I_L961_26 + 1 ) * h ) ) * 2.5e-1 + sin( 9.4247779607693793 * ( ( istz + $I_L959_30 + 1 ) * h ) ) * sin( 9.4247779607693793 * ( ( istx + $I_L961_26 + 1 ) * h ) ) * 1.4999999999999999e-1 + sin( 9.4247779607693793 * ( ( isty + $I_L960_28 + 1 ) * h ) ) * sin( 9.4247779607693793 * ( ( istz + $I_L959_30 + 1 ) * h ) ) * 1.4999999999999999e-1
  969.                         $u_WR0_R0 = $u_WR0_R0 + ( ( istx + $I_L961_26 + 1 ) * h ) + ( ( istx + $I_L961_26 + 1 ) * h ) * ( ( isty + $I_L960_28 + 1 ) * h ) + ( ( istx + $I_L961_26 + 1 ) * h ) * ( ( isty + $I_L960_28 + 1 ) * h ) * ( ( istz + $I_L959_30 + 1 ) * h )
  969.                         u(1 + $I_L961_26, 1 + $I_L960_28, 1 + $I_L959_30) = $u_WR0_R0
  972.                         $I_L961_26 = 1 + $I_L961_26
  972.                         if ( $I_L961_26 >= -1 + mx ) exit
  972.                      enddo
  973.                      $I_L960_28 = 1 + $I_L960_28
  973.                      if ( $I_L960_28 >= -1 + my ) exit
  973.                   enddo
  974.                   $I_L959_30 = 1 + $I_L959_30
  974.                   if ( $I_L959_30 >= -1 + mz ) exit
  974.                enddo
  974.             endif
  974.          endif
  974.       endif
  978.       return
  978.       end
  978.       
  980.       
  980.       subroutine compute_r( r, u, ro, mx, my, mz, h, ndim )
  983.       if ( ndim == 2 ) then
  983.          call compute_r2d( r, u, ro, mx, my, h )
  983.       endif
  984.       if ( ndim == 3 ) then
  984.          call compute_r3d( r, u, ro, mx, my, mz, h )
  984.       endif
  987.       return
  987.       end
  987.       
  989.       
  989.       subroutine compute_r2d( r, u, ro, mx, my, h )
  989.       t$160 = mx
  989.       t$161 = my
  989.       t$162 = 1 + mx
  991.       t$163 = _zla( 0, 1 + mx )
  989.       t$164 = _zla( 0, 1 + mx )
  989.       t$165 = 1 + my
  991.       t$166 = _zla( 0, 1 + my )
  989.       t$167 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
  993.       $h2_S2 = h * h
  994.       $h2i_S3 = 1.0/( h * h )
  996.       if ( -1 + my > 0 ) then
  997.          if ( -1 + mx > 0 ) then
  997.             $I_L997_21 = 0
  997.             do
  996.                $I_L996_19 = 0
  996.                if ( -3 + my >= 0 ) then
  996.                   $I_L996_23 = 0
  996. !dir$ blocking_size( 0, 0 )
  996.                   do
  997.                      $I_L997_16 = 0
  997. !dir$ ivdep
  997. !dir$ blocking_size( 1024, 1024 )
  997.                      do
  998.                         r($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + 2 * $I_L996_23) = $h2i_S3 * ( $h2_S2 * ro($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21, 1 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 1, 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 2, 1 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 1, 2 + 2 * $I_L996_23) + -4.0 * u($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + 2 * $I_L996_23) )
  998.                         r($I_L997_16 + 1024 * $I_L997_21 + 1, 2 + 2 * $I_L996_23) = $h2i_S3 * ( $h2_S2 * ro($I_L997_16 + 1024 * $I_L997_21 + 1, 2 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21, 2 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 2, 2 + 2 * $I_L996_23) + u($I_L997_16 + 1024 * $I_L997_21 + 1, 3 + 2 * $I_L996_23) + -4.0 * u($I_L997_16 + 1024 * $I_L997_21 + 1, 2 + 2 * $I_L996_23) )
  997.                         $I_L997_16 = 1 + $I_L997_16
 1000.                         if ( $I_L997_16 >= min( -1 + mx, 1024 + 1024 * $I_L997_21 ) + -1024 * $I_L997_21 ) exit
 1000.                      enddo
 1001.                      $I_L996_23 = 1 + $I_L996_23
 1001.                      if ( $I_L996_23 >= _rsh( -1 + my, 1 ) ) exit
 1001.                   enddo
 1001.                   $I_L996_19 = and( 0xfffffffffffffffeUL, -1 + my )
 1001.                endif
  996.                if ( $I_L996_19 < -1 + my ) then
  997.                   $I_L997_16 = 0
  997. !dir$ ivdep
  997. !dir$ blocking_size( 1024, 1024 )
  997.                   do
  998.                      r($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + $I_L996_19) = $h2i_S3 * ( $h2_S2 * ro($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + $I_L996_19) + u($I_L997_16 + 1024 * $I_L997_21, 1 + $I_L996_19) + u($I_L997_16 + 1024 * $I_L997_21 + 1, $I_L996_19) + u($I_L997_16 + 1024 * $I_L997_21 + 2, 1 + $I_L996_19) + u($I_L997_16 + 1024 * $I_L997_21 + 1, 2 + $I_L996_19) + -4.0 * u($I_L997_16 + 1024 * $I_L997_21 + 1, 1 + $I_L996_19) )
  997.                      $I_L997_16 = 1 + $I_L997_16
 1000.                      if ( $I_L997_16 >= min( -1 + mx, 1024 + 1024 * $I_L997_21 ) + -1024 * $I_L997_21 ) exit
 1000.                   enddo
 1000.                endif
  997.                $I_L997_21 = 1 + $I_L997_21
 1000.                if ( $I_L997_21 >= 1 + max( 0, -1 + _rsh( 1022 + mx, 10 ) ) ) exit
 1000.             enddo
 1000.          endif
 1000.       endif
 1004.       return
 1004.       end
 1004.       
 1006.       
 1006.       subroutine compute_r3d( r, u, ro, mx, my, mz, h )
 1006.       t$174 = mx
 1006.       t$175 = my
 1006.       t$176 = mz
 1006.       t$177 = 1 + mx
 1009.       t$178 = _zla( 0, 1 + mx )
 1006.       t$179 = _zla( 0, 1 + mx )
 1006.       t$180 = 1 + my
 1009.       t$181 = _zla( 0, 1 + my )
 1006.       t$182 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1006.       t$183 = 1 + mz
 1009.       t$184 = _zla( 0, 1 + mz )
 1006.       t$185 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1013.       $h2_S3 = h * h
 1014.       $h2i_S4 = 1.0/( h * h )
 1017.       if ( -1 + mz > 0 ) then
 1018.          if ( -1 + my > 0 ) then
 1019.             if ( -1 + mx > 0 ) then
 1017.                $SI_L1017_22_G1 = 0
 1017.                do
 1018.                   $SI_L1018_20_G4 = 0
 1018.                   do
 1019.                      $SI_L1019_18_G7 = 0
 1019.                      do
 1017.                         $I_L1017_30 = 0
 1017. !dir$ shortloop32
 1017. !dir$ blocking_size( 4, 4 )
 1017.                         do
 1018.                            $I_L1018_27 = 0
 1018. !dir$ shortloop32
 1018. !dir$ blocking_size( 4, 4 )
 1018.                            do
 1019.                               $I_L1019_24 = 0
 1019. !dir$ ivdep
 1019. !dir$ blocking_size( 256, 256 )
 1019.                               do
 1020.                                  r($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) = $h2i_S4 * ( $h2_S3 * ro($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + -6.0 * u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 2, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 2, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1) + u($I_L1019_24 + 256 * $SI_L1019_18_G7 + 1, $I_L1018_27 + 4 * $SI_L1018_20_G4 + 1, $I_L1017_30 + 4 * $SI_L1017_22_G1 + 2) )
 1019.                                  $I_L1019_24 = 1 + $I_L1019_24
 1024.                                  if ( $I_L1019_24 >= min( -1 + mx, 256 + 256 * $SI_L1019_18_G7 ) + -256 * $SI_L1019_18_G7 ) exit
 1024.                               enddo
 1018.                               $I_L1018_27 = 1 + $I_L1018_27
 1025.                               if ( $I_L1018_27 >= min( -1 + my, 4 + 4 * $SI_L1018_20_G4 ) + -4 * $SI_L1018_20_G4 ) exit
 1025.                            enddo
 1017.                            $I_L1017_30 = 1 + $I_L1017_30
 1026.                            if ( $I_L1017_30 >= min( -1 + mz, 4 + 4 * $SI_L1017_22_G1 ) + -4 * $SI_L1017_22_G1 ) exit
 1026.                         enddo
 1019.                         $SI_L1019_18_G7 = 1 + $SI_L1019_18_G7
 1024.                         if ( $SI_L1019_18_G7 >= _rsh( 254 + mx, 8 ) ) exit
 1024.                      enddo
 1018.                      $SI_L1018_20_G4 = 1 + $SI_L1018_20_G4
 1025.                      if ( $SI_L1018_20_G4 >= _rsh( 2 + my, 2 ) ) exit
 1025.                   enddo
 1017.                   $SI_L1017_22_G1 = 1 + $SI_L1017_22_G1
 1026.                   if ( $SI_L1017_22_G1 >= _rsh( 2 + mz, 2 ) ) exit
 1026.                enddo
 1026.             endif
 1026.          endif
 1026.       endif
 1027.       rrlops = rrlops + ( my * mz * -10 + mx * my * mz * 10 + mx * mz * -10 + mx * my * -10 + 10 * mz + 10 * my + 10 * mx + -10 )
 1030.       return
 1030.       end
 1030.       
 1032.       
 1032.       subroutine restrict_i( rc, rf, mif, mjf, mkf, ie, je, ke, ndim )
 1035.       if ( ndim == 2 ) then
 1035.          call restrict_2di( rc(1), rf(1), mif, mjf, ie, je )
 1035.       endif
 1036.       if ( ndim == 3 ) then
 1036.          call restrict_3di( rc(1), rf(1), mif, mjf, mkf, ie, je, ke )
 1036.       endif
 1039.       return
 1039.       end
 1039.       
 1041.       
 1041.       subroutine restrict_2di( rc, rf, mif, mjf, ievn, jevn )
 1041.       t$196 = mx
 1041.       t$198 = 1 + mx
 1043.       t$199 = _zla( 0, 1 + mx )
 1041.       t$200 = _zla( 0, 1 + mx )
 1041.       t$201 = 2 * _zla( 0, 1 + mx )
 1041.       t$197 = mif
 1041.       t$202 = 1 + mif
 1043.       t$203 = _zla( 0, 1 + mif )
 1041.       t$204 = _zla( 0, 1 + mif )
 1041.       t$205 = 2 * _zla( 0, 1 + mif )
 1047.       if ( -1 + my > 0 ) then
 1053.          if ( -1 + mx > 0 ) then
 1053.             $I_L1053_21 = 0
 1053.             do
 1047.                $I_L1047_19 = 0
 1047.                if ( -5 + my >= 0 ) then
 1047.                   $I_L1047_26 = 0
 1047. !dir$ blocking_size( 0, 0 )
 1047.                   do
 1053.                      $I_L1053_16 = 0
 1053. !dir$ ivdep
 1053. !dir$ blocking_size( 512, 512 )
 1053.                      do
 1058.                         rc($I_L1053_16 + 512 * $I_L1053_21 + 1, 1 + 4 * $I_L1047_26) = 2.5e-1 * rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26) + 1.25e-1 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 1) ) + 6.25e-2 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 1) )
 1058.                         rc($I_L1053_16 + 512 * $I_L1053_21 + 1, 2 + 4 * $I_L1047_26) = 2.5e-1 * rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 2) + 1.25e-1 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 2) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 2) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 3) ) + 6.25e-2 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 3) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 3) )
 1058.                         rc($I_L1053_16 + 512 * $I_L1053_21 + 1, 3 + 4 * $I_L1047_26) = 2.5e-1 * rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 4) + 1.25e-1 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 4) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 4) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 3) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 5) ) + 6.25e-2 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 3) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 3) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 5) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 5) )
 1058.                         rc($I_L1053_16 + 512 * $I_L1053_21 + 1, 4 + 4 * $I_L1047_26) = 2.5e-1 * rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 6) + 1.25e-1 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 6) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 6) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 5) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 8 * $I_L1047_26 + 7) ) + 6.25e-2 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 5) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 5) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 8 * $I_L1047_26 + 7) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 8 * $I_L1047_26 + 7) )
 1053.                         $I_L1053_16 = 1 + $I_L1053_16
 1063.                         if ( $I_L1053_16 >= min( -1 + mx, 512 + 512 * $I_L1053_21 ) + -512 * $I_L1053_21 ) exit
 1063.                      enddo
 1065.                      $I_L1047_26 = 1 + $I_L1047_26
 1065.                      if ( $I_L1047_26 >= _rsh( -1 + my, 2 ) ) exit
 1065.                   enddo
 1065.                   $I_L1047_19 = and( 0xfffffffffffffffcUL, -1 + my )
 1065.                endif
 1047.                if ( $I_L1047_19 < -1 + my ) then
 1047.                   $I_L1047_23 = 0
 1047. !dir$ blocking_size( 0, 0 )
 1047.                   do
 1053.                      $I_L1053_16 = 0
 1053. !dir$ ivdep
 1053. !dir$ blocking_size( 512, 512 )
 1053.                      do
 1058.                         rc($I_L1053_16 + 512 * $I_L1053_21 + 1, $I_L1047_19 + $I_L1047_23 + 1) = 2.5e-1 * rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23) + 1.25e-1 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + 1) ) + 6.25e-2 * ( rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + -1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + -1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + 1) + rf(ievn + 2 * $I_L1053_16 + 1024 * $I_L1053_21 + 1, jevn + 2 * $I_L1047_19 + 2 * $I_L1047_23 + 1) )
 1053.                         $I_L1053_16 = 1 + $I_L1053_16
 1063.                         if ( $I_L1053_16 >= min( -1 + mx, 512 + 512 * $I_L1053_21 ) + -512 * $I_L1053_21 ) exit
 1063.                      enddo
 1065.                      $I_L1047_23 = 1 + $I_L1047_23
 1065.                      if ( $I_L1047_23 >= my + -$I_L1047_19 + -1 ) exit
 1065.                   enddo
 1065.                endif
 1053.                $I_L1053_21 = 1 + $I_L1053_21
 1063.                if ( $I_L1053_21 >= 1 + max( 0, -1 + _rsh( 510 + mx, 9 ) ) ) exit
 1063.             enddo
 1063.          endif
 1063.       endif
 1067.       return
 1067.       end
 1067.       
 1069.       
 1069.       subroutine restrict_3di( rc, rf, mif, mjf, mkf, ievn, jevn, kevn )
 1069.       t$213 = mx
 1069.       t$214 = my
 1069.       t$217 = 1 + mx
 1071.       t$218 = _zla( 0, 1 + mx )
 1069.       t$219 = _zla( 0, 1 + mx )
 1069.       t$220 = 1 + my
 1071.       t$221 = _zla( 0, 1 + my )
 1069.       t$222 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1069.       t$223 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * 2
 1069.       t$215 = mif
 1069.       t$216 = mjf
 1069.       t$224 = 1 + mif
 1071.       t$225 = _zla( 0, 1 + mif )
 1069.       t$226 = _zla( 0, 1 + mif )
 1069.       t$227 = 1 + mjf
 1071.       t$228 = _zla( 0, 1 + mjf )
 1069.       t$229 = _zla( 0, 1 + mif ) * _zla( 0, 1 + mjf )
 1069.       t$230 = _zla( 0, 1 + mif ) * _zla( 0, 1 + mjf ) * 2
 1076.       if ( -1 + mz > 0 ) then
 1082.          if ( -1 + my > 0 ) then
 1088.             if ( -1 + mx > 0 ) then
 1076.                $SI_L1076_22_G1 = 0
 1076.                do
 1082.                   $SI_L1082_20_G4 = 0
 1082.                   do
 1088.                      $SI_L1088_18_G7 = 0
 1088.                      do
 1076.                         $I_L1076_30 = 0
 1076. !dir$ shortloop32
 1076. !dir$ blocking_size( 4, 4 )
 1076.                         do
 1082.                            $I_L1082_27 = 0
 1082. !dir$ shortloop32
 1082. !dir$ blocking_size( 4, 4 )
 1082.                            do
 1088.                               $I_L1088_24 = 0
 1088. !dir$ ivdep
 1088. !dir$ loop_info (automatic) cache_nt( rc )
 1088. !dir$ blocking_size( 256, 256 )
 1088.                               do
 1093.                                  rc($I_L1088_24 + 256 * $SI_L1088_18_G7 + 1, $I_L1082_27 + 4 * $SI_L1082_20_G4 + 1, $I_L1076_30 + 4 * $SI_L1076_22_G1 + 1) = 1.25e-1 * rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + 6.25e-2 * ( rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) ) + 3.125e-2 * ( rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1) ) + 1.5625e-2 * ( rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + -1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + -1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + -1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) + rf(ievn + 2 * $I_L1088_24 + 512 * $SI_L1088_18_G7 + 1, jevn + 2 * $I_L1082_27 + 8 * $SI_L1082_20_G4 + 1, kevn + 2 * $I_L1076_30 + 8 * $SI_L1076_22_G1 + 1) )
 1088.                                  $I_L1088_24 = 1 + $I_L1088_24
 1110.                                  if ( $I_L1088_24 >= min( -1 + mx, 256 + 256 * $SI_L1088_18_G7 ) + -256 * $SI_L1088_18_G7 ) exit
 1110.                               enddo
 1082.                               $I_L1082_27 = 1 + $I_L1082_27
 1112.                               if ( $I_L1082_27 >= min( -1 + my, 4 + 4 * $SI_L1082_20_G4 ) + -4 * $SI_L1082_20_G4 ) exit
 1112.                            enddo
 1076.                            $I_L1076_30 = 1 + $I_L1076_30
 1114.                            if ( $I_L1076_30 >= min( -1 + mz, 4 + 4 * $SI_L1076_22_G1 ) + -4 * $SI_L1076_22_G1 ) exit
 1114.                         enddo
 1088.                         $SI_L1088_18_G7 = 1 + $SI_L1088_18_G7
 1110.                         if ( $SI_L1088_18_G7 >= _rsh( 254 + mx, 8 ) ) exit
 1110.                      enddo
 1082.                      $SI_L1082_20_G4 = 1 + $SI_L1082_20_G4
 1112.                      if ( $SI_L1082_20_G4 >= _rsh( 2 + my, 2 ) ) exit
 1112.                   enddo
 1076.                   $SI_L1076_22_G1 = 1 + $SI_L1076_22_G1
 1114.                   if ( $SI_L1076_22_G1 >= _rsh( 2 + mz, 2 ) ) exit
 1114.                enddo
 1114.             endif
 1114.          endif
 1114.       endif
 1115.       rflops = rflops + ( my * mz * -20 + mx * my * mz * 20 + mx * mz * -20 + mx * my * -20 + 20 * mz + 20 * my + 20 * mx + -20 )
 1118.       return
 1118.       end
 1118.       
 1120.       
 1120.       subroutine prolong_a( uf, dmax, uc, mic, mjc, mkc, ievn, jevn, kevn, ndim )
 1126.       if ( ndim == 2 ) then
 1127.          call prolong_2da( uf, dmax, uc, mic, mjc, ievn, jevn )
 1127.       else
 1129.          call prolong_3da( uf, dmax, uc, mic, mjc, mkc, ievn, jevn, kevn )
 1129.       endif
 1133.       return
 1133.       end
 1133.       
 1135.       
 1135.       subroutine prolong_2da( uf, dmax, uc, mic, mjc, ievn, jevn )
 1135.       t$241 = mx
 1135.       t$243 = 1 + mx
 1137.       t$244 = _zla( 0, 1 + mx )
 1135.       t$245 = _zla( 0, 1 + mx )
 1135.       t$246 = 2 * _zla( 0, 1 + mx )
 1135.       t$242 = mic
 1135.       t$247 = 1 + mic
 1137.       t$248 = _zla( 0, 1 + mic )
 1135.       t$249 = _zla( 0, 1 + mic )
 1135.       t$250 = 2 * _zla( 0, 1 + mic )
 1139.       dmax = 0.0
 1145.       if ( my > 0 ) then
 1152.          if ( mx > 0 ) then
 1152.             $SI_L1152_14_G1 = 0
 1152.             do
 1145.                $I_L1145_16 = 0
 1145. !dir$ blocking_size( 0, 0 )
 1145.                do
 1152.                   $I_L1152_18 = 0
 1152. !dir$ ivdep
 1152. !dir$ blocking_size( 256, 256 )
 1152.                   do
 1154.                      dmax = max( dmax, abs( uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, 1 + $I_L1145_16) ) )
 1155.                      uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1, jevn + 2 * $I_L1145_16) = uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1, jevn + 2 * $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, 1 + $I_L1145_16)
 1156.                      uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1, jevn + 2 * $I_L1145_16 + -1) = uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1, jevn + 2 * $I_L1145_16 + -1) + 5.0e-1 * ( uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, 1 + $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, $I_L1145_16) )
 1157.                      uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1 + -1, jevn + 2 * $I_L1145_16) = uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1 + -1, jevn + 2 * $I_L1145_16) + 5.0e-1 * ( uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, 1 + $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1, 1 + $I_L1145_16) )
 1158.                      uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1 + -1, jevn + 2 * $I_L1145_16 + -1) = uf(ievn + 2 * $I_L1152_18 + 512 * $SI_L1152_14_G1 + -1, jevn + 2 * $I_L1145_16 + -1) + 2.5e-1 * ( uc($I_L1152_18 + 256 * $SI_L1152_14_G1, $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1, 1 + $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, $I_L1145_16) + uc($I_L1152_18 + 256 * $SI_L1152_14_G1 + 1, 1 + $I_L1145_16) )
 1152.                      $I_L1152_18 = 1 + $I_L1152_18
 1166.                      if ( $I_L1152_18 >= min( ( 1 + mx ) / 2, 256 + 256 * $SI_L1152_14_G1 ) + -256 * $SI_L1152_14_G1 ) exit
 1166.                   enddo
 1173.                   $I_L1145_16 = 1 + $I_L1145_16
 1173.                   if ( $I_L1145_16 >= ( 1 + my ) / 2 ) exit
 1173.                enddo
 1152.                $SI_L1152_14_G1 = 1 + $SI_L1152_14_G1
 1166.                if ( $SI_L1152_14_G1 >= _rsh( 255 + ( 1 + mx ) / 2, 8 ) ) exit
 1166.             enddo
 1166.          endif
 1166.       endif
 1176.       return
 1176.       end
 1176.       
 1178.       
 1178.       subroutine prolong_3da( uf, dmax, uc, mic, mjc, mkc, ievn, jevn, kevn )
 1178.       t$258 = mx
 1178.       t$259 = my
 1178.       t$262 = 1 + mx
 1180.       t$263 = _zla( 0, 1 + mx )
 1178.       t$264 = _zla( 0, 1 + mx )
 1178.       t$265 = 1 + my
 1180.       t$266 = _zla( 0, 1 + my )
 1178.       t$267 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1178.       t$268 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * 2
 1178.       t$260 = mic
 1178.       t$261 = mjc
 1178.       t$269 = 1 + mic
 1180.       t$270 = _zla( 0, 1 + mic )
 1178.       t$271 = _zla( 0, 1 + mic )
 1178.       t$272 = 1 + mjc
 1180.       t$273 = _zla( 0, 1 + mjc )
 1178.       t$274 = _zla( 0, 1 + mic ) * _zla( 0, 1 + mjc )
 1178.       t$275 = _zla( 0, 1 + mic ) * _zla( 0, 1 + mjc ) * 2
 1183.       dcrn_mx = 0.0
 1184.       $dctr_mx_S13 = 0.0
 1191.       if ( mz > 0 ) then
 1197.          if ( my > 0 ) then
 1203.             if ( mx > 0 ) then
 1197.                $SI_L1197_23_G1 = 0
 1197.                do
 1203.                   $SI_L1203_21_G4 = 0
 1203.                   do
 1191.                      $I_L1191_25 = 0
 1191. !dir$ blocking_size( 2, 2 )
 1191.                      do
 1197.                         $I_L1197_30 = 0
 1197. !dir$ shortloop32
 1197. !dir$ blocking_size( 2, 2 )
 1197.                         do
 1203.                            $I_L1203_27 = 0
 1203. !dir$ ivdep
 1203. !dir$ blocking_size( 256, 256 )
 1203.                            do
 1206.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25)
 1207.                               dcrn_mx = max( dcrn_mx, abs( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) ) )
 1210.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25) + 5.0e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) )
 1211.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25) + 5.0e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) )
 1212.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25 + -1) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25 + -1) + 5.0e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) )
 1215.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25 + -1) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25 + -1) + 2.5e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, $I_L1191_25) )
 1217.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25 + -1) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1, kevn + 2 * $I_L1191_25 + -1) + 2.5e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) )
 1219.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25) + 2.5e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) )
 1223.                               $dctr_S12 = 1.25e-1 * ( uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) + uc($I_L1203_27 + 256 * $SI_L1203_21_G4 + 1, $I_L1197_30 + 2 * $SI_L1197_23_G1 + 1, 1 + $I_L1191_25) )
 1228.                               uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25 + -1) = uf(ievn + 2 * $I_L1203_27 + 512 * $SI_L1203_21_G4 + -1, jevn + 2 * $I_L1197_30 + 4 * $SI_L1197_23_G1 + -1, kevn + 2 * $I_L1191_25 + -1) + $dctr_S12
 1230.                               $dctr_mx_S13 = max( $dctr_mx_S13, abs( $dctr_S12 ) )
 1203.                               $I_L1203_27 = 1 + $I_L1203_27
 1238.                               if ( $I_L1203_27 >= min( ( 1 + mx ) / 2, 256 + 256 * $SI_L1203_21_G4 ) + -256 * $SI_L1203_21_G4 ) exit
 1238.                            enddo
 1197.                            $I_L1197_30 = 1 + $I_L1197_30
 1243.                            if ( $I_L1197_30 >= min( ( 1 + my ) / 2, 2 + 2 * $SI_L1197_23_G1 ) + -2 * $SI_L1197_23_G1 ) exit
 1243.                         enddo
 1248.                         $I_L1191_25 = 1 + $I_L1191_25
 1248.                         if ( $I_L1191_25 >= ( 1 + mz ) / 2 ) exit
 1248.                      enddo
 1203.                      $SI_L1203_21_G4 = 1 + $SI_L1203_21_G4
 1238.                      if ( $SI_L1203_21_G4 >= _rsh( 255 + ( 1 + mx ) / 2, 8 ) ) exit
 1238.                   enddo
 1197.                   $SI_L1197_23_G1 = 1 + $SI_L1197_23_G1
 1243.                   if ( $SI_L1197_23_G1 >= _rsh( 1 + ( 1 + my ) / 2, 1 ) ) exit
 1243.                enddo
 1243.             endif
 1243.          endif
 1243.       endif
 1249.       dmax = max( dcrn_mx, $dctr_mx_S13 )
 1251.       pflops = pflops + mx * my * mz * 34 / 8
 1254.       return
 1254.       end
 1254.       
 1256.       
 1256.       subroutine smooth_m( u, r, mx, my, mz, h, sigma, m, uo, iz, igs, ndim )
 1259.       if ( ndim == 2 ) then
 1260.          if ( igs == 0 ) then
 1261.             call smooth_m_jac2d( u(1), r(1), mx, my, h, sigma, m, uo(1), iz )
 1262.          else if ( igs == 1 ) then
 1263.             call smooth_m_gs_2d( u(1), r(1), mx, my, h, sigma, m, iz )
 1263.          else
 1265.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'no smooth_m func ', 0x800600000000L ), _iotype( 'corresponding to igs = ', 0x800600000000L ), _iotype( igs, 0x2000200000000L ), _iotype( '!', 0x800600000000L ) ) )
 1267.             call exitt
 1267.          endif
 1269.       else if ( igs == 0 ) then
 1271.          call smooth_m_jac3d( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 1271.       else if ( igs == 1 ) then
 1273.          call smooth_m_gs_3d( u(1), r(1), mx, my, mz, h, sigma, m, iz )
 1273.       else if ( igs == 2 ) then
 1275.          call smooth_m_jac3alt( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 1275.       else if ( igs == 4 ) then
 1277.          call smooth_m_jac3cnd( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 1277.       else if ( igs == 3 ) then
 1279.          call smooth_m_jac3flg( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 1279.       else if ( igs == 5 ) then
 1281.          call smooth_m_jac3idx( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 1281.       else
 1285.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'no smooth_m func ', 0x800600000000L ), _iotype( 'corresponding to igs = ', 0x800600000000L ), _iotype( igs, 0x2000200000000L ), _iotype( '!', 0x800600000000L ) ) )
 1287.          call exitt
 1287.       endif
 1292.       return
 1292.       end
 1292.       
 1294.       
 1294.       subroutine smooth_m_jac2d( u, r, mx, my, h, sigma, m, o, izero )
 1294.       t$285 = mx
 1294.       t$286 = my
 1294.       t$287 = 1 + mx
 1297.       t$288 = _zla( 0, 1 + mx )
 1294.       t$289 = _zla( 0, 1 + mx )
 1294.       t$290 = 1 + my
 1297.       t$291 = _zla( 0, 1 + my )
 1294.       t$292 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1299.       $h2_S0 = h * h
 1300.       $sa_S1 = ( 2.5e-1 * sigma )
 1302.       if ( izero == 0 ) then
 1303.          if ( -1 + my > 0 ) then
 1304.             if ( -1 + mx > 0 ) then
 1303.                $I_L1303_120 = 0
 1303.                do
 1304.                   $I_L1304_102 = 0
 1304. !dir$ ivdep
 1304.                   do
 1305.                      u(1 + $I_L1304_102, 1 + $I_L1303_120) = $sa_S1 * $h2_S0 * r(1 + $I_L1304_102, 1 + $I_L1303_120)
 1306.                      $I_L1304_102 = 1 + $I_L1304_102
 1306.                      if ( $I_L1304_102 >= -1 + mx ) exit
 1306.                   enddo
 1307.                   $I_L1303_120 = 1 + $I_L1303_120
 1307.                   if ( $I_L1303_120 >= -1 + my ) exit
 1307.                enddo
 1307.             endif
 1307.          endif
 1307.       endif
 1311.       if ( izero + m + -2 >= 0 ) then
 1312.          if ( mx + my + mx * my >= 0 ) then
 1315.             if ( -1 + my <= 0 ) then
 1311.                $I_L1311_122 = 0
 1311.                do
 1312.                   ipa$2311 = loc( o(0, 0) )
 1312.                   a = _copyin( o(0, 0) )
 1312.                   ipa$2313 = loc( u(0, 0) )
 1312.                   b = _copyin( u(0, 0) )
 1312.                   $I_L1312_112 = 0
 1312. !dir$ ivdep
 1312.                   do
 1312.                      a(1 + $I_L1312_112) = b(1 + $I_L1312_112)
 1312.                      $I_L1312_112 = 1 + $I_L1312_112
 1312.                      if ( $I_L1312_112 >= mx + my + mx * my + 1 ) exit
 1312.                   enddo
 1312.                   u(0, 0) = _copyout( b )
 1312.                   o(0, 0) = _copyout( a )
 1313.                   ipa$2318 = 1
 1313.                   call xchange0( o(0, 0), ipa$2318 )
 1321.                   $I_L1311_122 = 1 + $I_L1311_122
 1321.                   if ( $I_L1311_122 >= izero + m + -1 ) exit
 1321.                enddo
 1321.             else if ( -1 + mx > 0 ) then
 1311.                $I_L1311_134 = 0
 1311.                do
 1312.                   ipa$2311 = loc( o(0, 0) )
 1312.                   a = _copyin( o(0, 0) )
 1312.                   ipa$2313 = loc( u(0, 0) )
 1312.                   b = _copyin( u(0, 0) )
 1312.                   $I_L1312_104 = 0
 1312. !dir$ ivdep
 1312.                   do
 1312.                      a(1 + $I_L1312_104) = b(1 + $I_L1312_104)
 1312.                      $I_L1312_104 = 1 + $I_L1312_104
 1312.                      if ( $I_L1312_104 >= mx + my + mx * my + 1 ) exit
 1312.                   enddo
 1312.                   u(0, 0) = _copyout( b )
 1312.                   o(0, 0) = _copyout( a )
 1313.                   ipa$2318 = 1
 1313.                   call xchange0( o(0, 0), ipa$2318 )
 1316.                   $I_L1316_130 = 0
 1316.                   do
 1315.                      $I_L1315_126 = 0
 1315.                      if ( -3 + my >= 0 ) then
 1315.                         $I_L1315_138 = 0
 1315. !dir$ blocking_size( 0, 0 )
 1315.                         do
 1316.                            $I_L1316_106 = 0
 1316. !dir$ ivdep
 1316. !dir$ blocking_size( 1024, 1024 )
 1316.                            do
 1317.                               u($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + 2 * $I_L1315_138) = o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + 2 * $I_L1315_138) + $sa_S1 * ( $h2_S0 * r($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130, 1 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 2, 1 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + 2 * $I_L1315_138) + -4.0 * o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + 2 * $I_L1315_138) )
 1317.                               u($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + 2 * $I_L1315_138) = o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + 2 * $I_L1315_138) + $sa_S1 * ( $h2_S0 * r($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130, 2 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 2, 2 + 2 * $I_L1315_138) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 3 + 2 * $I_L1315_138) + -4.0 * o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + 2 * $I_L1315_138) )
 1316.                               $I_L1316_106 = 1 + $I_L1316_106
 1319.                               if ( $I_L1316_106 >= min( -1 + mx, 1024 + 1024 * $I_L1316_130 ) + -1024 * $I_L1316_130 ) exit
 1319.                            enddo
 1320.                            $I_L1315_138 = 1 + $I_L1315_138
 1320.                            if ( $I_L1315_138 >= _rsh( -1 + my, 1 ) ) exit
 1320.                         enddo
 1320.                         $I_L1315_126 = and( 0xfffffffffffffffeUL, -1 + my )
 1320.                      endif
 1315.                      if ( $I_L1315_126 < -1 + my ) then
 1316.                         $I_L1316_106 = 0
 1316. !dir$ ivdep
 1316. !dir$ blocking_size( 1024, 1024 )
 1316.                         do
 1317.                            u($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + $I_L1315_126) = o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + $I_L1315_126) + $sa_S1 * ( $h2_S0 * r($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + $I_L1315_126) + o($I_L1316_106 + 1024 * $I_L1316_130, 1 + $I_L1315_126) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, $I_L1315_126) + o($I_L1316_106 + 1024 * $I_L1316_130 + 2, 1 + $I_L1315_126) + o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 2 + $I_L1315_126) + -4.0 * o($I_L1316_106 + 1024 * $I_L1316_130 + 1, 1 + $I_L1315_126) )
 1316.                            $I_L1316_106 = 1 + $I_L1316_106
 1319.                            if ( $I_L1316_106 >= min( -1 + mx, 1024 + 1024 * $I_L1316_130 ) + -1024 * $I_L1316_130 ) exit
 1319.                         enddo
 1319.                      endif
 1316.                      $I_L1316_130 = 1 + $I_L1316_130
 1319.                      if ( $I_L1316_130 >= 1 + max( 0, -1 + _rsh( 1022 + mx, 10 ) ) ) exit
 1319.                   enddo
 1321.                   $I_L1311_134 = 1 + $I_L1311_134
 1321.                   if ( $I_L1311_134 >= izero + m + -1 ) exit
 1321.                enddo
 1321.             else
 1311.                $I_L1311_124 = 0
 1311.                do
 1312.                   ipa$2311 = loc( o(0, 0) )
 1312.                   a = _copyin( o(0, 0) )
 1312.                   ipa$2313 = loc( u(0, 0) )
 1312.                   b = _copyin( u(0, 0) )
 1312.                   $I_L1312_116 = 0
 1312. !dir$ ivdep
 1312.                   do
 1312.                      a(1 + $I_L1312_116) = b(1 + $I_L1312_116)
 1312.                      $I_L1312_116 = 1 + $I_L1312_116
 1312.                      if ( $I_L1312_116 >= mx + my + mx * my + 1 ) exit
 1312.                   enddo
 1312.                   u(0, 0) = _copyout( b )
 1312.                   o(0, 0) = _copyout( a )
 1313.                   ipa$2318 = 1
 1313.                   call xchange0( o(0, 0), ipa$2318 )
 1321.                   $I_L1311_124 = 1 + $I_L1311_124
 1321.                   if ( $I_L1311_124 >= izero + m + -1 ) exit
 1321.                enddo
 1321.             endif
 1321.          else if ( -1 + my <= 0 ) then
 1311.             $I_L1311_114 = 0
 1311.             do
 1312.                ipa$2311 = loc( o(0, 0) )
 1312.                a = _copyin( o(0, 0) )
 1312.                ipa$2313 = loc( u(0, 0) )
 1312.                b = _copyin( u(0, 0) )
 1312.                u(0, 0) = _copyout( b )
 1312.                o(0, 0) = _copyout( a )
 1313.                ipa$2318 = 1
 1313.                call xchange0( o(0, 0), ipa$2318 )
 1321.                $I_L1311_114 = 1 + $I_L1311_114
 1321.                if ( $I_L1311_114 >= izero + m + -1 ) exit
 1321.             enddo
 1321.          else if ( -1 + mx > 0 ) then
 1311.             $I_L1311_136 = 0
 1311.             do
 1312.                ipa$2311 = loc( o(0, 0) )
 1312.                a = _copyin( o(0, 0) )
 1312.                ipa$2313 = loc( u(0, 0) )
 1312.                b = _copyin( u(0, 0) )
 1312.                u(0, 0) = _copyout( b )
 1312.                o(0, 0) = _copyout( a )
 1313.                ipa$2318 = 1
 1313.                call xchange0( o(0, 0), ipa$2318 )
 1316.                $I_L1316_132 = 0
 1316.                do
 1315.                   $I_L1315_128 = 0
 1315.                   if ( -3 + my >= 0 ) then
 1315.                      $I_L1315_140 = 0
 1315. !dir$ blocking_size( 0, 0 )
 1315.                      do
 1316.                         $I_L1316_109 = 0
 1316. !dir$ ivdep
 1316. !dir$ blocking_size( 1024, 1024 )
 1316.                         do
 1317.                            u($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + 2 * $I_L1315_140) = o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + 2 * $I_L1315_140) + $sa_S1 * ( $h2_S0 * r($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132, 1 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 2, 1 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + 2 * $I_L1315_140) + -4.0 * o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + 2 * $I_L1315_140) )
 1317.                            u($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + 2 * $I_L1315_140) = o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + 2 * $I_L1315_140) + $sa_S1 * ( $h2_S0 * r($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132, 2 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 2, 2 + 2 * $I_L1315_140) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 3 + 2 * $I_L1315_140) + -4.0 * o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + 2 * $I_L1315_140) )
 1316.                            $I_L1316_109 = 1 + $I_L1316_109
 1319.                            if ( $I_L1316_109 >= min( -1 + mx, 1024 + 1024 * $I_L1316_132 ) + -1024 * $I_L1316_132 ) exit
 1319.                         enddo
 1320.                         $I_L1315_140 = 1 + $I_L1315_140
 1320.                         if ( $I_L1315_140 >= _rsh( -1 + my, 1 ) ) exit
 1320.                      enddo
 1320.                      $I_L1315_128 = and( 0xfffffffffffffffeUL, -1 + my )
 1320.                   endif
 1315.                   if ( $I_L1315_128 < -1 + my ) then
 1316.                      $I_L1316_109 = 0
 1316. !dir$ ivdep
 1316. !dir$ blocking_size( 1024, 1024 )
 1316.                      do
 1317.                         u($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + $I_L1315_128) = o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + $I_L1315_128) + $sa_S1 * ( $h2_S0 * r($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + $I_L1315_128) + o($I_L1316_109 + 1024 * $I_L1316_132, 1 + $I_L1315_128) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, $I_L1315_128) + o($I_L1316_109 + 1024 * $I_L1316_132 + 2, 1 + $I_L1315_128) + o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 2 + $I_L1315_128) + -4.0 * o($I_L1316_109 + 1024 * $I_L1316_132 + 1, 1 + $I_L1315_128) )
 1316.                         $I_L1316_109 = 1 + $I_L1316_109
 1319.                         if ( $I_L1316_109 >= min( -1 + mx, 1024 + 1024 * $I_L1316_132 ) + -1024 * $I_L1316_132 ) exit
 1319.                      enddo
 1319.                   endif
 1316.                   $I_L1316_132 = 1 + $I_L1316_132
 1319.                   if ( $I_L1316_132 >= 1 + max( 0, -1 + _rsh( 1022 + mx, 10 ) ) ) exit
 1319.                enddo
 1321.                $I_L1311_136 = 1 + $I_L1311_136
 1321.                if ( $I_L1311_136 >= izero + m + -1 ) exit
 1321.             enddo
 1321.          else
 1311.             $I_L1311_118 = 0
 1311.             do
 1312.                ipa$2311 = loc( o(0, 0) )
 1312.                a = _copyin( o(0, 0) )
 1312.                ipa$2313 = loc( u(0, 0) )
 1312.                b = _copyin( u(0, 0) )
 1312.                u(0, 0) = _copyout( b )
 1312.                o(0, 0) = _copyout( a )
 1313.                ipa$2318 = 1
 1313.                call xchange0( o(0, 0), ipa$2318 )
 1321.                $I_L1311_118 = 1 + $I_L1311_118
 1321.                if ( $I_L1311_118 >= izero + m + -1 ) exit
 1321.             enddo
 1321.          endif
 1321.       endif
 1324.       return
 1324.       end
 1324.       
 1327.       
 1327.       subroutine jac3d_helper( ix, iy, iz, u, o, r, h2, sa, jgx )
 1327.       t$308 = ix
 1327.       t$309 = iy
 1327.       t$310 = iz
 1327.       t$311 = 1 + ix
 1329.       t$312 = _zla( 0, 1 + ix )
 1327.       t$313 = _zla( 0, 1 + ix )
 1327.       t$314 = 1 + iy
 1329.       t$315 = _zla( 0, 1 + iy )
 1327.       t$316 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1327.       t$317 = 1 + iz
 1329.       t$318 = _zla( 0, 1 + iz )
 1327.       t$319 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1331.       call xchange0( o(0, 0, 0), jgx )
 1333.       if ( -1 + iz > 0 ) then
 1334.          if ( -1 + iy > 0 ) then
 1335.             if ( -1 + ix > 0 ) then
 1333.                $SI_L1333_22_G1 = 0
 1333.                do
 1334.                   $SI_L1334_20_G4 = 0
 1334.                   do
 1335.                      $SI_L1335_18_G7 = 0
 1335.                      do
 1333.                         $I_L1333_30 = 0
 1333. !dir$ shortloop32
 1333. !dir$ blocking_size( 4, 4 )
 1333.                         do
 1334.                            $I_L1334_27 = 0
 1334. !dir$ shortloop32
 1334. !dir$ blocking_size( 4, 4 )
 1334.                            do
 1335.                               $I_L1335_24 = 0
 1335. !dir$ ivdep
 1335. !dir$ blocking_size( 256, 256 )
 1335.                               do
 1336.                                  u($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) = o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + sa * ( h2 * r($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + -6.0 * o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 2, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 2, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1) + o($I_L1335_24 + 256 * $SI_L1335_18_G7 + 1, $I_L1334_27 + 4 * $SI_L1334_20_G4 + 1, $I_L1333_30 + 4 * $SI_L1333_22_G1 + 2) )
 1335.                                  $I_L1335_24 = 1 + $I_L1335_24
 1340.                                  if ( $I_L1335_24 >= min( -1 + ix, 256 + 256 * $SI_L1335_18_G7 ) + -256 * $SI_L1335_18_G7 ) exit
 1340.                               enddo
 1334.                               $I_L1334_27 = 1 + $I_L1334_27
 1341.                               if ( $I_L1334_27 >= min( -1 + iy, 4 + 4 * $SI_L1334_20_G4 ) + -4 * $SI_L1334_20_G4 ) exit
 1341.                            enddo
 1333.                            $I_L1333_30 = 1 + $I_L1333_30
 1342.                            if ( $I_L1333_30 >= min( -1 + iz, 4 + 4 * $SI_L1333_22_G1 ) + -4 * $SI_L1333_22_G1 ) exit
 1342.                         enddo
 1335.                         $SI_L1335_18_G7 = 1 + $SI_L1335_18_G7
 1340.                         if ( $SI_L1335_18_G7 >= _rsh( 254 + ix, 8 ) ) exit
 1340.                      enddo
 1334.                      $SI_L1334_20_G4 = 1 + $SI_L1334_20_G4
 1341.                      if ( $SI_L1334_20_G4 >= _rsh( 2 + iy, 2 ) ) exit
 1341.                   enddo
 1333.                   $SI_L1333_22_G1 = 1 + $SI_L1333_22_G1
 1342.                   if ( $SI_L1333_22_G1 >= _rsh( 2 + iz, 2 ) ) exit
 1342.                enddo
 1342.             endif
 1342.          endif
 1342.       endif
 1345.       return
 1345.       end
 1345.       
 1348.       
 1348.       subroutine smooth_m_jac3d( u, r, ix, iy, iz, h, sigma, m, o, izero )
 1348.       t$329 = ix
 1348.       t$330 = iy
 1348.       t$331 = iz
 1348.       t$332 = 1 + ix
 1353.       t$333 = _zla( 0, 1 + ix )
 1348.       t$334 = _zla( 0, 1 + ix )
 1348.       t$335 = 1 + iy
 1353.       t$336 = _zla( 0, 1 + iy )
 1348.       t$337 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1348.       t$338 = 1 + iz
 1353.       t$339 = _zla( 0, 1 + iz )
 1348.       t$340 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1357.       h2 = h * h
 1358.       sa = ( 1.6666666666666666e-1 * sigma )
 1360.       if ( izero == 0 ) then
 1361.          if ( -1 + iz > 0 ) then
 1362.             if ( -1 + iy > 0 ) then
 1363.                if ( -1 + ix > 0 ) then
 1361.                   $I_L1361_44 = 0
 1361.                   do
 1362.                      $I_L1362_40 = 0
 1362.                      do
 1363.                         $I_L1363_34 = 0
 1363. !dir$ ivdep
 1363.                         do
 1364.                            u(1 + $I_L1363_34, 1 + $I_L1362_40, 1 + $I_L1361_44) = sa * h2 * r(1 + $I_L1363_34, 1 + $I_L1362_40, 1 + $I_L1361_44)
 1365.                            $I_L1363_34 = 1 + $I_L1363_34
 1365.                            if ( $I_L1363_34 >= -1 + ix ) exit
 1365.                         enddo
 1366.                         $I_L1362_40 = 1 + $I_L1362_40
 1366.                         if ( $I_L1362_40 >= -1 + iy ) exit
 1366.                      enddo
 1367.                      $I_L1361_44 = 1 + $I_L1361_44
 1367.                      if ( $I_L1361_44 >= -1 + iz ) exit
 1367.                   enddo
 1367.                endif
 1367.             endif
 1367.          endif
 1368.          cflops = cflops + ( 2 * ix + 2 * iy + ix * iy * -2 + 2 * iz + ix * iz * -2 + iy * iz * -2 + ix * iy * iz * 2 + -2 )
 1368.       endif
 1374.       $mm1_S3 = ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz + 1
 1375.       if ( izero + m + -2 >= 0 ) then
 1376.          if ( ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz >= 0 ) then
 1375.             $I_L1375_42 = 0
 1375.             do
 1376.                ipa$2363 = loc( o(0, 0, 0) )
 1376.                a = _copyin( o(0, 0, 0) )
 1376.                ipa$2365 = loc( u(0, 0, 0) )
 1376.                b = _copyin( u(0, 0, 0) )
 1376.                $I_L1376_36 = 0
 1376. !dir$ ivdep
 1376.                do
 1376.                   a(1 + $I_L1376_36) = b(1 + $I_L1376_36)
 1376.                   $I_L1376_36 = 1 + $I_L1376_36
 1376.                   if ( $I_L1376_36 >= $mm1_S3 ) exit
 1376.                enddo
 1376.                u(0, 0, 0) = _copyout( b )
 1376.                o(0, 0, 0) = _copyout( a )
 1385.                ipa$2377 = 0
 1385.                call jac3d_helper( ix, iy, iz, u(0, 0, 0), o(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2377 )
 1395.                $I_L1375_42 = 1 + $I_L1375_42
 1395.                if ( $I_L1375_42 >= izero + m + -1 ) exit
 1395.             enddo
 1395.          else
 1375.             $I_L1375_38 = 0
 1375.             do
 1376.                ipa$2363 = loc( o(0, 0, 0) )
 1376.                a = _copyin( o(0, 0, 0) )
 1376.                ipa$2365 = loc( u(0, 0, 0) )
 1376.                b = _copyin( u(0, 0, 0) )
 1376.                u(0, 0, 0) = _copyout( b )
 1376.                o(0, 0, 0) = _copyout( a )
 1385.                ipa$2377 = 0
 1385.                call jac3d_helper( ix, iy, iz, u(0, 0, 0), o(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2377 )
 1395.                $I_L1375_38 = 1 + $I_L1375_38
 1395.                if ( $I_L1375_38 >= izero + m + -1 ) exit
 1395.             enddo
 1395.          endif
 1395.       endif
 1396.       cflops = cflops + ( -11 * ix + -11 * iy + ix * iy * 11 + -11 * iz + ix * iz * 11 + iy * iz * 11 + ix * iy * iz * -11 + -11 * izero + ix * izero * 11 + iy * izero * 11 + ix * iy * izero * -11 + iz * izero * 11 + ix * iz * izero * -11 + iy * iz * izero * -11 + ix * iy * iz * izero * 11 + -11 * m + ix * m * 11 + iy * m * 11 + ix * iy * m * -11 + iz * m * 11 + ix * iz * m * -11 + iy * iz * m * -11 + ix * iy * iz * m * 11 + 11 )
 1401.       return
 1401.       end
 1401.       
 1403.       
 1403.       subroutine smooth_m_jac3alt( u, r, ix, iy, iz, h, sigma, m, o, izero )
 1403.       t$353 = ix
 1403.       t$354 = iy
 1403.       t$355 = iz
 1403.       t$356 = 1 + ix
 1404.       t$357 = _zla( 0, 1 + ix )
 1403.       t$358 = _zla( 0, 1 + ix )
 1403.       t$359 = 1 + iy
 1404.       t$360 = _zla( 0, 1 + iy )
 1403.       t$361 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1403.       t$362 = 1 + iz
 1404.       t$363 = _zla( 0, 1 + iz )
 1403.       t$364 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1408.       h2 = h * h
 1409.       sa = ( 1.6666666666666666e-1 * sigma )
 1411.       if ( izero == 0 ) then
 1412.          if ( -1 + iz > 0 ) then
 1413.             if ( -1 + iy > 0 ) then
 1414.                if ( -1 + ix > 0 ) then
 1412.                   $I_L1412_38 = 0
 1412.                   do
 1413.                      $I_L1413_36 = 0
 1413.                      do
 1414.                         $I_L1414_30 = 0
 1414. !dir$ ivdep
 1414.                         do
 1415.                            u(1 + $I_L1414_30, 1 + $I_L1413_36, 1 + $I_L1412_38) = sa * h2 * r(1 + $I_L1414_30, 1 + $I_L1413_36, 1 + $I_L1412_38)
 1416.                            $I_L1414_30 = 1 + $I_L1414_30
 1416.                            if ( $I_L1414_30 >= -1 + ix ) exit
 1416.                         enddo
 1417.                         $I_L1413_36 = 1 + $I_L1413_36
 1417.                         if ( $I_L1413_36 >= -1 + iy ) exit
 1417.                      enddo
 1418.                      $I_L1412_38 = 1 + $I_L1412_38
 1418.                      if ( $I_L1412_38 >= -1 + iz ) exit
 1418.                   enddo
 1418.                endif
 1418.             endif
 1418.          endif
 1419.          cflops = cflops + ( 2 * ix + 2 * iy + ix * iy * -2 + 2 * iz + ix * iz * -2 + iy * iz * -2 + ix * iy * iz * 2 + -2 )
 1419.       endif
 1424.       if ( izero + m + -3 >= 0 ) then
 1424.          $I_L1424_32 = 0
 1424.          do
 1425.             ipa$2409 = 1
 1425.             call jac3d_helper( ix, iy, iz, o(0, 0, 0), u(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2409 )
 1426.             ipa$2441 = 1
 1426.             call jac3d_helper( ix, iy, iz, u(0, 0, 0), o(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2441 )
 1428.             $I_L1424_32 = 1 + $I_L1424_32
 1428.             if ( $I_L1424_32 >= ( izero + m + -1 ) / 2 ) exit
 1428.          enddo
 1428.       endif
 1430.       if ( mod( izero + m + -1, 2 ) /= 0 ) then
 1431.          ipa$2473 = 1
 1431.          call jac3d_helper( ix, iy, iz, o(0, 0, 0), u(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2473 )
 1433.          ipa$2508 = loc( u(0, 0, 0) )
 1433.          a = _copyin( u(0, 0, 0) )
 1433.          ipa$2510 = loc( o(0, 0, 0) )
 1433.          b = _copyin( o(0, 0, 0) )
 1433.          if ( ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz >= 0 ) then
 1433.             $I_L1433_34 = 0
 1433. !dir$ ivdep
 1433.             do
 1433.                a(1 + $I_L1433_34) = b(1 + $I_L1433_34)
 1433.                $I_L1433_34 = 1 + $I_L1433_34
 1433.                if ( $I_L1433_34 >= ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz + 1 ) exit
 1433.             enddo
 1433.          endif
 1433.          o(0, 0, 0) = _copyout( b )
 1433.          u(0, 0, 0) = _copyout( a )
 1433.       endif
 1437.       cflops = cflops + ( -11 * ix + -11 * iy + ix * iy * 11 + -11 * iz + ix * iz * 11 + iy * iz * 11 + ix * iy * iz * -11 + -11 * izero + ix * izero * 11 + iy * izero * 11 + ix * iy * izero * -11 + iz * izero * 11 + ix * iz * izero * -11 + iy * iz * izero * -11 + ix * iy * iz * izero * 11 + -11 * m + ix * m * 11 + iy * m * 11 + ix * iy * m * -11 + iz * m * 11 + ix * iz * m * -11 + iy * iz * m * -11 + ix * iy * iz * m * 11 + 11 )
 1442.       return
 1442.       end
 1442.       
 1444.       
 1444.       subroutine smooth_m_jac3flg( u, r, ix, iy, iz, h, sigma, m, o, izero )
 1444.       t$377 = ix
 1444.       t$378 = iy
 1444.       t$379 = iz
 1444.       t$380 = 1 + ix
 1445.       t$381 = _zla( 0, 1 + ix )
 1444.       t$382 = _zla( 0, 1 + ix )
 1444.       t$383 = 1 + iy
 1445.       t$384 = _zla( 0, 1 + iy )
 1444.       t$385 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1444.       t$386 = 1 + iz
 1445.       t$387 = _zla( 0, 1 + iz )
 1444.       t$388 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1450.       h2 = h * h
 1451.       sa = ( 1.6666666666666666e-1 * sigma )
 1453.       if ( izero == 0 ) then
 1454.          if ( -1 + iz > 0 ) then
 1455.             if ( -1 + iy > 0 ) then
 1456.                if ( -1 + ix > 0 ) then
 1454.                   $I_L1454_38 = 0
 1454.                   do
 1455.                      $I_L1455_36 = 0
 1455.                      do
 1456.                         $I_L1456_30 = 0
 1456. !dir$ ivdep
 1456.                         do
 1457.                            u(1 + $I_L1456_30, 1 + $I_L1455_36, 1 + $I_L1454_38) = sa * h2 * r(1 + $I_L1456_30, 1 + $I_L1455_36, 1 + $I_L1454_38)
 1458.                            $I_L1456_30 = 1 + $I_L1456_30
 1458.                            if ( $I_L1456_30 >= -1 + ix ) exit
 1458.                         enddo
 1459.                         $I_L1455_36 = 1 + $I_L1455_36
 1459.                         if ( $I_L1455_36 >= -1 + iy ) exit
 1459.                      enddo
 1460.                      $I_L1454_38 = 1 + $I_L1454_38
 1460.                      if ( $I_L1454_38 >= -1 + iz ) exit
 1460.                   enddo
 1460.                endif
 1460.             endif
 1460.          endif
 1461.          cflops = cflops + ( 2 * ix + 2 * iy + ix * iy * -2 + 2 * iz + ix * iz * -2 + iy * iz * -2 + ix * iy * iz * 2 + -2 )
 1461.       endif
 1464.       $f_S3 = .true.
 1465.       if ( izero + m + -2 >= 0 ) then
 1465.          $I_L1465_32 = 0
 1465.          do
 1466.             if ( $f_S3 ) then
 1467.                ipa$2522 = 1
 1467.                call jac3d_helper( ix, iy, iz, o(0, 0, 0), u(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2522 )
 1467.             else
 1469.                ipa$2554 = 1
 1469.                call jac3d_helper( ix, iy, iz, u(0, 0, 0), o(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2554 )
 1469.             endif
 1471.             $f_S3 = $f_S3 == 0
 1472.             $I_L1465_32 = 1 + $I_L1465_32
 1472.             if ( $I_L1465_32 >= izero + m + -1 ) exit
 1472.          enddo
 1472.       endif
 1473.       cflops = cflops + ( -11 * ix + -11 * iy + ix * iy * 11 + -11 * iz + ix * iz * 11 + iy * iz * 11 + ix * iy * iz * -11 + -11 * izero + ix * izero * 11 + iy * izero * 11 + ix * iy * izero * -11 + iz * izero * 11 + ix * iz * izero * -11 + iy * iz * izero * -11 + ix * iy * iz * izero * 11 + -11 * m + ix * m * 11 + iy * m * 11 + ix * iy * m * -11 + iz * m * 11 + ix * iz * m * -11 + iy * iz * m * -11 + ix * iy * iz * m * 11 + 11 )
 1475.       if ( $f_S3 == 0 ) then
 1477.          ipa$2589 = loc( u(0, 0, 0) )
 1477.          a = _copyin( u(0, 0, 0) )
 1477.          ipa$2591 = loc( o(0, 0, 0) )
 1477.          b = _copyin( o(0, 0, 0) )
 1477.          if ( ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz >= 0 ) then
 1477.             $I_L1477_34 = 0
 1477. !dir$ ivdep
 1477.             do
 1477.                a(1 + $I_L1477_34) = b(1 + $I_L1477_34)
 1477.                $I_L1477_34 = 1 + $I_L1477_34
 1477.                if ( $I_L1477_34 >= ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz + 1 ) exit
 1477.             enddo
 1477.          endif
 1477.          o(0, 0, 0) = _copyout( b )
 1477.          u(0, 0, 0) = _copyout( a )
 1477.       endif
 1481.       return
 1481.       end
 1481.       
 1483.       
 1483.       subroutine smooth_m_jac3cnd( u, r, ix, iy, iz, h, sigma, m, o, izero )
 1483.       t$401 = ix
 1483.       t$402 = iy
 1483.       t$403 = iz
 1483.       t$404 = 1 + ix
 1484.       t$405 = _zla( 0, 1 + ix )
 1483.       t$406 = _zla( 0, 1 + ix )
 1483.       t$407 = 1 + iy
 1484.       t$408 = _zla( 0, 1 + iy )
 1483.       t$409 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1483.       t$410 = 1 + iz
 1484.       t$411 = _zla( 0, 1 + iz )
 1483.       t$412 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1488.       h2 = h * h
 1489.       sa = ( 1.6666666666666666e-1 * sigma )
 1491.       if ( izero == 0 ) then
 1492.          if ( -1 + iz > 0 ) then
 1493.             if ( -1 + iy > 0 ) then
 1494.                if ( -1 + ix > 0 ) then
 1492.                   $I_L1492_38 = 0
 1492.                   do
 1493.                      $I_L1493_36 = 0
 1493.                      do
 1494.                         $I_L1494_30 = 0
 1494. !dir$ ivdep
 1494.                         do
 1495.                            u(1 + $I_L1494_30, 1 + $I_L1493_36, 1 + $I_L1492_38) = sa * h2 * r(1 + $I_L1494_30, 1 + $I_L1493_36, 1 + $I_L1492_38)
 1496.                            $I_L1494_30 = 1 + $I_L1494_30
 1496.                            if ( $I_L1494_30 >= -1 + ix ) exit
 1496.                         enddo
 1497.                         $I_L1493_36 = 1 + $I_L1493_36
 1497.                         if ( $I_L1493_36 >= -1 + iy ) exit
 1497.                      enddo
 1498.                      $I_L1492_38 = 1 + $I_L1492_38
 1498.                      if ( $I_L1492_38 >= -1 + iz ) exit
 1498.                   enddo
 1498.                endif
 1498.             endif
 1498.          endif
 1499.          cflops = cflops + ( 2 * ix + 2 * iy + ix * iy * -2 + 2 * iz + ix * iz * -2 + iy * iz * -2 + ix * iy * iz * 2 + -2 )
 1499.       endif
 1502.       if ( izero + m + -2 >= 0 ) then
 1502.          $I_L1502_32 = 0
 1502.          do
 1503.             if ( and( 1, ( 2 + $I_L1502_32 ) ) == 0 ) then
 1504.                ipa$2603 = 1
 1504.                call jac3d_helper( ix, iy, iz, o(0, 0, 0), u(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2603 )
 1504.             else
 1506.                ipa$2635 = 1
 1506.                call jac3d_helper( ix, iy, iz, u(0, 0, 0), o(0, 0, 0), r(0, 0, 0), h2, sa, ipa$2635 )
 1506.             endif
 1508.             $I_L1502_32 = 1 + $I_L1502_32
 1508.             if ( $I_L1502_32 >= izero + m + -1 ) exit
 1508.          enddo
 1508.       endif
 1509.       cflops = cflops + ( -11 * ix + -11 * iy + ix * iy * 11 + -11 * iz + ix * iz * 11 + iy * iz * 11 + ix * iy * iz * -11 + -11 * izero + ix * izero * 11 + iy * izero * 11 + ix * iy * izero * -11 + iz * izero * 11 + ix * iz * izero * -11 + iy * iz * izero * -11 + ix * iy * iz * izero * 11 + -11 * m + ix * m * 11 + iy * m * 11 + ix * iy * m * -11 + iz * m * 11 + ix * iz * m * -11 + iy * iz * m * -11 + ix * iy * iz * m * 11 + 11 )
 1511.       if ( mod( izero + m, 2 ) == 0 ) then
 1513.          ipa$2670 = loc( u(0, 0, 0) )
 1513.          a = _copyin( u(0, 0, 0) )
 1513.          ipa$2672 = loc( o(0, 0, 0) )
 1513.          b = _copyin( o(0, 0, 0) )
 1513.          if ( ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz >= 0 ) then
 1513.             $I_L1513_34 = 0
 1513. !dir$ ivdep
 1513.             do
 1513.                a(1 + $I_L1513_34) = b(1 + $I_L1513_34)
 1513.                $I_L1513_34 = 1 + $I_L1513_34
 1513.                if ( $I_L1513_34 >= ix + iy + iz + ix * iy + ix * iz + iy * iz + ix * iy * iz + 1 ) exit
 1513.             enddo
 1513.          endif
 1513.          o(0, 0, 0) = _copyout( b )
 1513.          u(0, 0, 0) = _copyout( a )
 1513.       endif
 1517.       return
 1517.       end
 1517.       
 1519.       
 1519.       subroutine smooth_m_jac3idx( u, r, ix, iy, iz, h, sigma, m, o, izero )
 1519.       t$425 = ix
 1519.       t$426 = iy
 1519.       t$427 = iz
 1519.       t$428 = 1 + ix
 1531.       t$429 = _zla( 0, 1 + ix )
 1519.       t$430 = _zla( 0, 1 + ix )
 1519.       t$431 = 1 + iy
 1531.       t$432 = _zla( 0, 1 + iy )
 1519.       t$433 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy )
 1519.       t$434 = 1 + iz
 1531.       t$435 = _zla( 0, 1 + iz )
 1519.       t$436 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz )
 1519.       t$437 = 2 * _zla( 0, 1 + ix )
 1519.       t$438 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * 2
 1519.       t$439 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 2
 1537.       t$442 = _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 16
 1519.       t$440 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 16 ), 8 )
 1537.       t$441 = t$440
 1538.       if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1538.          $I_L1538_186 = 0
 1538.          do
 1538.             $I_L1538_156 = 0
 1538. !dir$ ivdep
 1538. !dir$ loop_info (automatic) cache_nt( o )
 1538.             do
 1538.                uo(0, $I_L1538_156, 0, $I_L1538_186) = u($I_L1538_156, 0, $I_L1538_186)
 1538.                uo(1, $I_L1538_156, 0, $I_L1538_186) = o($I_L1538_156, 0, $I_L1538_186)
 1538.                $I_L1538_156 = 1 + $I_L1538_156
 1538.                if ( $I_L1538_156 >= ix + iy + iy * ix + 1 ) exit
 1538.             enddo
 1538.             $I_L1538_186 = 1 + $I_L1538_186
 1538.             if ( $I_L1538_186 >= 1 + iz ) exit
 1538.          enddo
 1538.       endif
 1540.       $h2_S0 = h * h
 1541.       $sa_S1 = ( 1.6666666666666666e-1 * sigma )
 1543.       if ( izero == 0 ) then
 1544.          if ( -1 + iz > 0 ) then
 1545.             if ( -1 + iy > 0 ) then
 1546.                if ( -1 + ix > 0 ) then
 1544.                   $I_L1544_206 = 0
 1544.                   do
 1545.                      $I_L1545_182 = 0
 1545.                      do
 1546.                         $I_L1546_152 = 0
 1546. !dir$ ivdep
 1546.                         do
 1547.                            uo(0, 1 + $I_L1546_152, 1 + $I_L1545_182, 1 + $I_L1544_206) = $sa_S1 * $h2_S0 * r(1 + $I_L1546_152, 1 + $I_L1545_182, 1 + $I_L1544_206)
 1548.                            $I_L1546_152 = 1 + $I_L1546_152
 1548.                            if ( $I_L1546_152 >= -1 + ix ) exit
 1548.                         enddo
 1549.                         $I_L1545_182 = 1 + $I_L1545_182
 1549.                         if ( $I_L1545_182 >= -1 + iy ) exit
 1549.                      enddo
 1550.                      $I_L1544_206 = 1 + $I_L1544_206
 1550.                      if ( $I_L1544_206 >= -1 + iz ) exit
 1550.                   enddo
 1550.                endif
 1550.             endif
 1550.          endif
 1551.          cflops = cflops + ( 2 * ix + 2 * iy + ix * iy * -2 + 2 * iz + ix * iz * -2 + iy * iz * -2 + ix * iy * iz * 2 + -2 )
 1551.       endif
 1554.       $io_S5 = 0
 1556.       if ( izero + m + -2 >= 0 ) then
 1561.          if ( -1 + iz > 0 ) then
 1562.             if ( -1 + iy > 0 ) then
 1563.                if ( -1 + ix > 0 ) then
 1556.                   $I_L1556_216 = 0
 1556.                   do
 1559.                      t$456 = _zla( 0, 1 + ix )
 1559.                      t$457 = _zla( 0, 1 + iy )
 1559.                      t$458 = _zla( 0, 1 + iz )
 1559.                      t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                      if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1559.                         $I_L1559_188 = 0
 1559.                         do
 1559.                            $I_L1559_158 = 0
 1559. !dir$ ivdep
 1559.                            do
 1559.                               t$462(1 + $I_L1559_158, 1, 1 + $I_L1559_188) = uo($io_S5, $I_L1559_158, 0, $I_L1559_188)
 1559.                               $I_L1559_158 = 1 + $I_L1559_158
 1559.                               if ( $I_L1559_158 >= ix + iy + iy * ix + 1 ) exit
 1559.                            enddo
 1559.                            $I_L1559_188 = 1 + $I_L1559_188
 1559.                            if ( $I_L1559_188 >= 1 + iz ) exit
 1559.                         enddo
 1559.                      endif
 1559.                      ipa$2678 = 1
 1559.                      call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                      if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1559.                         $I_L1559_190 = 0
 1559.                         do
 1559.                            $I_L1559_160 = 0
 1559. !dir$ ivdep
 1559.                            do
 1559.                               uo($io_S5, $I_L1559_160, 0, $I_L1559_190) = t$462(1 + $I_L1559_160, 1, 1 + $I_L1559_190)
 1559.                               $I_L1559_160 = 1 + $I_L1559_160
 1559.                               if ( $I_L1559_160 >= ix + iy + iy * ix + 1 ) exit
 1559.                            enddo
 1559.                            $I_L1559_190 = 1 + $I_L1559_190
 1559.                            if ( $I_L1559_190 >= 1 + iz ) exit
 1559.                         enddo
 1559.                      endif
 1559.                      _free( t$463 )
 1561.                      $I_L1561_208 = 0
 1561.                      do
 1562.                         $I_L1562_184 = 0
 1562.                         do
 1563.                            if ( 1 + -$io_S5 == $io_S5 .and. 0 < -2 + ix ) then
 1563.                               $I_L1563_154 = 0
 1563.                               do
 1564.                                  uo(1 + -$io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) = uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + $sa_S1 * ( $h2_S0 * r(1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + -6.0 * uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 2 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 2 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 2 + $I_L1561_208) + uo($io_S5, $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) )
 1569.                                  $I_L1563_154 = 1 + $I_L1563_154
 1569.                                  if ( $I_L1563_154 >= -1 + ix ) exit
 1569.                               enddo
 1569.                            else
 1563.                               $I_L1563_154 = 0
 1563. !dir$ ivdep safevl = 4
 1563.                               do
 1564.                                  uo(1 + -$io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) = uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + $sa_S1 * ( $h2_S0 * r(1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + -6.0 * uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 2 + $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 2 + $I_L1562_184, 1 + $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, $I_L1561_208) + uo($io_S5, 1 + $I_L1563_154, 1 + $I_L1562_184, 2 + $I_L1561_208) + uo($io_S5, $I_L1563_154, 1 + $I_L1562_184, 1 + $I_L1561_208) )
 1569.                                  $I_L1563_154 = 1 + $I_L1563_154
 1569.                                  if ( $I_L1563_154 >= -1 + ix ) exit
 1569.                               enddo
 1569.                            endif
 1570.                            $I_L1562_184 = 1 + $I_L1562_184
 1570.                            if ( $I_L1562_184 >= -1 + iy ) exit
 1570.                         enddo
 1571.                         $I_L1561_208 = 1 + $I_L1561_208
 1571.                         if ( $I_L1561_208 >= -1 + iz ) exit
 1571.                      enddo
 1573.                      $io_S5 = 1 + -$io_S5
 1574.                      $I_L1556_216 = 1 + $I_L1556_216
 1574.                      if ( $I_L1556_216 >= izero + m + -1 ) exit
 1574.                   enddo
 1574.                else if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1556.                   $I_L1556_214 = 0
 1556.                   do
 1559.                      t$456 = _zla( 0, 1 + ix )
 1559.                      t$457 = _zla( 0, 1 + iy )
 1559.                      t$458 = _zla( 0, 1 + iz )
 1559.                      t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                      $I_L1559_192 = 0
 1559.                      do
 1559.                         $I_L1559_162 = 0
 1559. !dir$ ivdep
 1559.                         do
 1559.                            t$462(1 + $I_L1559_162, 1, 1 + $I_L1559_192) = uo($io_S5, $I_L1559_162, 0, $I_L1559_192)
 1559.                            $I_L1559_162 = 1 + $I_L1559_162
 1559.                            if ( $I_L1559_162 >= ix + iy + iy * ix + 1 ) exit
 1559.                         enddo
 1559.                         $I_L1559_192 = 1 + $I_L1559_192
 1559.                         if ( $I_L1559_192 >= 1 + iz ) exit
 1559.                      enddo
 1559.                      ipa$2678 = 1
 1559.                      call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                      $I_L1559_194 = 0
 1559.                      do
 1559.                         $I_L1559_164 = 0
 1559. !dir$ ivdep
 1559.                         do
 1559.                            uo($io_S5, $I_L1559_164, 0, $I_L1559_194) = t$462(1 + $I_L1559_164, 1, 1 + $I_L1559_194)
 1559.                            $I_L1559_164 = 1 + $I_L1559_164
 1559.                            if ( $I_L1559_164 >= ix + iy + iy * ix + 1 ) exit
 1559.                         enddo
 1559.                         $I_L1559_194 = 1 + $I_L1559_194
 1559.                         if ( $I_L1559_194 >= 1 + iz ) exit
 1559.                      enddo
 1559.                      _free( t$463 )
 1573.                      $io_S5 = 1 + -$io_S5
 1574.                      $I_L1556_214 = 1 + $I_L1556_214
 1574.                      if ( $I_L1556_214 >= izero + m + -1 ) exit
 1574.                   enddo
 1574.                else
 1556.                   $I_L1556_180 = 0
 1556.                   do
 1559.                      t$456 = _zla( 0, 1 + ix )
 1559.                      t$457 = _zla( 0, 1 + iy )
 1559.                      t$458 = _zla( 0, 1 + iz )
 1559.                      t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                      ipa$2678 = 1
 1559.                      call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                      _free( t$463 )
 1574.                      $I_L1556_180 = 1 + $I_L1556_180
 1574.                      if ( $I_L1556_180 >= izero + m + -1 ) exit
 1574.                   enddo
 1574.                endif
 1574.             else if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1556.                $I_L1556_212 = 0
 1556.                do
 1559.                   t$456 = _zla( 0, 1 + ix )
 1559.                   t$457 = _zla( 0, 1 + iy )
 1559.                   t$458 = _zla( 0, 1 + iz )
 1559.                   t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                   $I_L1559_196 = 0
 1559.                   do
 1559.                      $I_L1559_166 = 0
 1559. !dir$ ivdep
 1559.                      do
 1559.                         t$462(1 + $I_L1559_166, 1, 1 + $I_L1559_196) = uo($io_S5, $I_L1559_166, 0, $I_L1559_196)
 1559.                         $I_L1559_166 = 1 + $I_L1559_166
 1559.                         if ( $I_L1559_166 >= ix + iy + iy * ix + 1 ) exit
 1559.                      enddo
 1559.                      $I_L1559_196 = 1 + $I_L1559_196
 1559.                      if ( $I_L1559_196 >= 1 + iz ) exit
 1559.                   enddo
 1559.                   ipa$2678 = 1
 1559.                   call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                   $I_L1559_198 = 0
 1559.                   do
 1559.                      $I_L1559_168 = 0
 1559. !dir$ ivdep
 1559.                      do
 1559.                         uo($io_S5, $I_L1559_168, 0, $I_L1559_198) = t$462(1 + $I_L1559_168, 1, 1 + $I_L1559_198)
 1559.                         $I_L1559_168 = 1 + $I_L1559_168
 1559.                         if ( $I_L1559_168 >= ix + iy + iy * ix + 1 ) exit
 1559.                      enddo
 1559.                      $I_L1559_198 = 1 + $I_L1559_198
 1559.                      if ( $I_L1559_198 >= 1 + iz ) exit
 1559.                   enddo
 1559.                   _free( t$463 )
 1573.                   $io_S5 = 1 + -$io_S5
 1574.                   $I_L1556_212 = 1 + $I_L1556_212
 1574.                   if ( $I_L1556_212 >= izero + m + -1 ) exit
 1574.                enddo
 1574.             else
 1556.                $I_L1556_178 = 0
 1556.                do
 1559.                   t$456 = _zla( 0, 1 + ix )
 1559.                   t$457 = _zla( 0, 1 + iy )
 1559.                   t$458 = _zla( 0, 1 + iz )
 1559.                   t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                   ipa$2678 = 1
 1559.                   call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                   _free( t$463 )
 1574.                   $I_L1556_178 = 1 + $I_L1556_178
 1574.                   if ( $I_L1556_178 >= izero + m + -1 ) exit
 1574.                enddo
 1574.             endif
 1574.          else if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1556.             $I_L1556_210 = 0
 1556.             do
 1559.                t$456 = _zla( 0, 1 + ix )
 1559.                t$457 = _zla( 0, 1 + iy )
 1559.                t$458 = _zla( 0, 1 + iz )
 1559.                t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                $I_L1559_200 = 0
 1559.                do
 1559.                   $I_L1559_170 = 0
 1559. !dir$ ivdep
 1559.                   do
 1559.                      t$462(1 + $I_L1559_170, 1, 1 + $I_L1559_200) = uo($io_S5, $I_L1559_170, 0, $I_L1559_200)
 1559.                      $I_L1559_170 = 1 + $I_L1559_170
 1559.                      if ( $I_L1559_170 >= ix + iy + iy * ix + 1 ) exit
 1559.                   enddo
 1559.                   $I_L1559_200 = 1 + $I_L1559_200
 1559.                   if ( $I_L1559_200 >= 1 + iz ) exit
 1559.                enddo
 1559.                ipa$2678 = 1
 1559.                call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                $I_L1559_202 = 0
 1559.                do
 1559.                   $I_L1559_172 = 0
 1559. !dir$ ivdep
 1559.                   do
 1559.                      uo($io_S5, $I_L1559_172, 0, $I_L1559_202) = t$462(1 + $I_L1559_172, 1, 1 + $I_L1559_202)
 1559.                      $I_L1559_172 = 1 + $I_L1559_172
 1559.                      if ( $I_L1559_172 >= ix + iy + iy * ix + 1 ) exit
 1559.                   enddo
 1559.                   $I_L1559_202 = 1 + $I_L1559_202
 1559.                   if ( $I_L1559_202 >= 1 + iz ) exit
 1559.                enddo
 1559.                _free( t$463 )
 1573.                $io_S5 = 1 + -$io_S5
 1574.                $I_L1556_210 = 1 + $I_L1556_210
 1574.                if ( $I_L1556_210 >= izero + m + -1 ) exit
 1574.             enddo
 1574.          else
 1556.             $I_L1556_176 = 0
 1556.             do
 1559.                t$456 = _zla( 0, 1 + ix )
 1559.                t$457 = _zla( 0, 1 + iy )
 1559.                t$458 = _zla( 0, 1 + iz )
 1559.                t$463 = int( _alloc( _zla( 0, 1 + ix ) * _zla( 0, 1 + iy ) * _zla( 0, 1 + iz ) * 8 ), 8 )
 1559.                ipa$2678 = 1
 1559.                call xchange0( t$462(1, 1, 1), ipa$2678 )
 1559.                _free( t$463 )
 1574.                $I_L1556_176 = 1 + $I_L1556_176
 1574.                if ( $I_L1556_176 >= izero + m + -1 ) exit
 1574.             enddo
 1574.          endif
 1573.          $io_S5 = and( 1, ( izero + m + -1 ) ) /= 0
 1573.       endif
 1575.       cflops = cflops + ( -11 * ix + -11 * iy + ix * iy * 11 + -11 * iz + ix * iz * 11 + iy * iz * 11 + ix * iy * iz * -11 + -11 * izero + ix * izero * 11 + iy * izero * 11 + ix * iy * izero * -11 + iz * izero * 11 + ix * iz * izero * -11 + iy * iz * izero * -11 + ix * iy * iz * izero * 11 + -11 * m + ix * m * 11 + iy * m * 11 + ix * iy * m * -11 + iz * m * 11 + ix * iz * m * -11 + iy * iz * m * -11 + ix * iy * iz * m * 11 + 11 )
 1577.       if ( and( and( -1 + -iz, -1 + -iy ), -1 + -ix ) < 0 ) then
 1577.          $I_L1577_204 = 0
 1577.          do
 1577.             $I_L1577_174 = 0
 1577. !dir$ ivdep
 1577. !dir$ loop_info (automatic) cache_nt( uo )
 1577.             do
 1577.                u($I_L1577_174, 0, $I_L1577_204) = uo($io_S5, $I_L1577_174, 0, $I_L1577_204)
 1578.                o($I_L1577_174, 0, $I_L1577_204) = uo(1 + -$io_S5, $I_L1577_174, 0, $I_L1577_204)
 1577.                $I_L1577_174 = 1 + $I_L1577_174
 1577.                if ( $I_L1577_174 >= ix + iy + iy * ix + 1 ) exit
 1577.             enddo
 1577.             $I_L1577_204 = 1 + $I_L1577_204
 1577.             if ( $I_L1577_204 >= 1 + iz ) exit
 1577.          enddo
 1577.       endif
 1519.       _free( t$440 )
 1580.       return
 1580.       end
 1580.       
 1582.       
 1582.       subroutine smooth_m_gs_2d( u, r, mx, my, h, sigma, m, izero )
 1582.       t$473 = mx
 1582.       t$474 = my
 1582.       t$475 = 1 + mx
 1584.       t$476 = _zla( 0, 1 + mx )
 1582.       t$477 = _zla( 0, 1 + mx )
 1582.       t$478 = 1 + my
 1584.       t$479 = _zla( 0, 1 + my )
 1582.       t$480 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1586.       ipa$2700 = loc( u(0, 0) )
 1586.       a = _copyin( u(0, 0) )
 1586.       ipa$2703 = loc( a(1) )
 1586.       a = _copyin( a(1) )
 1586.       t$559 = mx
 1586.       t$560 = my
 1586.       t$561 = 1 + mx
 1586.       t$562 = _zla( 0, 1 + mx )
 1586.       t$563 = _zla( 0, 1 + mx )
 1586.       t$564 = 1 + my
 1586.       t$565 = _zla( 0, 1 + my )
 1586.       t$566 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1586.       if ( ip == 0 ) then
 1586.          if ( my >= 0 ) then
 1586.             $I_L1586_54 = 0
 1586. !dir$ ivdep
 1586.             do
 1586.                a(0, $I_L1586_54) = 0.0
 1586.                $I_L1586_54 = 1 + $I_L1586_54
 1586.                if ( $I_L1586_54 >= 1 + my ) exit
 1586.             enddo
 1586.          endif
 1586.       endif
 1586.       if ( mp + -ip == 0 ) then
 1586.          if ( my >= 0 ) then
 1586.             $I_L1586_56 = 0
 1586. !dir$ ivdep
 1586.             do
 1586.                a(mx, $I_L1586_56) = 0.0
 1586.                $I_L1586_56 = 1 + $I_L1586_56
 1586.                if ( $I_L1586_56 >= 1 + my ) exit
 1586.             enddo
 1586.          endif
 1586.       endif
 1586.       if ( iq == 0 ) then
 1586.          if ( mx >= 0 ) then
 1586.             $I_L1586_58 = 0
 1586. !dir$ ivdep
 1586.             do
 1586.                a($I_L1586_58, 0) = 0.0
 1586.                $I_L1586_58 = 1 + $I_L1586_58
 1586.                if ( $I_L1586_58 >= 1 + mx ) exit
 1586.             enddo
 1586.          endif
 1586.       endif
 1586.       if ( mq + -iq == 0 ) then
 1586.          if ( mx >= 0 ) then
 1586.             $I_L1586_60 = 0
 1586. !dir$ ivdep
 1586.             do
 1586.                a($I_L1586_60, my) = 0.0
 1586.                $I_L1586_60 = 1 + $I_L1586_60
 1586.                if ( $I_L1586_60 >= 1 + mx ) exit
 1586.             enddo
 1586.          endif
 1586.       endif
 1586.       a(1) = _copyout( a )
 1586.       u(0, 0) = _copyout( a )
 1588.       $h2_S4 = h * h
 1589.       $sa_S5 = ( 2.5e-1 * sigma )
 1591.       if ( izero == 0 ) then
 1592.          if ( -1 + my > 0 ) then
 1593.             if ( -1 + mx > 0 ) then
 1592.                $I_L1592_68 = 0
 1592.                do
 1593.                   $I_L1593_62 = 0
 1593. !dir$ ivdep
 1593.                   do
 1594.                      u(1 + $I_L1593_62, 1 + $I_L1592_68) = $sa_S5 * $h2_S4 * r(1 + $I_L1593_62, 1 + $I_L1592_68)
 1595.                      $I_L1593_62 = 1 + $I_L1593_62
 1595.                      if ( $I_L1593_62 >= -1 + mx ) exit
 1595.                   enddo
 1596.                   $I_L1592_68 = 1 + $I_L1592_68
 1596.                   if ( $I_L1592_68 >= -1 + my ) exit
 1596.                enddo
 1596.             endif
 1596.          endif
 1596.       endif
 1599.       if ( izero + m + -2 >= 0 ) then
 1600.          if ( -1 + my > 0 ) then
 1601.             if ( -1 + mx > 0 ) then
 1599.                $I_L1599_74 = 0
 1599.                do
 1600.                   $I_L1600_72 = 0
 1600.                   do
 1601.                      $I_L1601_70 = 0
 1601.                      do
 1601.                         $I_L1601_64 = 0
 1601. !dir$ ivdep
 1601.                         do
 1602.                            $_TA_SCF_6($I_L1601_64) = $h2_S4 * r($I_L1601_64 + 256 * $I_L1601_70 + 1, 1 + $I_L1600_72) + u($I_L1601_64 + 256 * $I_L1601_70 + 1, $I_L1600_72) + u($I_L1601_64 + 256 * $I_L1601_70 + 2, 1 + $I_L1600_72) + u($I_L1601_64 + 256 * $I_L1601_70 + 1, 2 + $I_L1600_72) + -4.0 * u($I_L1601_64 + 256 * $I_L1601_70 + 1, 1 + $I_L1600_72)
 1601.                            $I_L1601_64 = 1 + $I_L1601_64
 1604.                            if ( $I_L1601_64 >= min( -1 + mx, 256 + 256 * $I_L1601_70 ) + -256 * $I_L1601_70 ) exit
 1604.                         enddo
 1601.                         $I_L1601_66 = 0
 1601. !dir$ unroll 4
 1601.                         do
 1602.                            u($I_L1601_66 + 256 * $I_L1601_70 + 1, 1 + $I_L1600_72) = u($I_L1601_66 + 256 * $I_L1601_70 + 1, 1 + $I_L1600_72) + $sa_S5 * ( u($I_L1601_66 + 256 * $I_L1601_70, 1 + $I_L1600_72) + $_TA_SCF_6($I_L1601_66) )
 1601.                            $I_L1601_66 = 1 + $I_L1601_66
 1604.                            if ( $I_L1601_66 >= min( -1 + mx, 256 + 256 * $I_L1601_70 ) + -256 * $I_L1601_70 ) exit
 1604.                         enddo
 1601.                         $I_L1601_70 = 1 + $I_L1601_70
 1604.                         if ( $I_L1601_70 >= 1 + max( 0, -1 + _rsh( 254 + mx, 8 ) ) ) exit
 1604.                      enddo
 1605.                      $I_L1600_72 = 1 + $I_L1600_72
 1605.                      if ( $I_L1600_72 >= -1 + my ) exit
 1605.                   enddo
 1606.                   $I_L1599_74 = 1 + $I_L1599_74
 1606.                   if ( $I_L1599_74 >= izero + m + -1 ) exit
 1606.                enddo
 1606.             endif
 1606.          endif
 1606.       endif
 1609.       return
 1609.       end
 1609.       
 1611.       
 1611.       subroutine smooth_m_gs_3d( u, r, mx, my, mz, h, sigma, m, izero )
 1611.       t$496 = mx
 1611.       t$497 = my
 1611.       t$498 = mz
 1611.       t$499 = 1 + mx
 1613.       t$500 = _zla( 0, 1 + mx )
 1611.       t$501 = _zla( 0, 1 + mx )
 1611.       t$502 = 1 + my
 1613.       t$503 = _zla( 0, 1 + my )
 1611.       t$504 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1611.       t$505 = 1 + mz
 1613.       t$506 = _zla( 0, 1 + mz )
 1611.       t$507 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1615.       $h2_S9 = h * h
 1616.       $sa_S10 = ( 1.6666666666666666e-1 * sigma )
 1619.       $sa2_S4 = 3.3333333333333331e-1 * ( ( h * h ) * sigma ) + -( ( ( h * h ) * sigma * 1.6666666666666666e-1 ) * ( ( h * h ) * sigma * 1.6666666666666666e-1 ) * 1.0/( h * h ) * 6.0 )
 1620.       $sh2_S3 = ( ( ( h * h ) * sigma * 1.6666666666666666e-1 ) * 1.0/( h * h ) )
 1621.       $s22_S5 = ( ( ( h * h ) * sigma * 1.6666666666666666e-1 ) * ( ( h * h ) * sigma * 1.6666666666666666e-1 ) * 1.0/( h * h ) )
 1624.       if ( izero == 0 ) then
 1625.          if ( -1 + mz > 0 ) then
 1626.             if ( -1 + my > 0 ) then
 1627.                if ( -1 + mx > 0 ) then
 1625.                   $I_L1625_58 = 0
 1625.                   do
 1626.                      $I_L1626_54 = 0
 1626.                      do
 1627.                         $I_L1627_50 = 0
 1627.                         do
 1627.                            $I_L1627_42 = 0
 1627. !dir$ ivdep
 1627.                            do
 1628.                               $_TA_SCF_10($I_L1627_42) = u($I_L1627_42 + 256 * $I_L1627_50 + 1, $I_L1626_54, 1 + $I_L1625_58) + u($I_L1627_42 + 256 * $I_L1627_50 + 1, 1 + $I_L1626_54, $I_L1625_58)
 1628.                               $_TA_SCF_11($I_L1627_42) = $sa2_S4 * r($I_L1627_42 + 256 * $I_L1627_50 + 1, 1 + $I_L1626_54, 1 + $I_L1625_58) + $s22_S5 * ( r($I_L1627_42 + 256 * $I_L1627_50 + 2, 1 + $I_L1626_54, 1 + $I_L1625_58) + r($I_L1627_42 + 256 * $I_L1627_50 + 1, 2 + $I_L1626_54, 1 + $I_L1625_58) + r($I_L1627_42 + 256 * $I_L1627_50 + 1, 1 + $I_L1626_54, 2 + $I_L1625_58) )
 1627.                               $I_L1627_42 = 1 + $I_L1627_42
 1631.                               if ( $I_L1627_42 >= min( -1 + mx, 256 + 256 * $I_L1627_50 ) + -256 * $I_L1627_50 ) exit
 1631.                            enddo
 1627.                            $u_WR0_R0 = u(256 * $I_L1627_50, 1 + $I_L1626_54, 1 + $I_L1625_58)
 1627.                            $I_L1627_44 = 0
 1627. !dir$ unroll 4
 1627.                            do
 1628.                               $u_WR0_R0 = $sh2_S3 * ( $u_WR0_R0 + $_TA_SCF_10($I_L1627_44) ) + $_TA_SCF_11($I_L1627_44)
 1628.                               u($I_L1627_44 + 256 * $I_L1627_50 + 1, 1 + $I_L1626_54, 1 + $I_L1625_58) = $u_WR0_R0
 1627.                               $I_L1627_44 = 1 + $I_L1627_44
 1631.                               if ( $I_L1627_44 >= min( -1 + mx, 256 + 256 * $I_L1627_50 ) + -256 * $I_L1627_50 ) exit
 1631.                            enddo
 1627.                            $I_L1627_50 = 1 + $I_L1627_50
 1631.                            if ( $I_L1627_50 >= 1 + max( 0, -1 + _rsh( 254 + mx, 8 ) ) ) exit
 1631.                         enddo
 1632.                         $I_L1626_54 = 1 + $I_L1626_54
 1632.                         if ( $I_L1626_54 >= -1 + my ) exit
 1632.                      enddo
 1633.                      $I_L1625_58 = 1 + $I_L1625_58
 1633.                      if ( $I_L1625_58 >= -1 + mz ) exit
 1633.                   enddo
 1633.                endif
 1633.             endif
 1633.          endif
 1633.       endif
 1636.       if ( m + 2 * izero + -3 >= 0 ) then
 1637.          if ( -1 + mz > 0 ) then
 1638.             if ( -1 + my > 0 ) then
 1639.                if ( -1 + mx > 0 ) then
 1636.                   $I_L1636_62 = 0
 1636.                   do
 1637.                      $I_L1637_60 = 0
 1637.                      do
 1638.                         $I_L1638_56 = 0
 1638.                         do
 1639.                            $I_L1639_52 = 0
 1639.                            do
 1639.                               $I_L1639_46 = 0
 1639. !dir$ ivdep
 1639.                               do
 1640.                                  $_TA_SCF_12($I_L1639_46) = $h2_S9 * r($I_L1639_46 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, 1 + $I_L1637_60) + -6.0 * u($I_L1639_46 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, 1 + $I_L1637_60) + u($I_L1639_46 + 256 * $I_L1639_52 + 2, 1 + $I_L1638_56, 1 + $I_L1637_60) + u($I_L1639_46 + 256 * $I_L1639_52 + 1, $I_L1638_56, 1 + $I_L1637_60) + u($I_L1639_46 + 256 * $I_L1639_52 + 1, 2 + $I_L1638_56, 1 + $I_L1637_60) + u($I_L1639_46 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, $I_L1637_60) + u($I_L1639_46 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, 2 + $I_L1637_60)
 1639.                                  $I_L1639_46 = 1 + $I_L1639_46
 1644.                                  if ( $I_L1639_46 >= min( -1 + mx, 256 + 256 * $I_L1639_52 ) + -256 * $I_L1639_52 ) exit
 1644.                               enddo
 1639.                               $I_L1639_48 = 0
 1639. !dir$ unroll 4
 1639.                               do
 1640.                                  u($I_L1639_48 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, 1 + $I_L1637_60) = u($I_L1639_48 + 256 * $I_L1639_52 + 1, 1 + $I_L1638_56, 1 + $I_L1637_60) + $sa_S10 * ( u($I_L1639_48 + 256 * $I_L1639_52, 1 + $I_L1638_56, 1 + $I_L1637_60) + $_TA_SCF_12($I_L1639_48) )
 1639.                                  $I_L1639_48 = 1 + $I_L1639_48
 1644.                                  if ( $I_L1639_48 >= min( -1 + mx, 256 + 256 * $I_L1639_52 ) + -256 * $I_L1639_52 ) exit
 1644.                               enddo
 1639.                               $I_L1639_52 = 1 + $I_L1639_52
 1644.                               if ( $I_L1639_52 >= 1 + max( 0, -1 + _rsh( 254 + mx, 8 ) ) ) exit
 1644.                            enddo
 1645.                            $I_L1638_56 = 1 + $I_L1638_56
 1645.                            if ( $I_L1638_56 >= -1 + my ) exit
 1645.                         enddo
 1646.                         $I_L1637_60 = 1 + $I_L1637_60
 1646.                         if ( $I_L1637_60 >= -1 + mz ) exit
 1646.                      enddo
 1647.                      $I_L1636_62 = 1 + $I_L1636_62
 1647.                      if ( $I_L1636_62 >= m + 2 * izero + -2 ) exit
 1647.                   enddo
 1647.                endif
 1647.             endif
 1647.          endif
 1647.       endif
 1650.       return
 1650.       end
 1650.       
 1652.       
 1652.       subroutine outm( a, kx, n, m, name4 )
 1652.       t$530 = mx
 1652.       t$531 = my
 1652.       t$532 = mz
 1652.       t$537 = 1 + mx
 1655.       t$538 = _zla( 0, 1 + mx )
 1652.       t$539 = _zla( 0, 1 + mx )
 1652.       t$540 = 1 + my
 1655.       t$541 = _zla( 0, 1 + my )
 1652.       t$542 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1652.       t$543 = 1 + mz
 1655.       t$544 = _zla( 0, 1 + mz )
 1652.       t$545 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1659.       my10 = min( 18, my )
 1661.       $t_S1 = -1 + np
 1661.       if ( np > 0 ) then
 1661.          $I_L1661_14 = 0
 1661.          do
 1661.             p = $t_S1 + -$I_L1661_14
 1662.             call gsync
 1663.             if ( nid + $I_L1661_14 + -$t_S1 == 0 ) then
 1664.                t$550 = 12
 1664.                 _substr(t$551,1,4) = 'x.x'
 1664.                t$552(1) = 0x300000000000000L
 1664. !dir$ suppress t$550
 1664.                t$552(2) = int( loc( t$550 ), 8 )
 1664.                t$552(3) = 0
 1664.                t$552(4) = 0
 1664. !dir$ suppress  _substr(t$551,1,3)
 1664.                t$552(5) = int( loc(  _substr(t$551,1,3) ), 8 )
 1664.                t$552(6) = 3
 1664.                t$552(7) = 0
 1664.                t$552(9) = 0
 1664.                t$552(11) = 0
 1664.                t$552(13) = 0
 1664.                t$552(14) = 0
 1664.                t$552(16) = 0
 1664.                t$552(18) = 0
 1664.                t$552(20) = 0
 1664.                t$552(22) = 0
 1664.                t$552(24) = 0
 1664.                t$552(25) = 0
 1664.                t$552(27) = 0
 1664.                t$552(29) = 0
 1664.                t$552(31) = 0
 1664.                t$552(33) = 0
 1664.                t$552(35) = 0
 1664.                t$552(37) = 0
 1664.                t$552(38) = 0
 1664.                t$552(39) = 0
 1664.                t$549 = _open( t$552 )
 1665.                _fwrite( _clist( 0, 0, 3, 12, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'open ', 0x800600000000L ), _iotype( p, 0x2000200000000L ) ) )
 1666.                t$550 = 12
 1666.                t$554(1) = 0x100000000000000L
 1666. !dir$ suppress t$550
 1666.                t$554(2) = int( loc( t$550 ), 8 )
 1666.                t$554(3) = 0
 1666.                t$554(4) = 0
 1666.                t$554(5) = 0
 1666.                t$554(7) = 0
 1666.                t$554(8) = 0
 1666.                t$553 = _close( t$554 )
 1666.             endif
 1668.             call gsync
 1670.             if ( nid + $I_L1661_14 + -$t_S1 == 0 ) then
 1671.                $_IOitem_P0(0) = n
 1671.                $_IOitem_P0(1) = m
 1671.                $_IOitem_P0(2) = mx
 1671.                $_IOitem_P0(3) = my
 1671.                $_IOitem_P0(4) = mz
 1671.                $_IOitem_P0(5) = nx
 1671.                $_IOitem_P0(6) = ny
 1671.                $_IOitem_P0(7) = nz
 1671.                $_IOitem_P0(8) = kx
 1671.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$534,  _substr(t$533,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( p, 0x2000200000000L ), _iotype(  _substr(name4,1,4), 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 8, 1 )), 0x2000200000000L ) ) )
 1673.                if ( mz >= 0 ) then
 1673.                   $I_L1673_12 = 0
 1673.                   do
 1674.                      $_IOitem_P1(0) = $t_S1 + -$I_L1661_14
 1674.                      $_IOitem_P1(1) = kx
 1674.                      $_IOitem_P1(2) = mz + -$I_L1673_12
 1674.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$536,  _substr(t$535,1,22), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P1(:( 0, 2, 1 )), 0x2000200000000L ), _iotype( a(kx, :( 0, my10, 1 ), mz + -$I_L1673_12), 0x4000300000000L ) ) )
 1676.                      $I_L1673_12 = 1 + $I_L1673_12
 1676.                      if ( $I_L1673_12 >= 1 + mz ) exit
 1676.                   enddo
 1676.                endif
 1676.             endif
 1679.             call gsync
 1680.             $I_L1661_14 = 1 + $I_L1661_14
 1680.             if ( $I_L1661_14 >= 1 + $t_S1 ) exit
 1680.          enddo
 1680.       endif
 1682.       return
 1682.       end
 1682.       
 1684.       
 1684.       subroutine zero_bdry( a, mx, my, mz, ndim )
 1687.       if ( ndim == 2 ) then
 1687.          call zero_bdry2( a(1) )
 1687.       endif
 1688.       if ( ndim == 3 ) then
 1688.          call zero_bdry3( a(1) )
 1688.       endif
 1691.       return
 1691.       end
 1691.       
 1693.       
 1693.       subroutine zero_bdry2( a )
 1693.       t$559 = mx
 1693.       t$560 = my
 1693.       t$561 = 1 + mx
 1695.       t$562 = _zla( 0, 1 + mx )
 1693.       t$563 = _zla( 0, 1 + mx )
 1693.       t$564 = 1 + my
 1695.       t$565 = _zla( 0, 1 + my )
 1693.       t$566 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1698.       if ( ip == 0 ) then
 1699.          if ( my >= 0 ) then
 1699.             $I_L1699_24 = 0
 1699. !dir$ ivdep
 1699.             do
 1700.                a(0, $I_L1699_24) = 0.0
 1701.                $I_L1699_24 = 1 + $I_L1699_24
 1701.                if ( $I_L1699_24 >= 1 + my ) exit
 1701.             enddo
 1701.          endif
 1701.       endif
 1703.       if ( mp + -ip == 0 ) then
 1704.          if ( my >= 0 ) then
 1704.             $I_L1704_26 = 0
 1704. !dir$ ivdep
 1704.             do
 1705.                a(mx, $I_L1704_26) = 0.0
 1706.                $I_L1704_26 = 1 + $I_L1704_26
 1706.                if ( $I_L1704_26 >= 1 + my ) exit
 1706.             enddo
 1706.          endif
 1706.       endif
 1708.       if ( iq == 0 ) then
 1709.          if ( mx >= 0 ) then
 1709.             $I_L1709_28 = 0
 1709. !dir$ ivdep
 1709.             do
 1710.                a($I_L1709_28, 0) = 0.0
 1711.                $I_L1709_28 = 1 + $I_L1709_28
 1711.                if ( $I_L1709_28 >= 1 + mx ) exit
 1711.             enddo
 1711.          endif
 1711.       endif
 1713.       if ( mq + -iq == 0 ) then
 1714.          if ( mx >= 0 ) then
 1714.             $I_L1714_30 = 0
 1714. !dir$ ivdep
 1714.             do
 1715.                a($I_L1714_30, my) = 0.0
 1716.                $I_L1714_30 = 1 + $I_L1714_30
 1716.                if ( $I_L1714_30 >= 1 + mx ) exit
 1716.             enddo
 1716.          endif
 1716.       endif
 1720.       return
 1720.       end
 1720.       
 1722.       
 1722.       subroutine zero_bdry3( a )
 1722.       t$580 = mx
 1722.       t$581 = my
 1722.       t$582 = mz
 1722.       t$583 = 1 + mx
 1724.       t$584 = _zla( 0, 1 + mx )
 1722.       t$585 = _zla( 0, 1 + mx )
 1722.       t$586 = 1 + my
 1724.       t$587 = _zla( 0, 1 + my )
 1722.       t$588 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1722.       t$589 = 1 + mz
 1724.       t$590 = _zla( 0, 1 + mz )
 1722.       t$591 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1726.       if ( ip == 0 ) then
 1727.          if ( mz >= 0 ) then
 1728.             if ( my >= 0 ) then
 1727.                $I_L1727_108 = 0
 1727.                do
 1728.                   $I_L1728_96 = 0
 1728. !dir$ ivdep
 1728.                   do
 1729.                      a(0, $I_L1728_96, $I_L1727_108) = 0.0
 1730.                      $I_L1728_96 = 1 + $I_L1728_96
 1730.                      if ( $I_L1728_96 >= 1 + my ) exit
 1730.                   enddo
 1731.                   $I_L1727_108 = 1 + $I_L1727_108
 1731.                   if ( $I_L1727_108 >= 1 + mz ) exit
 1731.                enddo
 1731.             endif
 1731.          endif
 1731.       endif
 1733.       if ( mp + -ip == 0 ) then
 1734.          if ( mz >= 0 ) then
 1735.             if ( my >= 0 ) then
 1734.                $I_L1734_110 = 0
 1734.                do
 1735.                   $I_L1735_98 = 0
 1735. !dir$ ivdep
 1735.                   do
 1736.                      a(mx, $I_L1735_98, $I_L1734_110) = 0.0
 1737.                      $I_L1735_98 = 1 + $I_L1735_98
 1737.                      if ( $I_L1735_98 >= 1 + my ) exit
 1737.                   enddo
 1738.                   $I_L1734_110 = 1 + $I_L1734_110
 1738.                   if ( $I_L1734_110 >= 1 + mz ) exit
 1738.                enddo
 1738.             endif
 1738.          endif
 1738.       endif
 1740.       if ( iq == 0 ) then
 1741.          if ( mz >= 0 ) then
 1742.             if ( mx >= 0 ) then
 1741.                $I_L1741_112 = 0
 1741.                do
 1742.                   $I_L1742_100 = 0
 1742. !dir$ ivdep
 1742.                   do
 1743.                      a($I_L1742_100, 0, $I_L1741_112) = 0.0
 1744.                      $I_L1742_100 = 1 + $I_L1742_100
 1744.                      if ( $I_L1742_100 >= 1 + mx ) exit
 1744.                   enddo
 1745.                   $I_L1741_112 = 1 + $I_L1741_112
 1745.                   if ( $I_L1741_112 >= 1 + mz ) exit
 1745.                enddo
 1745.             endif
 1745.          endif
 1745.       endif
 1747.       if ( mq + -iq == 0 ) then
 1748.          if ( mz >= 0 ) then
 1749.             if ( mx >= 0 ) then
 1748.                $I_L1748_114 = 0
 1748.                do
 1749.                   $I_L1749_102 = 0
 1749. !dir$ ivdep
 1749.                   do
 1750.                      a($I_L1749_102, my, $I_L1748_114) = 0.0
 1751.                      $I_L1749_102 = 1 + $I_L1749_102
 1751.                      if ( $I_L1749_102 >= 1 + mx ) exit
 1751.                   enddo
 1752.                   $I_L1748_114 = 1 + $I_L1748_114
 1752.                   if ( $I_L1748_114 >= 1 + mz ) exit
 1752.                enddo
 1752.             endif
 1752.          endif
 1752.       endif
 1754.       if ( ir == 0 ) then
 1755.          if ( my >= 0 ) then
 1756.             if ( mx >= 0 ) then
 1756.                $I_L1756_104 = 0
 1756. !dir$ ivdep
 1756.                do
 1757.                   a($I_L1756_104, 0, 0) = 0.0
 1758.                   $I_L1756_104 = 1 + $I_L1756_104
 1758.                   if ( $I_L1756_104 >= mx + my + my * mx + 1 ) exit
 1758.                enddo
 1758.             endif
 1758.          endif
 1758.       endif
 1761.       if ( mr + -ir == 0 ) then
 1762.          if ( my >= 0 ) then
 1763.             if ( mx >= 0 ) then
 1763.                $I_L1763_106 = 0
 1763. !dir$ ivdep
 1763.                do
 1764.                   a($I_L1763_106, 0, mz) = 0.0
 1765.                   $I_L1763_106 = 1 + $I_L1763_106
 1765.                   if ( $I_L1763_106 >= mx + my + my * mx + 1 ) exit
 1765.                enddo
 1765.             endif
 1765.          endif
 1765.       endif
 1770.       return
 1770.       end
 1770.       
 1772.       
 1772.       subroutine print_3d( u, ix, iy, iz )
 1772.       t$629 = mx
 1772.       t$630 = my
 1772.       t$631 = mz
 1772.       t$634 = 1 + mx
 1774.       t$635 = _zla( 0, 1 + mx )
 1772.       t$636 = _zla( 0, 1 + mx )
 1772.       t$637 = 1 + my
 1774.       t$638 = _zla( 0, 1 + my )
 1772.       t$639 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1772.       t$640 = 1 + mz
 1774.       t$641 = _zla( 0, 1 + mz )
 1772.       t$642 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1776.       if ( iz >= 0 ) then
 1778.          if ( iy < 0 ) then
 1776.             $I_L1776_20 = 0
 1776.             do
 1776.                k = $I_L1776_20
 1777.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1782.                $I_L1776_20 = 1 + $I_L1776_20
 1782.                if ( $I_L1776_20 >= 1 + iz ) exit
 1782.             enddo
 1782.          else if ( ix >= 0 ) then
 1776.             $I_L1776_30 = 0
 1776.             do
 1776.                k = $I_L1776_30
 1777.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1778.                $I_L1778_26 = 0
 1778.                do
 1779.                   t$649 = _zla( 0, ( 1 + ix ) )
 1779.                   t$652 = int( _alloc( 8 * _zla( 0, ( 1 + ix ) ) ), 8 )
 1779.                   $I_L1779_22 = 0
 1779. !dir$ ivdep
 1779.                   do
 1779.                      t$651(1 + $I_L1779_22) = u($I_L1779_22, $I_L1778_26, $I_L1776_30)
 1779.                      $I_L1779_22 = 1 + $I_L1779_22
 1779.                      if ( $I_L1779_22 >= 1 + ix ) exit
 1779.                   enddo
 1779.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, _zla( 0, 1 + ix ), 1 )), 0x4000300000000L ) ) )
 1779.                   _free( t$652 )
 1781.                   $I_L1778_26 = 1 + $I_L1778_26
 1781.                   if ( $I_L1778_26 >= 1 + iy ) exit
 1781.                enddo
 1782.                $I_L1776_30 = 1 + $I_L1776_30
 1782.                if ( $I_L1776_30 >= 1 + iz ) exit
 1782.             enddo
 1782.          else
 1776.             $I_L1776_28 = 0
 1776.             do
 1776.                k = $I_L1776_28
 1777.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1778.                $I_L1778_24 = 0
 1778.                do
 1779.                   t$649 = _zla( 0, ( 1 + ix ) )
 1779.                   t$652 = int( _alloc( 8 * _zla( 0, ( 1 + ix ) ) ), 8 )
 1779.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, _zla( 0, 1 + ix ), 1 )), 0x4000300000000L ) ) )
 1779.                   _free( t$652 )
 1781.                   $I_L1778_24 = 1 + $I_L1778_24
 1781.                   if ( $I_L1778_24 >= 1 + iy ) exit
 1781.                enddo
 1782.                $I_L1776_28 = 1 + $I_L1776_28
 1782.                if ( $I_L1776_28 >= 1 + iz ) exit
 1782.             enddo
 1782.          endif
 1782.       endif
 1784.       return
 1784.       end
 1784.       
 1787.       
 1787.       subroutine test_alts( ukf, rkf, h, sigma, nsmooth, rf, iz, minig, maxig )
 1787.       t$655 = mx
 1787.       t$656 = my
 1787.       t$657 = mz
 1787.       t$658 = 1 + mx
 1791.       t$659 = _zla( 0, 1 + mx )
 1787.       t$660 = _zla( 0, 1 + mx )
 1787.       t$661 = 1 + my
 1791.       t$662 = _zla( 0, 1 + my )
 1787.       t$663 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1787.       t$664 = 1 + mz
 1791.       t$665 = _zla( 0, 1 + mz )
 1787.       t$666 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1791.       t$669 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1791.       t$670 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1791.       t$672 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 16
 1791.       t$673 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 16
 1791.       t$675 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 24
 1787.       t$667 = int( _alloc( _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 24 ), 8 )
 1791.       t$668 = t$667
 1791.       t$671 = t$667 + _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1791.       t$674 = t$667 + _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 16
 1797.       $mm1_S1 = mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1
 1807.       $I_L1807_106 = 0
 1807.       do
 1807.          nsmoth = ( nsmooth + $I_L1807_106 )
 1808.          ipa$2729 = loc( rfc(0, 0, 0) )
 1808.          a = _copyin( rfc(0, 0, 0) )
 1808.          if ( $mm1_S1 > 0 ) then
 1808.             $I_L1808_60 = 0
 1808. !dir$ ivdep
 1808.             do
 1808.                a(1 + $I_L1808_60) = rf(1 + $I_L1808_60)
 1808.                $I_L1808_60 = 1 + $I_L1808_60
 1808.                if ( $I_L1808_60 >= $mm1_S1 ) exit
 1808.             enddo
 1808.          endif
 1808.          rfc(0, 0, 0) = _copyout( a )
 1809.          ipa$2740 = loc( v(0, 0, 0) )
 1809.          a = _copyin( v(0, 0, 0) )
 1809.          if ( $mm1_S1 > 0 ) then
 1809.             $I_L1809_62 = 0
 1809. !dir$ ivdep
 1809.             do
 1809.                a(1 + $I_L1809_62) = ukf(1 + $I_L1809_62)
 1809.                $I_L1809_62 = 1 + $I_L1809_62
 1809.                if ( $I_L1809_62 >= $mm1_S1 ) exit
 1809.             enddo
 1809.          endif
 1809.          v(0, 0, 0) = _copyout( a )
 1811.          t$680 = ( nsmooth + $I_L1807_106 )
 1811.          ipa$2750 = 0
 1811.          ipa$2751 = 3
 1811.          call smooth_m( v(0, 0, 0), rkf(1), mx, my, mz, h, sigma, t$680, rfc(0, 0, 0), iz, ipa$2750, ipa$2751 )
 1816.          if ( maxig + -minig >= 0 ) then
 1816.             $I_L1816_104 = 0
 1816.             do
 1816.                ig = ( minig + $I_L1816_104 )
 1817.                ipa$2915 = loc( rfc(0, 0, 0) )
 1817.                a = _copyin( rfc(0, 0, 0) )
 1817.                if ( $mm1_S1 > 0 ) then
 1817.                   $I_L1817_64 = 0
 1817. !dir$ ivdep
 1817.                   do
 1817.                      a(1 + $I_L1817_64) = rf(1 + $I_L1817_64)
 1817.                      $I_L1817_64 = 1 + $I_L1817_64
 1817.                      if ( $I_L1817_64 >= $mm1_S1 ) exit
 1817.                   enddo
 1817.                endif
 1817.                rfc(0, 0, 0) = _copyout( a )
 1818.                ipa$2926 = loc( w(0, 0, 0) )
 1818.                a = _copyin( w(0, 0, 0) )
 1818.                if ( $mm1_S1 > 0 ) then
 1818.                   $I_L1818_66 = 0
 1818. !dir$ ivdep
 1818.                   do
 1818.                      a(1 + $I_L1818_66) = ukf(1 + $I_L1818_66)
 1818.                      $I_L1818_66 = 1 + $I_L1818_66
 1818.                      if ( $I_L1818_66 >= $mm1_S1 ) exit
 1818.                   enddo
 1818.                endif
 1818.                w(0, 0, 0) = _copyout( a )
 1820.                t$680 = ( nsmooth + $I_L1807_106 )
 1820.                t$685 = ( minig + $I_L1816_104 )
 1820.                ipa$2936 = 3
 1820.                call smooth_m( w(0, 0, 0), rkf(1), mx, my, mz, h, sigma, t$680, rfc(0, 0, 0), iz, t$685, ipa$2936 )
 1822.                if ( nid == 6 ) then
 1823.                   $t_S7 = mateq( v(0, 0, 0), w(0, 0, 0), 0 )
 1823.                   if ( $t_S7 == 0 ) then
 1827.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': igs = ', 0x800600000000L ), _iotype( ig, 0x2000200000000L ), _iotype( ' gave a different', 0x800600000000L ), _iotype( ' result than igs = 0 for nsmooth = ', 0x800600000000L ), _iotype( nsmoth, 0x2000200000000L ), _iotype( ' (not including faces!):', 0x800600000000L ) ) )
 1830.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': result of igs = 0:', 0x800600000000L ) ) )
 1831.                      t$690 = _zla( 0, ( -1 + mx ) )
 1831.                      t$691 = _zla( 0, ( -1 + my ) )
 1831.                      t$692 = _zla( 0, ( -1 + mz ) )
 1831.                      t$697 = int( _alloc( _zla( 0, ( -1 + mx ) ) * _zla( 0, ( -1 + my ) ) * _zla( 0, ( -1 + mz ) ) * 8 ), 8 )
 1831.                      if ( and( and( 1 + -mz, 1 + -my ), 1 + -mx ) < 0 ) then
 1831.                         $I_L1831_96 = 0
 1831.                         do
 1831.                            $I_L1831_84 = 0
 1831.                            do
 1831.                               $I_L1831_68 = 0
 1831. !dir$ ivdep
 1831.                               do
 1831.                                  t$696(1 + $I_L1831_68, 1 + $I_L1831_84, 1 + $I_L1831_96) = v(1 + $I_L1831_68, 1 + $I_L1831_84, 1 + $I_L1831_96)
 1831.                                  $I_L1831_68 = 1 + $I_L1831_68
 1831.                                  if ( $I_L1831_68 >= -1 + mx ) exit
 1831.                               enddo
 1831.                               $I_L1831_84 = 1 + $I_L1831_84
 1831.                               if ( $I_L1831_84 >= -1 + my ) exit
 1831.                            enddo
 1831.                            $I_L1831_96 = 1 + $I_L1831_96
 1831.                            if ( $I_L1831_96 >= -1 + mz ) exit
 1831.                         enddo
 1831.                      endif
 1831.                      ipa$3101 = loc( t$696(1, 1, 1) )
 1831.                      u = _copyin( t$696(1, 1, 1) )
 1831.                      t$629 = mx
 1831.                      t$630 = my
 1831.                      t$631 = mz
 1831.                      t$634 = 1 + mx
 1831.                      t$635 = _zla( 0, 1 + mx )
 1831.                      t$636 = _zla( 0, 1 + mx )
 1831.                      t$637 = 1 + my
 1831.                      t$638 = _zla( 0, 1 + my )
 1831.                      t$639 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1831.                      t$640 = 1 + mz
 1831.                      t$641 = _zla( 0, 1 + mz )
 1831.                      t$642 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1831.                      $I_L1831_92 = 0
 1831.                      do
 1831.                         k = $I_L1831_92
 1831.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1831.                         $I_L1831_80 = 0
 1831.                         do
 1831.                            t$649 = 6
 1831.                            t$652 = int( _alloc( 48 ), 8 )
 1831.                            $I_L1831_70 = 0
 1831. !dir$ ivdep
 1831.                            do
 1831.                               t$651(1 + $I_L1831_70) = u($I_L1831_70, $I_L1831_80, $I_L1831_92)
 1831.                               $I_L1831_70 = 1 + $I_L1831_70
 1831.                               if ( $I_L1831_70 >= 6 ) exit
 1831.                            enddo
 1831.                            _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, 6, 1 )), 0x4000300000000L ) ) )
 1831.                            _free( t$652 )
 1831.                            $I_L1831_80 = 1 + $I_L1831_80
 1831.                            if ( $I_L1831_80 >= 3 ) exit
 1831.                         enddo
 1831.                         $I_L1831_92 = 1 + $I_L1831_92
 1831.                         if ( $I_L1831_92 >= 3 ) exit
 1831.                      enddo
 1831.                      t$696(1, 1, 1) = _copyout( u )
 1831.                      if ( and( and( 1 + -mz, 1 + -my ), 1 + -mx ) < 0 ) then
 1831.                         $I_L1831_98 = 0
 1831.                         do
 1831.                            $I_L1831_86 = 0
 1831.                            do
 1831.                               $I_L1831_72 = 0
 1831. !dir$ ivdep
 1831.                               do
 1831.                                  v(1 + $I_L1831_72, 1 + $I_L1831_86, 1 + $I_L1831_98) = t$696(1 + $I_L1831_72, 1 + $I_L1831_86, 1 + $I_L1831_98)
 1831.                                  $I_L1831_72 = 1 + $I_L1831_72
 1831.                                  if ( $I_L1831_72 >= -1 + mx ) exit
 1831.                               enddo
 1831.                               $I_L1831_86 = 1 + $I_L1831_86
 1831.                               if ( $I_L1831_86 >= -1 + my ) exit
 1831.                            enddo
 1831.                            $I_L1831_98 = 1 + $I_L1831_98
 1831.                            if ( $I_L1831_98 >= -1 + mz ) exit
 1831.                         enddo
 1831.                      endif
 1831.                      _free( t$697 )
 1832.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': result of igs = ', 0x800600000000L ), _iotype( ig, 0x2000200000000L ), _iotype( ':', 0x800600000000L ) ) )
 1833.                      t$701 = _zla( 0, ( -1 + mx ) )
 1833.                      t$702 = _zla( 0, ( -1 + my ) )
 1833.                      t$703 = _zla( 0, ( -1 + mz ) )
 1833.                      t$708 = int( _alloc( _zla( 0, ( -1 + mx ) ) * _zla( 0, ( -1 + my ) ) * _zla( 0, ( -1 + mz ) ) * 8 ), 8 )
 1833.                      if ( and( and( 1 + -mz, 1 + -my ), 1 + -mx ) < 0 ) then
 1833.                         $I_L1833_100 = 0
 1833.                         do
 1833.                            $I_L1833_88 = 0
 1833.                            do
 1833.                               $I_L1833_74 = 0
 1833. !dir$ ivdep
 1833.                               do
 1833.                                  t$707(1 + $I_L1833_74, 1 + $I_L1833_88, 1 + $I_L1833_100) = w(1 + $I_L1833_74, 1 + $I_L1833_88, 1 + $I_L1833_100)
 1833.                                  $I_L1833_74 = 1 + $I_L1833_74
 1833.                                  if ( $I_L1833_74 >= -1 + mx ) exit
 1833.                               enddo
 1833.                               $I_L1833_88 = 1 + $I_L1833_88
 1833.                               if ( $I_L1833_88 >= -1 + my ) exit
 1833.                            enddo
 1833.                            $I_L1833_100 = 1 + $I_L1833_100
 1833.                            if ( $I_L1833_100 >= -1 + mz ) exit
 1833.                         enddo
 1833.                      endif
 1833.                      ipa$3114 = loc( t$707(1, 1, 1) )
 1833.                      u = _copyin( t$707(1, 1, 1) )
 1833.                      t$629 = mx
 1833.                      t$630 = my
 1833.                      t$631 = mz
 1833.                      t$634 = 1 + mx
 1833.                      t$635 = _zla( 0, 1 + mx )
 1833.                      t$636 = _zla( 0, 1 + mx )
 1833.                      t$637 = 1 + my
 1833.                      t$638 = _zla( 0, 1 + my )
 1833.                      t$639 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1833.                      t$640 = 1 + mz
 1833.                      t$641 = _zla( 0, 1 + mz )
 1833.                      t$642 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1833.                      $I_L1833_94 = 0
 1833.                      do
 1833.                         k = $I_L1833_94
 1833.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1833.                         $I_L1833_82 = 0
 1833.                         do
 1833.                            t$649 = 6
 1833.                            t$652 = 48
 1833.                            $I_L1833_76 = 0
 1833. !dir$ ivdep
 1833.                            do
 1833.                               t$651(1 + $I_L1833_76) = u($I_L1833_76, $I_L1833_82, $I_L1833_94)
 1833.                               $I_L1833_76 = 1 + $I_L1833_76
 1833.                               if ( $I_L1833_76 >= 6 ) exit
 1833.                            enddo
 1833.                            _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, 6, 1 )), 0x4000300000000L ) ) )
 1833.                            $I_L1833_82 = 1 + $I_L1833_82
 1833.                            if ( $I_L1833_82 >= 3 ) exit
 1833.                         enddo
 1833.                         t$652 = 48
 1833.                         $I_L1833_94 = 1 + $I_L1833_94
 1833.                         if ( $I_L1833_94 >= 3 ) exit
 1833.                      enddo
 1833.                      t$707(1, 1, 1) = _copyout( u )
 1833.                      if ( and( and( 1 + -mz, 1 + -my ), 1 + -mx ) < 0 ) then
 1833.                         $I_L1833_102 = 0
 1833.                         do
 1833.                            $I_L1833_90 = 0
 1833.                            do
 1833.                               $I_L1833_78 = 0
 1833. !dir$ ivdep
 1833.                               do
 1833.                                  w(1 + $I_L1833_78, 1 + $I_L1833_90, 1 + $I_L1833_102) = t$707(1 + $I_L1833_78, 1 + $I_L1833_90, 1 + $I_L1833_102)
 1833.                                  $I_L1833_78 = 1 + $I_L1833_78
 1833.                                  if ( $I_L1833_78 >= -1 + mx ) exit
 1833.                               enddo
 1833.                               $I_L1833_90 = 1 + $I_L1833_90
 1833.                               if ( $I_L1833_90 >= -1 + my ) exit
 1833.                            enddo
 1833.                            $I_L1833_102 = 1 + $I_L1833_102
 1833.                            if ( $I_L1833_102 >= -1 + mz ) exit
 1833.                         enddo
 1833.                      endif
 1833.                      _free( t$708 )
 1833.                   endif
 1833.                endif
 1840.                $I_L1816_104 = 1 + $I_L1816_104
 1840.                if ( $I_L1816_104 >= maxig + -minig + 1 ) exit
 1840.             enddo
 1840.          endif
 1842.          $I_L1807_106 = 1 + $I_L1807_106
 1842.          if ( $I_L1807_106 >= 2 ) exit
 1842.       enddo
 1787.       _free( t$667 )
 1843.       return
 1843.       end
 1843.       
 1847.       
 1847.       subroutine test_xchange( u, minjg, maxjg )
 1847.       t$711 = mx
 1847.       t$712 = my
 1847.       t$713 = mz
 1847.       t$714 = 1 + mx
 1852.       t$715 = _zla( 0, 1 + mx )
 1847.       t$716 = _zla( 0, 1 + mx )
 1847.       t$717 = 1 + my
 1852.       t$718 = _zla( 0, 1 + my )
 1847.       t$719 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1847.       t$720 = 1 + mz
 1852.       t$721 = _zla( 0, 1 + mz )
 1847.       t$722 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1852.       t$725 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1852.       t$726 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1852.       t$728 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 16
 1847.       t$723 = int( _alloc( _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 16 ), 8 )
 1852.       t$724 = t$723
 1852.       t$727 = t$723 + _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz ) * 8
 1858.       $mm1_S2 = mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1
 1868.       ipa$3127 = loc( v(0, 0, 0) )
 1868.       a = _copyin( v(0, 0, 0) )
 1868.       if ( mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz >= 0 ) then
 1868.          $I_L1868_46 = 0
 1868. !dir$ ivdep
 1868.          do
 1868.             a(1 + $I_L1868_46) = u(1 + $I_L1868_46)
 1868.             $I_L1868_46 = 1 + $I_L1868_46
 1868.             if ( $I_L1868_46 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
 1868.          enddo
 1868.       endif
 1868.       v(0, 0, 0) = _copyout( a )
 1870.       ipa$3133 = 0
 1870.       call xchange0( v(0, 0, 0), ipa$3133 )
 1875.       if ( maxjg + -minjg < 0 ) then
 1875.          goto 10
 1875.       else if ( $mm1_S2 > 0 ) then
 1875.          $I_L1875_56 = 0
 1875.          do
 1876.             ipa$3157 = loc( w(0, 0, 0) )
 1876.             a = _copyin( w(0, 0, 0) )
 1876.             $I_L1876_48 = 0
 1876. !dir$ ivdep
 1876.             do
 1876.                a(1 + $I_L1876_48) = u(1 + $I_L1876_48)
 1876.                $I_L1876_48 = 1 + $I_L1876_48
 1876.                if ( $I_L1876_48 >= $mm1_S2 ) exit
 1876.             enddo
 1876.             w(0, 0, 0) = _copyout( a )
 1878.             t$733 = ( minjg + $I_L1875_56 )
 1878.             call xchange0( w(0, 0, 0), t$733 )
 1880.             if ( nid == 6 ) then
 1881.                $t_S4 = mateq( v(0, 0, 0), w(0, 0, 0), 1 )
 1881.                if ( $t_S4 == 0 ) then
 1875.                   jg = ( minjg + $I_L1875_56 )
 1875.                   goto 20
 1875.                endif
 1895.                $I_L1875_56 = 1 + $I_L1875_56
 1894.             else
 1894.             endif
 1895.             if ( $I_L1875_56 >= maxjg + -minjg + 1 ) exit
 1895.          enddo
 1895.          goto 10
 1895.       else
 1875.          $I_L1875_50 = 0
 1875.          do
 1876.             ipa$3157 = loc( w(0, 0, 0) )
 1876.             a = _copyin( w(0, 0, 0) )
 1876.             w(0, 0, 0) = _copyout( a )
 1878.             t$733 = ( minjg + $I_L1875_50 )
 1878.             call xchange0( w(0, 0, 0), t$733 )
 1880.             if ( nid == 6 ) then
 1881.                $t_S4 = mateq( v(0, 0, 0), w(0, 0, 0), 1 )
 1881.                if ( $t_S4 == 0 ) then
 1875.                   jg = ( minjg + $I_L1875_50 )
 1875.    20             continue
 1884.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': jgx = ', 0x800600000000L ), _iotype( jg, 0x2000200000000L ), _iotype( ' gave a different', 0x800600000000L ), _iotype( ' result than jgx = 0 (not including edges!):', 0x800600000000L ) ) )
 1886.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': result of jgx = 0:', 0x800600000000L ) ) )
 1887.                   ipa$3187 = loc( v(0, 0, 0) )
 1887.                   u = _copyin( v(0, 0, 0) )
 1887.                   t$629 = mx
 1887.                   t$630 = my
 1887.                   t$631 = mz
 1887.                   t$634 = 1 + mx
 1887.                   t$635 = _zla( 0, 1 + mx )
 1887.                   t$636 = _zla( 0, 1 + mx )
 1887.                   t$637 = 1 + my
 1887.                   t$638 = _zla( 0, 1 + my )
 1887.                   t$639 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1887.                   t$640 = 1 + mz
 1887.                   t$641 = _zla( 0, 1 + mz )
 1887.                   t$642 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1887.                   $I_L1887_62 = 0
 1887.                   do
 1887.                      k = $I_L1887_62
 1887.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1887.                      $I_L1887_58 = 0
 1887.                      do
 1887.                         t$649 = 6
 1887.                         t$652 = int( _alloc( 48 ), 8 )
 1887.                         $I_L1887_52 = 0
 1887. !dir$ ivdep
 1887.                         do
 1887.                            t$651(1 + $I_L1887_52) = u($I_L1887_52, $I_L1887_58, $I_L1887_62)
 1887.                            $I_L1887_52 = 1 + $I_L1887_52
 1887.                            if ( $I_L1887_52 >= 6 ) exit
 1887.                         enddo
 1887.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, 6, 1 )), 0x4000300000000L ) ) )
 1887.                         _free( t$652 )
 1887.                         $I_L1887_58 = 1 + $I_L1887_58
 1887.                         if ( $I_L1887_58 >= 3 ) exit
 1887.                      enddo
 1887.                      $I_L1887_62 = 1 + $I_L1887_62
 1887.                      if ( $I_L1887_62 >= 3 ) exit
 1887.                   enddo
 1887.                   v(0, 0, 0) = _copyout( u )
 1888.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': result of jgx =', 0x800600000000L ), _iotype( jg, 0x2000200000000L ), _iotype( ':', 0x800600000000L ) ) )
 1889.                   ipa$3200 = loc( w(0, 0, 0) )
 1889.                   u = _copyin( w(0, 0, 0) )
 1889.                   t$629 = mx
 1889.                   t$630 = my
 1889.                   t$631 = mz
 1889.                   t$634 = 1 + mx
 1889.                   t$635 = _zla( 0, 1 + mx )
 1889.                   t$636 = _zla( 0, 1 + mx )
 1889.                   t$637 = 1 + my
 1889.                   t$638 = _zla( 0, 1 + my )
 1889.                   t$639 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1889.                   t$640 = 1 + mz
 1889.                   t$641 = _zla( 0, 1 + mz )
 1889.                   t$642 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1889.                   $I_L1889_64 = 0
 1889.                   do
 1889.                      k = $I_L1889_64
 1889.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k = ', 0x800600000000L ), _iotype( k, 0x2000200000000L ) ) )
 1889.                      $I_L1889_60 = 0
 1889.                      do
 1889.                         t$649 = 6
 1889.                         t$652 = 48
 1889.                         $I_L1889_54 = 0
 1889. !dir$ ivdep
 1889.                         do
 1889.                            t$651(1 + $I_L1889_54) = u($I_L1889_54, $I_L1889_60, $I_L1889_64)
 1889.                            $I_L1889_54 = 1 + $I_L1889_54
 1889.                            if ( $I_L1889_54 >= 6 ) exit
 1889.                         enddo
 1889.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,11), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$651(+:( 1, 6, 1 )), 0x4000300000000L ) ) )
 1889.                         $I_L1889_60 = 1 + $I_L1889_60
 1889.                         if ( $I_L1889_60 >= 3 ) exit
 1889.                      enddo
 1889.                      t$652 = 48
 1889.                      $I_L1889_64 = 1 + $I_L1889_64
 1889.                      if ( $I_L1889_64 >= 3 ) exit
 1889.                   enddo
 1889.                   w(0, 0, 0) = _copyout( u )
 1891.                    _substr(t$735,1,4) = ' '
 1891.                   call _stop2(  _substr(t$735,1,1), 0 )
 1891.                   goto 30
 1891.                endif
 1895.                $I_L1875_50 = 1 + $I_L1875_50
 1894.             else
 1894.             endif
 1895.             if ( $I_L1875_50 >= maxjg + -minjg + 1 ) exit
 1895.          enddo
 1895.    10    continue
 1847.          _free( t$723 )
 1847.       endif
 1847.    30 continue
 1896.       return
 1896.       end
 1896.       
 1899.       
 1899.       subroutine xchange0( u, jgx )
 1909.       if ( jgx == 0 ) then
 1910.          call xchange_3d_old( u(1), b1(1), b2(1), bo(1) )
 1911.       else if ( jgx == 1 ) then
 1912.          call xchange_3d( u(1) )
 1912.       else if ( jgx == 2 ) then
 1914.          call xchange_3d_async( u(1) )
 1914.       else if ( nid == 1 ) then
 1916.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ), _iotype( ': no xchange0 func ', 0x800600000000L ), _iotype( 'corresponding to jgx = ', 0x800600000000L ), _iotype( jgx, 0x2000200000000L ), _iotype( '!', 0x800600000000L ) ) )
 1918.          call exitt
 1918.       endif
 1923.       return
 1923.       end
 1923.       
 1925.       
 1925.       subroutine xchange_3d_async( u )
 1925.       t$739 = mx
 1925.       t$740 = my
 1925.       t$741 = mz
 1925.       t$742 = 1 + mx
 1927.       t$743 = _zla( 0, 1 + mx )
 1925.       t$744 = _zla( 0, 1 + mx )
 1925.       t$745 = 1 + my
 1927.       t$746 = _zla( 0, 1 + my )
 1925.       t$747 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1925.       t$748 = 1 + mz
 1927.       t$749 = _zla( 0, 1 + mz )
 1925.       t$750 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 1942.       reqs(1) = irecv2( mtagrl, u(0, 0, 0), lrtype, 1, nidl )
 1943.       reqs(4) = isend1( mtagsl, u(1, 0, 0), lrtype, 1, nidl )
 1945.       reqs(3) = irecv2( mtagrr, u(mx, 0, 0), lrtype, 1, nidr )
 1946.       reqs(2) = isend1( mtagsr, u(-1 + mx, 0, 0), lrtype, 1, nidr )
 1952.       reqs(5) = irecv2( mtagrd, u(0, 0, 0), udtype, 1, nidd )
 1953.       reqs(8) = isend1( mtagsd, u(0, 1, 0), udtype, 1, nidd )
 1955.       reqs(7) = irecv2( mtagru, u(0, my, 0), udtype, 1, nidu )
 1956.       reqs(6) = isend1( mtagsu, u(0, -1 + my, 0), udtype, 1, nidu )
 1969.       isz = my + mx * my + mx + 1
 1971.       reqs(9) = irecv2( mtagrb, u(0, 0, 0), mgreal, isz, nidb )
 1972.       reqs(12) = isend1( mtagsb, u(0, 0, 1), mgreal, isz, nidb )
 1974.       reqs(11) = irecv2( mtagrf, u(0, 0, mz), mgreal, isz, nidf )
 1975.       reqs(10) = isend1( mtagsf, u(0, 0, -1 + mz), mgreal, isz, nidf )
 1980.       call msgwaitall( reqs(1), 12 )
 1986.       return
 1986.       end
 1986.       
 1988.       
 1988.       subroutine xchange_3d( u )
 1988.       t$753 = mx
 1988.       t$754 = my
 1988.       t$755 = mz
 1988.       t$756 = 1 + mx
 1993.       t$757 = _zla( 0, 1 + mx )
 1988.       t$758 = _zla( 0, 1 + mx )
 1988.       t$759 = 1 + my
 1993.       t$760 = _zla( 0, 1 + my )
 1988.       t$761 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 1988.       t$762 = 1 + mz
 1993.       t$763 = _zla( 0, 1 + mz )
 1988.       t$764 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 2006.       imsg_left = irecv2( mtagrl, u(0, 0, 0), lrtype, 1, nidl )
 2010.       imsg_right = irecv2( mtagrr, u(mx, 0, 0), lrtype, 1, nidr )
 2018.       call csend1( mtagsl, u(1, 0, 0), lrtype, 1, nidl )
 2024.       call csend1( mtagsr, u(-1 + mx, 0, 0), lrtype, 1, nidr )
 2027.       call msgwait( imsg_right )
 2032.       call msgwait( imsg_left )
 2046.       imsg_down = irecv2( mtagrd, u(0, 0, 0), udtype, 1, nidd )
 2049.       imsg_up = irecv2( mtagru, u(0, my, 0), udtype, 1, nidu )
 2062.       call csend1( mtagsd, u(0, 1, 0), udtype, 1, nidd )
 2074.       call csend1( mtagsu, u(0, -1 + my, 0), udtype, 1, nidu )
 2077.       call msgwait( imsg_up )
 2087.       call msgwait( imsg_down )
 2099.       isz = my + mx * my + mx + 1
 2111.       imsg_back = irecv2( mtagrb, u(0, 0, 0), mgreal, isz, nidb )
 2112.       imsg_front = irecv2( mtagrf, u(0, 0, mz), mgreal, isz, nidf )
 2117.       call csend1( mtagsb, u(0, 0, 1), mgreal, isz, nidb )
 2118.       call csend1( mtagsf, u(0, 0, -1 + mz), mgreal, isz, nidf )
 2121.       call msgwait( imsg_front )
 2122.       call msgwait( imsg_back )
 2125.       return
 2125.       end
 2125.       
 2127.       
 2127.       subroutine xchange_3d_old( u, buff1, buff2, buffo )
 2127.       t$767 = mx
 2127.       t$768 = my
 2127.       t$769 = mz
 2127.       t$770 = 1 + mx
 2131.       t$771 = _zla( 0, 1 + mx )
 2127.       t$772 = _zla( 0, 1 + mx )
 2127.       t$773 = 1 + my
 2131.       t$774 = _zla( 0, 1 + my )
 2127.       t$775 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 2127.       t$776 = 1 + mz
 2131.       t$777 = _zla( 0, 1 + mz )
 2127.       t$778 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 2135.       $myz_S0 = mz + my * mz + my + 1
 2136.       $myz1_S1 = my + mz + my * mz
 2138.       len = mz * wdsize + my * mz * wdsize + my * wdsize + wdsize
 2139.       imsg_left = irecv0( mtagrl, buff1(0), len )
 2140.       imsg_right = irecv0( mtagrr, buff2(0), len )
 2141.       call gsync
 2143.       len = wdsize * $myz_S0
 2144.       if ( $myz1_S1 >= 0 ) then
 2144.          $I_L2144_76 = 0
 2144. !dir$ ivdep
 2144.          do
 2145.             buffo($I_L2144_76) = u(1, $I_L2144_76, 0)
 2146.             $I_L2144_76 = 1 + $I_L2144_76
 2146.             if ( $I_L2144_76 >= $myz_S0 ) exit
 2146.          enddo
 2146.       endif
 2147.       call csend0( mtagsl, buffo(0), len, nidl, 0 )
 2149.       if ( $myz1_S1 >= 0 ) then
 2149.          $I_L2149_78 = 0
 2149. !dir$ ivdep
 2149.          do
 2150.             buffo($I_L2149_78) = u(-1 + mx, $I_L2149_78, 0)
 2151.             $I_L2149_78 = 1 + $I_L2149_78
 2151.             if ( $I_L2149_78 >= $myz_S0 ) exit
 2151.          enddo
 2151.       endif
 2152.       call csend0( mtagsr, buffo(0), len, nidr, 0 )
 2154.       call msgwait( imsg_right )
 2155.       if ( $myz1_S1 >= 0 ) then
 2155.          $I_L2155_80 = 0
 2155. !dir$ ivdep
 2155.          do
 2156.             u(mx, $I_L2155_80, 0) = buff2($I_L2155_80)
 2157.             $I_L2155_80 = 1 + $I_L2155_80
 2157.             if ( $I_L2155_80 >= $myz_S0 ) exit
 2157.          enddo
 2157.       endif
 2159.       call msgwait( imsg_left )
 2160.       if ( $myz1_S1 >= 0 ) then
 2160.          $I_L2160_82 = 0
 2160. !dir$ ivdep
 2160.          do
 2161.             u(0, $I_L2160_82, 0) = buff1($I_L2160_82)
 2162.             $I_L2160_82 = 1 + $I_L2160_82
 2162.             if ( $I_L2160_82 >= $myz_S0 ) exit
 2162.          enddo
 2162.       endif
 2169.       len = mz * wdsize + mx * mz * wdsize + mx * wdsize + wdsize
 2170.       imsg_bot = irecv0( mtagrd, buff1(0), len )
 2171.       imsg_top = irecv0( mtagru, buff2(0), len )
 2172.       call gsync
 2175.       $l_S8 = 0
 2176.       if ( mz >= 0 ) then
 2177.          if ( mx >= 0 ) then
 2176.             $I_L2176_92 = 0
 2176. !dir$ ivdep
 2176.             do
 2177.                $I_L2177_84 = 0
 2177.                do
 2178.                   buffo($I_L2177_84 + $I_L2176_92 + mx * $I_L2176_92) = u($I_L2177_84, 1, $I_L2176_92)
 2180.                   $I_L2177_84 = 1 + $I_L2177_84
 2180.                   if ( $I_L2177_84 >= 1 + mx ) exit
 2180.                enddo
 2181.                $I_L2176_92 = 1 + $I_L2176_92
 2181.                if ( $I_L2176_92 >= 1 + mz ) exit
 2181.             enddo
 2179.             $l_S8 = ( mx + mz + mz * mx + 1 )
 2179.          endif
 2179.       endif
 2182.       len = wdsize * $l_S8
 2183.       call csend0( mtagsd, buffo(0), len, nidd, 0 )
 2185.       $l_S11 = 0
 2186.       if ( mz >= 0 ) then
 2187.          if ( mx >= 0 ) then
 2186.             $I_L2186_94 = 0
 2186. !dir$ ivdep
 2186.             do
 2187.                $I_L2187_86 = 0
 2187.                do
 2188.                   buffo($I_L2187_86 + $I_L2186_94 + mx * $I_L2186_94) = u($I_L2187_86, -1 + my, $I_L2186_94)
 2190.                   $I_L2187_86 = 1 + $I_L2187_86
 2190.                   if ( $I_L2187_86 >= 1 + mx ) exit
 2190.                enddo
 2191.                $I_L2186_94 = 1 + $I_L2186_94
 2191.                if ( $I_L2186_94 >= 1 + mz ) exit
 2191.             enddo
 2189.             $l_S11 = ( mx + mz + mz * mx + 1 )
 2189.          endif
 2189.       endif
 2192.       len = wdsize * $l_S11
 2193.       call csend0( mtagsu, buffo(0), len, nidu, 0 )
 2196.       call msgwait( imsg_top )
 2198.       if ( mz >= 0 ) then
 2199.          if ( mx >= 0 ) then
 2198.             $I_L2198_96 = 0
 2198. !dir$ ivdep
 2198.             do
 2199.                $I_L2199_88 = 0
 2199.                do
 2200.                   u($I_L2199_88, my, $I_L2198_96) = buff2($I_L2199_88 + $I_L2198_96 + mx * $I_L2198_96)
 2202.                   $I_L2199_88 = 1 + $I_L2199_88
 2202.                   if ( $I_L2199_88 >= 1 + mx ) exit
 2202.                enddo
 2203.                $I_L2198_96 = 1 + $I_L2198_96
 2203.                if ( $I_L2198_96 >= 1 + mz ) exit
 2203.             enddo
 2203.          endif
 2203.       endif
 2205.       call msgwait( imsg_bot )
 2207.       if ( mz >= 0 ) then
 2208.          if ( mx >= 0 ) then
 2207.             $I_L2207_98 = 0
 2207. !dir$ ivdep
 2207.             do
 2208.                $I_L2208_90 = 0
 2208.                do
 2209.                   u($I_L2208_90, 0, $I_L2207_98) = buff1($I_L2208_90 + $I_L2207_98 + mx * $I_L2207_98)
 2211.                   $I_L2208_90 = 1 + $I_L2208_90
 2211.                   if ( $I_L2208_90 >= 1 + mx ) exit
 2211.                enddo
 2212.                $I_L2207_98 = 1 + $I_L2207_98
 2212.                if ( $I_L2207_98 >= 1 + mz ) exit
 2212.             enddo
 2212.          endif
 2212.       endif
 2216.       len = my * wdsize + mx * my * wdsize + mx * wdsize + wdsize
 2217.       imsg_back = irecv0( mtagrb, u(0, 0, 0), len )
 2218.       imsg_front = irecv0( mtagrf, u(0, 0, mz), len )
 2219.       call gsync
 2221.       len = my * wdsize + mx * my * wdsize + mx * wdsize + wdsize
 2222.       call csend0( mtagsb, u(0, 0, 1), len, nidb, 0 )
 2223.       call csend0( mtagsf, u(0, 0, -1 + mz), len, nidf, 0 )
 2225.       call msgwait( imsg_front )
 2226.       call msgwait( imsg_back )
 2229.       return
 2229.       end
 2229.       
 2231.       
 2231.       subroutine xchange_2d( u, buff1, buff2, buffo )
 2231.       t$817 = mx
 2231.       t$818 = my
 2231.       t$819 = 1 + mx
 2236.       t$820 = _zla( 0, 1 + mx )
 2231.       t$821 = _zla( 0, 1 + mx )
 2231.       t$822 = 1 + my
 2236.       t$823 = _zla( 0, 1 + my )
 2231.       t$824 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 2241.       $myz_S0 = 1 + my
 2243.       len = wdsize + my * wdsize
 2244.       imsg_left = irecv0( mtagrl, buff1(0), len )
 2245.       imsg_right = irecv0( mtagrr, buff2(0), len )
 2246.       call gsync
 2248.       len = wdsize * $myz_S0
 2252.       if ( my >= 0 ) then
 2252.          $I_L2252_0 = 0
 2252. !dir$ ivdep
 2252.          do
 2252.             buffo($I_L2252_0) = u(1, $I_L2252_0)
 2252.             $I_L2252_0 = 1 + $I_L2252_0
 2252.             if ( $I_L2252_0 >= 1 + my ) exit
 2252.          enddo
 2252.       endif
 2253.       call csend0( mtagsl, buffo(0), len, nidl, 0 )
 2258.       if ( my >= 0 ) then
 2258.          $I_L2258_2 = 0
 2258. !dir$ ivdep
 2258.          do
 2258.             buffo($I_L2258_2) = u(-1 + mx, $I_L2258_2)
 2258.             $I_L2258_2 = 1 + $I_L2258_2
 2258.             if ( $I_L2258_2 >= 1 + my ) exit
 2258.          enddo
 2258.       endif
 2259.       call csend0( mtagsr, buffo(0), len, nidr, 0 )
 2261.       call msgwait( imsg_right )
 2265.       if ( my >= 0 ) then
 2265.          $I_L2265_4 = 0
 2265. !dir$ ivdep
 2265.          do
 2265.             u(mx, $I_L2265_4) = buff2($I_L2265_4)
 2265.             $I_L2265_4 = 1 + $I_L2265_4
 2265.             if ( $I_L2265_4 >= 1 + my ) exit
 2265.          enddo
 2265.       endif
 2267.       call msgwait( imsg_left )
 2271.       if ( my >= 0 ) then
 2271.          $I_L2271_6 = 0
 2271. !dir$ ivdep
 2271.          do
 2271.             u(0, $I_L2271_6) = buff1($I_L2271_6)
 2271.             $I_L2271_6 = 1 + $I_L2271_6
 2271.             if ( $I_L2271_6 >= 1 + my ) exit
 2271.          enddo
 2271.       endif
 2276.       len = wdsize + mx * wdsize
 2277.       imsg_bot = irecv0( mtagrd, u(0, 0), len )
 2278.       imsg_top = irecv0( mtagru, u(0, my), len )
 2279.       call gsync
 2282.       call csend0( mtagsd, u(0, 1), len, nidd, 0 )
 2283.       call csend0( mtagsu, u(0, -1 + my), len, nidu, 0 )
 2285.       call msgwait( imsg_bot )
 2286.       call msgwait( imsg_top )
 2289.       return
 2289.       end
 2289.       
 2291.       
 2291.       subroutine out_mgrid
 2297.       $t_S1 = -1 + np
 2297.       if ( np > 0 ) then
 2297.          $I_L2297_63 = 0
 2297.          do
 2298.             call gsync
 2299.             if ( nid + -$I_L2297_63 == 0 ) then
 2300.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ) ) )
 2301.                $_IOitem_P0(0) = ic
 2301.                $_IOitem_P0(1) = nid
 2301.                $_IOitem_P0(2) = ip
 2301.                $_IOitem_P0(3) = iq
 2301.                $_IOitem_P0(4) = ir
 2301.                $_IOitem_P0(5) = mp
 2301.                $_IOitem_P0(6) = mq
 2301.                $_IOitem_P0(7) = mr
 2301.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$828,  _substr(t$827,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2302.                $_IOitem_P1(0) = ic
 2302.                $_IOitem_P1(1) = nid
 2302.                $_IOitem_P1(2) = istx
 2302.                $_IOitem_P1(3) = isty
 2302.                $_IOitem_P1(4) = istz
 2302.                $_IOitem_P1(5) = iedx
 2302.                $_IOitem_P1(6) = iedy
 2302.                $_IOitem_P1(7) = iedz
 2302.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$830,  _substr(t$829,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P1(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2303.                $_IOitem_P2(0) = ic
 2303.                $_IOitem_P2(1) = nid
 2303.                $_IOitem_P2(2) = mx
 2303.                $_IOitem_P2(3) = my
 2303.                $_IOitem_P2(4) = mz
 2303.                $_IOitem_P2(5) = nx
 2303.                $_IOitem_P2(6) = ny
 2303.                $_IOitem_P2(7) = nz
 2303.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$832,  _substr(t$831,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P2(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2304.                $_IOitem_P3(0) = ic
 2304.                $_IOitem_P3(1) = nid
 2304.                $_IOitem_P3(2) = mtagsl
 2304.                $_IOitem_P3(3) = mtagsr
 2304.                $_IOitem_P3(4) = mtagsd
 2304.                $_IOitem_P3(5) = mtagsu
 2304.                $_IOitem_P3(6) = mtagsb
 2304.                $_IOitem_P3(7) = mtagsf
 2304.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$834,  _substr(t$833,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P3(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2305.                $_IOitem_P4(0) = ic
 2305.                $_IOitem_P4(1) = nid
 2305.                $_IOitem_P4(2) = mtagrl
 2305.                $_IOitem_P4(3) = mtagrr
 2305.                $_IOitem_P4(4) = mtagrd
 2305.                $_IOitem_P4(5) = mtagru
 2305.                $_IOitem_P4(6) = mtagrb
 2305.                $_IOitem_P4(7) = mtagrf
 2305.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$836,  _substr(t$835,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P4(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2306.                $_IOitem_P5(0) = ic
 2306.                $_IOitem_P5(1) = nid
 2306.                $_IOitem_P5(2) = nidl
 2306.                $_IOitem_P5(3) = nidr
 2306.                $_IOitem_P5(4) = nidd
 2306.                $_IOitem_P5(5) = nidu
 2306.                $_IOitem_P5(6) = nidb
 2306.                $_IOitem_P5(7) = nidf
 2306.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$838,  _substr(t$837,1,31), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P5(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2307.                $_IOitem_P6(0) = ic
 2307.                $_IOitem_P6(1) = nid
 2307.                $_IOitem_P6(2) = lev
 2307.                $_IOitem_P6(3) = istx
 2307.                $_IOitem_P6(4) = iedx
 2307.                $_IOitem_P6(5) = mx
 2307.                $_IOitem_P6(6) = ip
 2307.                $_IOitem_P6(7) = nx
 2307.                $_IOitem_P6(8) = np
 2307.                _fwrite( _clist( 0, 0, 2, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P6(:( 0, 8, 1 )), 0x2000200000000L ) ) )
 2307.                if ( istx <= iedx ) then
 2307.                   $I_i_57 = 0
 2307.                   do
 2307.                      $I_i_51 = 0
 2307. !dir$ shortloop32
 2307. !dir$ ivdep
 2307.                      do
 2307.                         $_IO_STRIP_P9($I_i_51) = ( istx + $I_i_51 + 32 * $I_i_57 )
 2307.                         $I_i_51 = 1 + $I_i_51
 2307.                         if ( $I_i_51 >= min( ( iedx + -istx + 1 ), 32 + 32 * $I_i_57 ) + -32 * $I_i_57 ) exit
 2307.                      enddo
 2307.                      _fwrite( _clist( 0, 0, 0, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IO_STRIP_P9(:( 0, ( min( iedx + -istx + 1, 32 + 32 * $I_i_57 ) + -32 * $I_i_57 + -1 ), 1 )), 0x2000200000000L ) ) )
 2307.                      $I_i_57 = 1 + $I_i_57
 2307.                      if ( $I_i_57 >= 1 + max( 0, -1 + _rsh( iedx + -istx + 32, 5 ) ) ) exit
 2307.                   enddo
 2307.                   goto 10
 2307.                else
 2307.    10             continue
 2307.                   _fwrite( _clist( 0, 0, 1, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 2307.                endif
 2308.                $_IOitem_P7(0) = ic
 2308.                $_IOitem_P7(1) = nid
 2308.                $_IOitem_P7(2) = lev
 2308.                $_IOitem_P7(3) = isty
 2308.                $_IOitem_P7(4) = iedy
 2308.                $_IOitem_P7(5) = my
 2308.                $_IOitem_P7(6) = iq
 2308.                $_IOitem_P7(7) = ny
 2308.                $_IOitem_P7(8) = np
 2308.                _fwrite( _clist( 0, 0, 2, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P7(:( 0, 8, 1 )), 0x2000200000000L ) ) )
 2308.                if ( isty <= iedy ) then
 2308.                   $I_i_59 = 0
 2308.                   do
 2308.                      $I_i_53 = 0
 2308. !dir$ shortloop32
 2308. !dir$ ivdep
 2308.                      do
 2308.                         $_IO_STRIP_P10($I_i_53) = ( isty + $I_i_53 + 32 * $I_i_59 )
 2308.                         $I_i_53 = 1 + $I_i_53
 2308.                         if ( $I_i_53 >= min( ( iedy + -isty + 1 ), 32 + 32 * $I_i_59 ) + -32 * $I_i_59 ) exit
 2308.                      enddo
 2308.                      _fwrite( _clist( 0, 0, 0, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IO_STRIP_P10(:( 0, ( min( iedy + -isty + 1, 32 + 32 * $I_i_59 ) + -32 * $I_i_59 + -1 ), 1 )), 0x2000200000000L ) ) )
 2308.                      $I_i_59 = 1 + $I_i_59
 2308.                      if ( $I_i_59 >= 1 + max( 0, -1 + _rsh( iedy + -isty + 32, 5 ) ) ) exit
 2308.                   enddo
 2308.                   goto 20
 2308.                else
 2308.    20             continue
 2308.                   _fwrite( _clist( 0, 0, 1, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 2308.                endif
 2309.                $_IOitem_P8(0) = ic
 2309.                $_IOitem_P8(1) = nid
 2309.                $_IOitem_P8(2) = lev
 2309.                $_IOitem_P8(3) = istz
 2309.                $_IOitem_P8(4) = iedz
 2309.                $_IOitem_P8(5) = mz
 2309.                $_IOitem_P8(6) = ir
 2309.                $_IOitem_P8(7) = nz
 2309.                $_IOitem_P8(8) = np
 2309.                _fwrite( _clist( 0, 0, 2, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P8(:( 0, 8, 1 )), 0x2000200000000L ) ) )
 2309.                if ( istz <= iedz ) then
 2309.                   $I_i_61 = 0
 2309.                   do
 2309.                      $I_i_55 = 0
 2309. !dir$ shortloop32
 2309. !dir$ ivdep
 2309.                      do
 2309.                         $_IO_STRIP_P11($I_i_55) = ( istz + $I_i_55 + 32 * $I_i_61 )
 2309.                         $I_i_55 = 1 + $I_i_55
 2309.                         if ( $I_i_55 >= min( ( iedz + -istz + 1 ), 32 + 32 * $I_i_61 ) + -32 * $I_i_61 ) exit
 2309.                      enddo
 2309.                      _fwrite( _clist( 0, 0, 0, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IO_STRIP_P11(:( 0, ( min( iedz + -istz + 1, 32 + 32 * $I_i_61 ) + -32 * $I_i_61 + -1 ), 1 )), 0x2000200000000L ) ) )
 2309.                      $I_i_61 = 1 + $I_i_61
 2309.                      if ( $I_i_61 >= 1 + max( 0, -1 + _rsh( iedz + -istz + 32, 5 ) ) ) exit
 2309.                   enddo
 2309.                   goto 30
 2309.                else
 2309.    30             continue
 2309.                   _fwrite( _clist( 0, 0, 1, 6, Null_Arg, Null_Arg, t$840,  _substr(t$839,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 2309.                endif
 2310.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nid, 0x2000200000000L ) ) )
 2310.             endif
 2312.             call gsync
 2313.             $I_L2297_63 = 1 + $I_L2297_63
 2313.             if ( $I_L2297_63 >= 1 + $t_S1 ) exit
 2313.          enddo
 2313.       endif
 2322.       ic = 1 + ic
 2325.       return
 2325.       end
 2325.       
 2327.       
 2327.       subroutine outmp( a, n, m, name4, u, w )
 2327.       t$845 = mx
 2327.       t$846 = my
 2327.       t$847 = mz
 2327.       t$855 = 1 + mx
 2330.       t$856 = _zla( 0, 1 + mx )
 2327.       t$857 = _zla( 0, 1 + mx )
 2327.       t$858 = 1 + my
 2330.       t$859 = _zla( 0, 1 + my )
 2327.       t$860 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 2327.       t$861 = 1 + mz
 2330.       t$862 = _zla( 0, 1 + mz )
 2327.       t$863 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 2327.       t$849 = nx
 2327.       t$850 = ny
 2327.       t$864 = 2 + nx
 2330.       t$865 = _zla( 0, 2 + nx )
 2327.       t$866 = _zla( 0, 2 + nx )
 2327.       t$867 = 1 + ny
 2330.       t$868 = _zla( 0, 1 + ny )
 2327.       t$869 = _zla( 0, 2 + nx ) * _zla( 0, 1 + ny )
 2327.       t$870 = _zla( 0, 1 + mz ) * _zla( 0, 2 + nx ) * _zla( 0, 1 + ny )
 2335.       $t_S1 = nx
 2335.       if ( nx >= 0 ) then
 2335.          $I_L2335_60 = 0
 2335.          do
 2336.             t$874 = $I_L2335_60
 2336.             call outm( a(0, 0, 0), t$874, n, m,  _substr(name4,1,4) )
 2337.             $I_L2335_60 = 1 + $I_L2335_60
 2337.             if ( $I_L2335_60 >= 1 + $t_S1 ) exit
 2337.          enddo
 2337.       endif
 2339.       mx10 = min( 18, -1 + mx )
 2341.       nn = ny * nz * 2 + nx * ny * nz + nx * nz + 2 * nz + nx * ny + 2 * ny + nx + 2
 2342.       ipa$3249 = loc( u(-1, 0, 0) )
 2342.       a = _copyin( u(-1, 0, 0) )
 2342.       if ( ny * nz * 2 + nx * ny * nz + nx * nz + 2 * nz + nx * ny + 2 * ny + nx + 2 > 0 ) then
 2342.          $I_L2342_62 = 0
 2342. !dir$ ivdep
 2342.          do
 2342.             a(1 + $I_L2342_62) = 0.0
 2342.             $I_L2342_62 = 1 + $I_L2342_62
 2342.             if ( $I_L2342_62 >= nx + 2 * ny + nx * ny + 2 * nz + nx * nz + ny * nz * 2 + nx * ny * nz + 2 ) exit
 2342.          enddo
 2342.       endif
 2342.       u(-1, 0, 0) = _copyout( a )
 2343.       ipa$3258 = loc( w(-1, 0, 0) )
 2343.       a = _copyin( w(-1, 0, 0) )
 2343.       if ( ny * nz * 2 + nx * ny * nz + nx * nz + 2 * nz + nx * ny + 2 * ny + nx + 2 > 0 ) then
 2343.          $I_L2343_64 = 0
 2343. !dir$ ivdep
 2343.          do
 2343.             a(1 + $I_L2343_64) = 0.0
 2343.             $I_L2343_64 = 1 + $I_L2343_64
 2343.             if ( $I_L2343_64 >= nx + 2 * ny + nx * ny + 2 * nz + nx * nz + ny * nz * 2 + nx * ny * nz + 2 ) exit
 2343.          enddo
 2343.       endif
 2343.       w(-1, 0, 0) = _copyout( a )
 2345.       if ( mx > 1 ) then
 2345.          if ( my > 1 ) then
 2345.             if ( mz > 1 ) then
 2348.                if ( iedz + -istz + -2 >= 0 ) then
 2352.                   if ( iedy + -isty + -2 >= 0 ) then
 2357.                      if ( iedx + -istx + -2 >= 0 ) then
 2348.                         $I_L2348_82 = 0
 2348.                         do
 2352.                            $I_L2352_80 = 0
 2352.                            do
 2357.                               $I_L2357_72 = 0
 2357. !dir$ ivdep
 2357.                               do
 2359.                                  u(istx + $I_L2357_72 + 1, isty + $I_L2352_80 + 1, istz + $I_L2348_82 + 1) = a(1 + $I_L2357_72, 1 + $I_L2352_80, 1 + $I_L2348_82)
 2360.                                  $I_L2357_72 = 1 + $I_L2357_72
 2360.                                  if ( $I_L2357_72 >= iedx + -istx + -1 ) exit
 2360.                               enddo
 2363.                               $I_L2352_80 = 1 + $I_L2352_80
 2363.                               if ( $I_L2352_80 >= iedy + -isty + -1 ) exit
 2363.                            enddo
 2352.                            $I_L2352_74 = 0
 2352. !dir$ ivdep
 2352.                            do
 2361.                               u(-1, isty + $I_L2352_74 + 1, istz + $I_L2348_82 + 1) = real( nid )
 2363.                               $I_L2352_74 = 1 + $I_L2352_74
 2363.                               if ( $I_L2352_74 >= iedy + -isty + -1 ) exit
 2363.                            enddo
 2365.                            $I_L2348_82 = 1 + $I_L2348_82
 2365.                            if ( $I_L2348_82 >= iedz + -istz + -1 ) exit
 2365.                         enddo
 2365.                      else
 2348.                         $I_L2348_78 = 0
 2348.                         do
 2352.                            $I_L2352_70 = 0
 2352. !dir$ ivdep
 2352.                            do
 2361.                               u(-1, isty + $I_L2352_70 + 1, istz + $I_L2348_78 + 1) = real( nid )
 2363.                               $I_L2352_70 = 1 + $I_L2352_70
 2363.                               if ( $I_L2352_70 >= iedy + -isty + -1 ) exit
 2363.                            enddo
 2365.                            $I_L2348_78 = 1 + $I_L2348_78
 2365.                            if ( $I_L2348_78 >= iedz + -istz + -1 ) exit
 2365.                         enddo
 2365.                      endif
 2365.                   endif
 2365.                endif
 2365.             endif
 2365.          endif
 2365.       endif
 2369.        _substr(t$887,1,4) = '+  '
 2369.       call gop( u(-1, 0, 0), w(-1, 0, 0),  _substr(t$887,1,3), nn )
 2371.       if ( nid == 1 ) then
 2372.          $_IOitem_P0(0) = n
 2372.          $_IOitem_P0(1) = m
 2372.          $_IOitem_P0(2) = mp
 2372.          $_IOitem_P0(3) = mq
 2372.          $_IOitem_P0(4) = mr
 2372.          $_IOitem_P0(5) = nx
 2372.          $_IOitem_P0(6) = ny
 2372.          $_IOitem_P0(7) = nz
 2372.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$852,  _substr(t$851,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( lev, 0x2000200000000L ), _iotype(  _substr(name4,1,4), 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 7, 1 )), 0x2000200000000L ) ) )
 2374.          if ( 1 + -nz < 0 ) then
 2376.             if ( 1 + -ny < 0 ) then
 2374.                $I_L2374_76 = 0
 2374.                do
 2375.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 2376.                   $I_L2376_66 = 0
 2376.                   do
 2378.                      $_IOitem_P1(0) = lev
 2378.                      $_IOitem_P1(1) = nz + -$I_L2374_76 + -1
 2378.                      $_IOitem_P1(2) = ny + -$I_L2376_66 + -1
 2378.                      $_IOitem_P1(3) = int( u(-1, ny + -$I_L2376_66 + -1, nz + -$I_L2374_76 + -1) )
 2378.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$854,  _substr(t$853,1,22), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P1(:( 0, 3, 1 )), 0x2000200000000L ), _iotype( u(:( 1, mx10, 1 ), ny + -$I_L2376_66 + -1, nz + -$I_L2374_76 + -1), 0x4000300000000L ) ) )
 2380.                      $I_L2376_66 = 1 + $I_L2376_66
 2380.                      if ( $I_L2376_66 >= -1 + ny ) exit
 2380.                   enddo
 2381.                   $I_L2374_76 = 1 + $I_L2374_76
 2381.                   if ( $I_L2374_76 >= -1 + nz ) exit
 2381.                enddo
 2381.             else
 2374.                $I_L2374_68 = 0
 2374.                do
 2375.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 2381.                   $I_L2374_68 = 1 + $I_L2374_68
 2381.                   if ( $I_L2374_68 >= -1 + nz ) exit
 2381.                enddo
 2381.             endif
 2381.          endif
 2381.       endif
 2384.       return
 2384.       end
 2384.       
 2386.       
 2386.       subroutine smooth_q( u, r, mx, my, mz, h, sigma, m, uo, iz )
 2389.       call smooth_m_jac3d_q( u(1), r(1), mx, my, mz, h, sigma, m, uo(1), iz )
 2392.       return
 2392.       end
 2392.       
 2394.       
 2394.       subroutine smooth_m_jac3d_q( u, r, mx, my, mz, h, sigma, m, o, izero )
 2394.       t$894 = mx
 2394.       t$895 = my
 2394.       t$896 = mz
 2394.       t$897 = 1 + mx
 2396.       t$898 = _zla( 0, 1 + mx )
 2394.       t$899 = _zla( 0, 1 + mx )
 2394.       t$900 = 1 + my
 2396.       t$901 = _zla( 0, 1 + my )
 2394.       t$902 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my )
 2394.       t$903 = 1 + mz
 2396.       t$904 = _zla( 0, 1 + mz )
 2394.       t$905 = _zla( 0, 1 + mx ) * _zla( 0, 1 + my ) * _zla( 0, 1 + mz )
 2399.       $h2_S0 = h * h
 2400.       $sa_S1 = ( 1.6666666666666666e-1 * sigma )
 2402.       if ( izero == 0 ) then
 2403.          if ( -1 + mz > 0 ) then
 2404.             if ( -1 + my > 0 ) then
 2405.                if ( -1 + mx > 0 ) then
 2403.                   $I_L2403_132 = 0
 2403.                   do
 2404.                      $I_L2404_120 = 0
 2404.                      do
 2405.                         $I_L2405_100 = 0
 2405. !dir$ ivdep
 2405.                         do
 2406.                            u(1 + $I_L2405_100, 1 + $I_L2404_120, 1 + $I_L2403_132) = $sa_S1 * $h2_S0 * r(1 + $I_L2405_100, 1 + $I_L2404_120, 1 + $I_L2403_132)
 2407.                            $I_L2405_100 = 1 + $I_L2405_100
 2407.                            if ( $I_L2405_100 >= -1 + mx ) exit
 2407.                         enddo
 2408.                         $I_L2404_120 = 1 + $I_L2404_120
 2408.                         if ( $I_L2404_120 >= -1 + my ) exit
 2408.                      enddo
 2409.                      $I_L2403_132 = 1 + $I_L2403_132
 2409.                      if ( $I_L2403_132 >= -1 + mz ) exit
 2409.                   enddo
 2409.                endif
 2409.             endif
 2409.          endif
 2410.          cflops = cflops + ( 2 * mx + 2 * my + mx * my * -2 + 2 * mz + mx * mz * -2 + my * mz * -2 + mx * my * mz * 2 + -2 )
 2410.       endif
 2414.       if ( izero + m + -2 >= 0 ) then
 2416.          if ( mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz >= 0 ) then
 2419.             if ( -1 + mz <= 0 ) then
 2414.                $I_L2414_126 = 0
 2414.                do
 2416.                   ipa$3291 = loc( o(0, 0, 0) )
 2416.                   a = _copyin( o(0, 0, 0) )
 2416.                   ipa$3293 = loc( u(0, 0, 0) )
 2416.                   b = _copyin( u(0, 0, 0) )
 2416.                   $I_L2416_108 = 0
 2416. !dir$ ivdep
 2416.                   do
 2416.                      a(1 + $I_L2416_108) = b(1 + $I_L2416_108)
 2416.                      $I_L2416_108 = 1 + $I_L2416_108
 2416.                      if ( $I_L2416_108 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
 2416.                   enddo
 2416.                   u(0, 0, 0) = _copyout( b )
 2416.                   o(0, 0, 0) = _copyout( a )
 2429.                   $I_L2414_126 = 1 + $I_L2414_126
 2429.                   if ( $I_L2414_126 >= izero + m + -1 ) exit
 2429.                enddo
 2429.             else if ( -1 + my <= 0 ) then
 2414.                $I_L2414_128 = 0
 2414.                do
 2416.                   ipa$3291 = loc( o(0, 0, 0) )
 2416.                   a = _copyin( o(0, 0, 0) )
 2416.                   ipa$3293 = loc( u(0, 0, 0) )
 2416.                   b = _copyin( u(0, 0, 0) )
 2416.                   $I_L2416_112 = 0
 2416. !dir$ ivdep
 2416.                   do
 2416.                      a(1 + $I_L2416_112) = b(1 + $I_L2416_112)
 2416.                      $I_L2416_112 = 1 + $I_L2416_112
 2416.                      if ( $I_L2416_112 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
 2416.                   enddo
 2416.                   u(0, 0, 0) = _copyout( b )
 2416.                   o(0, 0, 0) = _copyout( a )
 2429.                   $I_L2414_128 = 1 + $I_L2414_128
 2429.                   if ( $I_L2414_128 >= izero + m + -1 ) exit
 2429.                enddo
 2429.             else if ( -1 + mx > 0 ) then
 2414.                $I_L2414_138 = 0
 2414.                do
 2416.                   ipa$3291 = loc( o(0, 0, 0) )
 2416.                   a = _copyin( o(0, 0, 0) )
 2416.                   ipa$3293 = loc( u(0, 0, 0) )
 2416.                   b = _copyin( u(0, 0, 0) )
 2416.                   $I_L2416_102 = 0
 2416. !dir$ ivdep
 2416.                   do
 2416.                      a(1 + $I_L2416_102) = b(1 + $I_L2416_102)
 2416.                      $I_L2416_102 = 1 + $I_L2416_102
 2416.                      if ( $I_L2416_102 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
 2416.                   enddo
 2416.                   u(0, 0, 0) = _copyout( b )
 2416.                   o(0, 0, 0) = _copyout( a )
 2419.                   $SI_L2419_134_G1 = 0
 2419.                   do
 2420.                      $SI_L2420_122_G4 = 0
 2420.                      do
 2421.                         $SI_L2421_104_G7 = 0
 2421.                         do
 2419.                            $I_L2419_154 = 0
 2419. !dir$ shortloop32
 2419. !dir$ blocking_size( 4, 4 )
 2419.                            do
 2420.                               $I_L2420_148 = 0
 2420. !dir$ shortloop32
 2420. !dir$ blocking_size( 4, 4 )
 2420.                               do
 2421.                                  $I_L2421_142 = 0
 2421. !dir$ ivdep
 2421. !dir$ blocking_size( 256, 256 )
 2421.                                  do
 2422.                                     u($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) = o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + $sa_S1 * ( $h2_S0 * r($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + -6.0 * o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 2, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 2, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1) + o($I_L2421_142 + 256 * $SI_L2421_104_G7 + 1, $I_L2420_148 + 4 * $SI_L2420_122_G4 + 1, $I_L2419_154 + 4 * $SI_L2419_134_G1 + 2) )
 2421.                                     $I_L2421_142 = 1 + $I_L2421_142
 2426.                                     if ( $I_L2421_142 >= min( -1 + mx, 256 + 256 * $SI_L2421_104_G7 ) + -256 * $SI_L2421_104_G7 ) exit
 2426.                                  enddo
 2420.                                  $I_L2420_148 = 1 + $I_L2420_148
 2427.                                  if ( $I_L2420_148 >= min( -1 + my, 4 + 4 * $SI_L2420_122_G4 ) + -4 * $SI_L2420_122_G4 ) exit
 2427.                               enddo
 2419.                               $I_L2419_154 = 1 + $I_L2419_154
 2428.                               if ( $I_L2419_154 >= min( -1 + mz, 4 + 4 * $SI_L2419_134_G1 ) + -4 * $SI_L2419_134_G1 ) exit
 2428.                            enddo
 2421.                            $SI_L2421_104_G7 = 1 + $SI_L2421_104_G7
 2426.                            if ( $SI_L2421_104_G7 >= _rsh( 254 + mx, 8 ) ) exit
 2426.                         enddo
 2420.                         $SI_L2420_122_G4 = 1 + $SI_L2420_122_G4
 2427.                         if ( $SI_L2420_122_G4 >= _rsh( 2 + my, 2 ) ) exit
 2427.                      enddo
 2419.                      $SI_L2419_134_G1 = 1 + $SI_L2419_134_G1
 2428.                      if ( $SI_L2419_134_G1 >= _rsh( 2 + mz, 2 ) ) exit
 2428.                   enddo
 2429.                   $I_L2414_138 = 1 + $I_L2414_138
 2429.                   if ( $I_L2414_138 >= izero + m + -1 ) exit
 2429.                enddo
 2429.             else
 2414.                $I_L2414_130 = 0
 2414.                do
 2416.                   ipa$3291 = loc( o(0, 0, 0) )
 2416.                   a = _copyin( o(0, 0, 0) )
 2416.                   ipa$3293 = loc( u(0, 0, 0) )
 2416.                   b = _copyin( u(0, 0, 0) )
 2416.                   $I_L2416_116 = 0
 2416. !dir$ ivdep
 2416.                   do
 2416.                      a(1 + $I_L2416_116) = b(1 + $I_L2416_116)
 2416.                      $I_L2416_116 = 1 + $I_L2416_116
 2416.                      if ( $I_L2416_116 >= mx + my + mz + mx * my + mx * mz + my * mz + mx * my * mz + 1 ) exit
 2416.                   enddo
 2416.                   u(0, 0, 0) = _copyout( b )
 2416.                   o(0, 0, 0) = _copyout( a )
 2429.                   $I_L2414_130 = 1 + $I_L2414_130
 2429.                   if ( $I_L2414_130 >= izero + m + -1 ) exit
 2429.                enddo
 2429.             endif
 2429.          else if ( -1 + mz <= 0 ) then
 2414.             $I_L2414_110 = 0
 2414.             do
 2416.                ipa$3291 = loc( o(0, 0, 0) )
 2416.                a = _copyin( o(0, 0, 0) )
 2416.                ipa$3293 = loc( u(0, 0, 0) )
 2416.                b = _copyin( u(0, 0, 0) )
 2416.                u(0, 0, 0) = _copyout( b )
 2416.                o(0, 0, 0) = _copyout( a )
 2429.                $I_L2414_110 = 1 + $I_L2414_110
 2429.                if ( $I_L2414_110 >= izero + m + -1 ) exit
 2429.             enddo
 2429.          else if ( -1 + my <= 0 ) then
 2414.             $I_L2414_114 = 0
 2414.             do
 2416.                ipa$3291 = loc( o(0, 0, 0) )
 2416.                a = _copyin( o(0, 0, 0) )
 2416.                ipa$3293 = loc( u(0, 0, 0) )
 2416.                b = _copyin( u(0, 0, 0) )
 2416.                u(0, 0, 0) = _copyout( b )
 2416.                o(0, 0, 0) = _copyout( a )
 2429.                $I_L2414_114 = 1 + $I_L2414_114
 2429.                if ( $I_L2414_114 >= izero + m + -1 ) exit
 2429.             enddo
 2429.          else if ( -1 + mx > 0 ) then
 2414.             $I_L2414_140 = 0
 2414.             do
 2416.                ipa$3291 = loc( o(0, 0, 0) )
 2416.                a = _copyin( o(0, 0, 0) )
 2416.                ipa$3293 = loc( u(0, 0, 0) )
 2416.                b = _copyin( u(0, 0, 0) )
 2416.                u(0, 0, 0) = _copyout( b )
 2416.                o(0, 0, 0) = _copyout( a )
 2419.                $SI_L2419_136_G10 = 0
 2419.                do
 2420.                   $SI_L2420_124_G13 = 0
 2420.                   do
 2421.                      $SI_L2421_106_G16 = 0
 2421.                      do
 2419.                         $I_L2419_157 = 0
 2419. !dir$ shortloop32
 2419. !dir$ blocking_size( 4, 4 )
 2419.                         do
 2420.                            $I_L2420_151 = 0
 2420. !dir$ shortloop32
 2420. !dir$ blocking_size( 4, 4 )
 2420.                            do
 2421.                               $I_L2421_145 = 0
 2421. !dir$ ivdep
 2421. !dir$ blocking_size( 256, 256 )
 2421.                               do
 2422.                                  u($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) = o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + $sa_S1 * ( $h2_S0 * r($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + -6.0 * o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + o($I_L2421_145 + 256 * $SI_L2421_106_G16, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 2, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 2, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 1) + o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10) + o($I_L2421_145 + 256 * $SI_L2421_106_G16 + 1, $I_L2420_151 + 4 * $SI_L2420_124_G13 + 1, $I_L2419_157 + 4 * $SI_L2419_136_G10 + 2) )
 2421.                                  $I_L2421_145 = 1 + $I_L2421_145
 2426.                                  if ( $I_L2421_145 >= min( -1 + mx, 256 + 256 * $SI_L2421_106_G16 ) + -256 * $SI_L2421_106_G16 ) exit
 2426.                               enddo
 2420.                               $I_L2420_151 = 1 + $I_L2420_151
 2427.                               if ( $I_L2420_151 >= min( -1 + my, 4 + 4 * $SI_L2420_124_G13 ) + -4 * $SI_L2420_124_G13 ) exit
 2427.                            enddo
 2419.                            $I_L2419_157 = 1 + $I_L2419_157
 2428.                            if ( $I_L2419_157 >= min( -1 + mz, 4 + 4 * $SI_L2419_136_G10 ) + -4 * $SI_L2419_136_G10 ) exit
 2428.                         enddo
 2421.                         $SI_L2421_106_G16 = 1 + $SI_L2421_106_G16
 2426.                         if ( $SI_L2421_106_G16 >= _rsh( 254 + mx, 8 ) ) exit
 2426.                      enddo
 2420.                      $SI_L2420_124_G13 = 1 + $SI_L2420_124_G13
 2427.                      if ( $SI_L2420_124_G13 >= _rsh( 2 + my, 2 ) ) exit
 2427.                   enddo
 2419.                   $SI_L2419_136_G10 = 1 + $SI_L2419_136_G10
 2428.                   if ( $SI_L2419_136_G10 >= _rsh( 2 + mz, 2 ) ) exit
 2428.                enddo
 2429.                $I_L2414_140 = 1 + $I_L2414_140
 2429.                if ( $I_L2414_140 >= izero + m + -1 ) exit
 2429.             enddo
 2429.          else
 2414.             $I_L2414_118 = 0
 2414.             do
 2416.                ipa$3291 = loc( o(0, 0, 0) )
 2416.                a = _copyin( o(0, 0, 0) )
 2416.                ipa$3293 = loc( u(0, 0, 0) )
 2416.                b = _copyin( u(0, 0, 0) )
 2416.                u(0, 0, 0) = _copyout( b )
 2416.                o(0, 0, 0) = _copyout( a )
 2429.                $I_L2414_118 = 1 + $I_L2414_118
 2429.                if ( $I_L2414_118 >= izero + m + -1 ) exit
 2429.             enddo
 2429.          endif
 2429.       endif
 2430.       cflops = cflops + ( -11 * mx + -11 * my + mx * my * 11 + -11 * mz + mx * mz * 11 + my * mz * 11 + mx * my * mz * -11 + -11 * izero + mx * izero * 11 + my * izero * 11 + mx * my * izero * -11 + mz * izero * 11 + mx * mz * izero * -11 + my * mz * izero * -11 + mx * my * mz * izero * 11 + -11 * m + mx * m * 11 + my * m * 11 + mx * my * m * -11 + mz * m * 11 + mx * mz * m * -11 + my * mz * m * -11 + mx * my * mz * m * 11 + 11 )
 2433.       return
 2433.       end
 2433.       
